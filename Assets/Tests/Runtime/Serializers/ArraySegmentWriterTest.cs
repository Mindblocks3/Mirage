using System;
using Mirage.Serialization;
using NUnit.Framework;

namespace Mirage.Tests.Runtime
{
    [TestFixture]
    public class ReadOnlyMemoryWriterTest
    {
        #region ReadOnlyMemory<byte>

        // ReadOnlyMemory<byte> is a special case,  optimized for no copy and no allocation
        // other types are generated by the weaver

        [Test]
        public void TestEmptyByteArray()
        {
            var array = new ReadOnlyMemory<byte>(new byte[0]);

            byte[] data = MessagePacker.Pack(array);

            var unpacked = MessagePacker.Unpack<ReadOnlyMemory<byte>>(data);

            Assert.That(unpacked.Length, Is.EqualTo(0));
        }

        public static ReadOnlyMemory<int> SampleReader(NetworkReader reader)
        {
            int length = reader.ReadPackedInt32();
            int[] array = new int[length];

            for (int i = 0; i < length; i++)
            {
                array[i] = reader.ReadPackedInt32();
            }

            return array;
        }

        [Test]
        public void TestNullByteArray()
        {
            ReadOnlyMemory<byte> array = default;

            byte[] data = MessagePacker.Pack(array);

            var unpacked = MessagePacker.Unpack<ReadOnlyMemory<byte>>(data);

            Assert.That(unpacked.Length, Is.EqualTo(0));
        }

        [Test]
        public void TestSegmentByteArray()
        {
            byte[] sourcedata = { 0, 1, 2, 3, 4, 5, 6 };
            ReadOnlyMemory<byte> array = sourcedata.AsMemory(3,2);

            byte[] data = MessagePacker.Pack(array);

            var unpacked = MessagePacker.Unpack<ReadOnlyMemory<byte>>(data);

            Assert.That(unpacked.Span.SequenceEqual(new byte[] { 3, 4 }));
        }
        #endregion

        #region ReadOnlyMemory<int>

        [Test]
        public void TestEmptyIntArray()
        {
            ReadOnlyMemory<int> array = new ReadOnlyMemory<int>(new int[0]);

            byte[] data = MessagePacker.Pack(array);

            ReadOnlyMemory<int> unpacked = MessagePacker.Unpack<ReadOnlyMemory<int>>(data);

            Assert.That(unpacked.Span.SequenceEqual(new int[0]));
        }

        [Test]
        public void TestNullIntArray()
        {
            ReadOnlyMemory<int> array = default;

            byte[] data = MessagePacker.Pack(array);

            ReadOnlyMemory<int> unpacked = MessagePacker.Unpack<ReadOnlyMemory<int>>(data);

            Assert.That(unpacked.Length, Is.EqualTo(0));
        }

        [Test]
        public void TestSegmentIntArray()
        {
            int[] sourcedata = { 0, 1, 2, 3, 4, 5, 6 };

            ReadOnlyMemory<int> array = sourcedata.AsMemory(3,2);

            byte[] data = MessagePacker.Pack(array);

            ReadOnlyMemory<int> unpacked = MessagePacker.Unpack<ReadOnlyMemory<int>>(data);

            Assert.That(unpacked.Span.SequenceEqual(new[] { 3, 4 }));
        }
        #endregion

    }
}
