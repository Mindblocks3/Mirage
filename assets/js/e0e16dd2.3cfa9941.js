"use strict";(self.webpackChunkmirage_docs=self.webpackChunkmirage_docs||[]).push([[5515],{3905:(e,t,a)=>{a.d(t,{Zo:()=>o,kt:()=>g});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=n.createContext({}),p=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},o=function(e){var t=p(e.components);return n.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,o=s(e,["components","mdxType","originalType","parentName"]),u=p(a),g=r,b=u["".concat(d,".").concat(g)]||u[g]||c[g]||l;return a?n.createElement(b,i(i({ref:t},o),{},{components:a})):n.createElement(b,i({ref:t},o))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=u;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},71337:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const l={id:"ClientObjectManager",title:"ClientObjectManager"},i="Class ClientObjectManager",s={unversionedId:"reference/Mirage/ClientObjectManager",id:"reference/Mirage/ClientObjectManager",title:"ClientObjectManager",description:"Inheritance",source:"@site/docs/reference/Mirage/ClientObjectManager.md",sourceDirName:"reference/Mirage",slug:"/reference/Mirage/ClientObjectManager",permalink:"/Mirage/docs/reference/Mirage/ClientObjectManager",draft:!1,editUrl:"https://github.com/MirageNet/Mirage/tree/master/doc/docs/reference/Mirage/ClientObjectManager.md",tags:[],version:"current",frontMatter:{id:"ClientObjectManager",title:"ClientObjectManager"},sidebar:"api",previous:{title:"ClientAttribute",permalink:"/Mirage/docs/reference/Mirage/ClientAttribute"},next:{title:"ClientRpcAttribute",permalink:"/Mirage/docs/reference/Mirage/ClientRpcAttribute"}},d={},p=[{value:"Inheritance",id:"inheritance",level:5},{value:"Syntax",id:"syntax",level:5},{value:"Fields",id:"fields",level:3},{value:"Client",id:"client",level:4},{value:"Declaration",id:"declaration",level:5},{value:"NetworkSceneManager",id:"networkscenemanager",level:4},{value:"Declaration",id:"declaration-1",level:5},{value:"spawnPrefabs",id:"spawnprefabs",level:4},{value:"Declaration",id:"declaration-2",level:5},{value:"spawnableObjects",id:"spawnableobjects",level:4},{value:"Declaration",id:"declaration-3",level:5},{value:"Methods",id:"methods",level:3},{value:"Start()",id:"start",level:4},{value:"Declaration",id:"declaration-4",level:5},{value:"PrepareToSpawnSceneObjects()",id:"preparetospawnsceneobjects",level:4},{value:"Declaration",id:"declaration-5",level:5},{value:"GetPrefab(Int32)",id:"getprefabint32",level:4},{value:"Declaration",id:"declaration-6",level:5},{value:"Parameters",id:"parameters",level:5},{value:"Returns",id:"returns",level:5},{value:"RegisterPrefab(NetworkIdentity, Int32)",id:"registerprefabnetworkidentity-int32",level:4},{value:"Declaration",id:"declaration-7",level:5},{value:"Parameters",id:"parameters-1",level:5},{value:"RegisterPrefab(NetworkIdentity)",id:"registerprefabnetworkidentity",level:4},{value:"Declaration",id:"declaration-8",level:5},{value:"Parameters",id:"parameters-2",level:5},{value:"RegisterPrefab(NetworkIdentity, SpawnHandlerDelegate, UnSpawnDelegate)",id:"registerprefabnetworkidentity-spawnhandlerdelegate-unspawndelegate",level:4},{value:"Declaration",id:"declaration-9",level:5},{value:"Parameters",id:"parameters-3",level:5},{value:"UnregisterPrefab(NetworkIdentity)",id:"unregisterprefabnetworkidentity",level:4},{value:"Declaration",id:"declaration-10",level:5},{value:"Parameters",id:"parameters-4",level:5},{value:"RegisterSpawnHandler(Int32, SpawnHandlerDelegate, UnSpawnDelegate)",id:"registerspawnhandlerint32-spawnhandlerdelegate-unspawndelegate",level:4},{value:"Declaration",id:"declaration-11",level:5},{value:"Parameters",id:"parameters-5",level:5},{value:"UnregisterSpawnHandler(Int32)",id:"unregisterspawnhandlerint32",level:4},{value:"Declaration",id:"declaration-12",level:5},{value:"Parameters",id:"parameters-6",level:5},{value:"ClearSpawners()",id:"clearspawners",level:4},{value:"Declaration",id:"declaration-13",level:5},{value:"DestroyAllClientObjects()",id:"destroyallclientobjects",level:4},{value:"Declaration",id:"declaration-14",level:5}],o={toc:p};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},o,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"class-clientobjectmanager"},"Class ClientObjectManager"),(0,r.kt)("div",{class:"inheritance"},(0,r.kt)("h5",{id:"inheritance"},"Inheritance"),(0,r.kt)("div",{class:"level",style:{"--data-index":0}},"System.Object")),(0,r.kt)("h5",{id:"syntax"},"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public class ClientObjectManager : MonoBehaviour, IClientObjectManager\n")),(0,r.kt)("h3",{id:"fields"},"Fields"),(0,r.kt)("h4",{id:"client"},"Client"),(0,r.kt)("h5",{id:"declaration"},"Declaration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public NetworkClient Client\n")),(0,r.kt)("h4",{id:"networkscenemanager"},"NetworkSceneManager"),(0,r.kt)("h5",{id:"declaration-1"},"Declaration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public NetworkSceneManager NetworkSceneManager\n")),(0,r.kt)("h4",{id:"spawnprefabs"},"spawnPrefabs"),(0,r.kt)("p",null,"List of prefabs that will be registered with the spawning system.\nFor each of these prefabs, ClientManager.RegisterPrefab() will be automatically invoke."),(0,r.kt)("h5",{id:"declaration-2"},"Declaration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public List<NetworkIdentity> spawnPrefabs\n")),(0,r.kt)("h4",{id:"spawnableobjects"},"spawnableObjects"),(0,r.kt)("p",null,"This is dictionary of the disabled NetworkIdentity objects in the scene that could be spawned by messages from the server.\nThe key to the dictionary is the NetworkIdentity sceneId."),(0,r.kt)("h5",{id:"declaration-3"},"Declaration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public readonly Dictionary<ulong, NetworkIdentity> spawnableObjects\n")),(0,r.kt)("h3",{id:"methods"},"Methods"),(0,r.kt)("h4",{id:"start"},"Start()"),(0,r.kt)("h5",{id:"declaration-4"},"Declaration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public void Start()\n")),(0,r.kt)("h4",{id:"preparetospawnsceneobjects"},"PrepareToSpawnSceneObjects()"),(0,r.kt)("p",null,"Call this after loading/unloading a scene in the client after connection to register the spawnable objects"),(0,r.kt)("h5",{id:"declaration-5"},"Declaration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public void PrepareToSpawnSceneObjects()\n")),(0,r.kt)("h4",{id:"getprefabint32"},"GetPrefab(Int32)"),(0,r.kt)("p",null,"Find the registered prefab for this asset id.\nUseful for debuggers"),(0,r.kt)("h5",{id:"declaration-6"},"Declaration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public NetworkIdentity GetPrefab(int prefabHash)\n")),(0,r.kt)("h5",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"System.Int32"),(0,r.kt)("td",{parentName:"tr",align:null},"prefabHash"),(0,r.kt)("td",{parentName:"tr",align:null},"asset id of the prefab")))),(0,r.kt)("h5",{id:"returns"},"Returns"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Mirage.NetworkIdentity"),(0,r.kt)("td",{parentName:"tr",align:null},"true if prefab was registered")))),(0,r.kt)("h4",{id:"registerprefabnetworkidentity-int32"},"RegisterPrefab(NetworkIdentity, Int32)"),(0,r.kt)("p",null,"Registers a prefab with the spawning system.\nWhen a NetworkIdentity object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId.\nThe ClientObjectManager has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene.\nThe set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of PrefabHash and prefab references."),(0,r.kt)("h5",{id:"declaration-7"},"Declaration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public void RegisterPrefab(NetworkIdentity identity, int newPrefabHash)\n")),(0,r.kt)("h5",{id:"parameters-1"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Mirage.NetworkIdentity"),(0,r.kt)("td",{parentName:"tr",align:null},"identity"),(0,r.kt)("td",{parentName:"tr",align:null},"A Prefab that will be spawned.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"System.Int32"),(0,r.kt)("td",{parentName:"tr",align:null},"newPrefabHash"),(0,r.kt)("td",{parentName:"tr",align:null},"A hash to be assigned to this prefab. This allows a dynamically created game object to be registered for an already known asset Id.")))),(0,r.kt)("h4",{id:"registerprefabnetworkidentity"},"RegisterPrefab(NetworkIdentity)"),(0,r.kt)("p",null,"Registers a prefab with the spawning system.\nWhen a NetworkIdentity object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId.\nThe ClientObjectManager has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene.\nThe set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of PrefabHash and prefab references."),(0,r.kt)("h5",{id:"declaration-8"},"Declaration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public void RegisterPrefab(NetworkIdentity identity)\n")),(0,r.kt)("h5",{id:"parameters-2"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Mirage.NetworkIdentity"),(0,r.kt)("td",{parentName:"tr",align:null},"identity"),(0,r.kt)("td",{parentName:"tr",align:null},"A Prefab that will be spawned.")))),(0,r.kt)("h4",{id:"registerprefabnetworkidentity-spawnhandlerdelegate-unspawndelegate"},"RegisterPrefab(NetworkIdentity, SpawnHandlerDelegate, UnSpawnDelegate)"),(0,r.kt)("p",null,"Registers a prefab with the spawning system.\nWhen a NetworkIdentity object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId.\nThe ClientObjectManager has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene.\nThe set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of PrefabHash and prefab references."),(0,r.kt)("h5",{id:"declaration-9"},"Declaration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public void RegisterPrefab(NetworkIdentity identity, SpawnHandlerDelegate spawnHandler, UnSpawnDelegate unspawnHandler)\n")),(0,r.kt)("h5",{id:"parameters-3"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Mirage.NetworkIdentity"),(0,r.kt)("td",{parentName:"tr",align:null},"identity"),(0,r.kt)("td",{parentName:"tr",align:null},"A Prefab that will be spawned.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Mirage.SpawnHandlerDelegate"),(0,r.kt)("td",{parentName:"tr",align:null},"spawnHandler"),(0,r.kt)("td",{parentName:"tr",align:null},"A method to use as a custom spawnhandler on clients.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Mirage.UnSpawnDelegate"),(0,r.kt)("td",{parentName:"tr",align:null},"unspawnHandler"),(0,r.kt)("td",{parentName:"tr",align:null},"A method to use as a custom un-spawnhandler on clients.")))),(0,r.kt)("h4",{id:"unregisterprefabnetworkidentity"},"UnregisterPrefab(NetworkIdentity)"),(0,r.kt)("p",null,"Removes a registered spawn prefab that was setup with ClientScene.RegisterPrefab."),(0,r.kt)("h5",{id:"declaration-10"},"Declaration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public void UnregisterPrefab(NetworkIdentity identity)\n")),(0,r.kt)("h5",{id:"parameters-4"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Mirage.NetworkIdentity"),(0,r.kt)("td",{parentName:"tr",align:null},"identity"),(0,r.kt)("td",{parentName:"tr",align:null},"The prefab to be removed from registration.")))),(0,r.kt)("h4",{id:"registerspawnhandlerint32-spawnhandlerdelegate-unspawndelegate"},"RegisterSpawnHandler(Int32, SpawnHandlerDelegate, UnSpawnDelegate)"),(0,r.kt)("p",null,"This is an advanced spawning function that registers a custom prefabHash with the UNET spawning system.\nThis can be used to register custom spawning methods for an prefabHash - instead of the usual method of registering spawning methods for a prefab. This should be used when no prefab exists for the spawned objects - such as when they are constructed dynamically at runtime from configuration data."),(0,r.kt)("h5",{id:"declaration-11"},"Declaration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public void RegisterSpawnHandler(int prefabHash, SpawnHandlerDelegate spawnHandler, UnSpawnDelegate unspawnHandler)\n")),(0,r.kt)("h5",{id:"parameters-5"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"System.Int32"),(0,r.kt)("td",{parentName:"tr",align:null},"prefabHash"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Mirage.SpawnHandlerDelegate"),(0,r.kt)("td",{parentName:"tr",align:null},"spawnHandler"),(0,r.kt)("td",{parentName:"tr",align:null},"A method to use as a custom spawnhandler on clients.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Mirage.UnSpawnDelegate"),(0,r.kt)("td",{parentName:"tr",align:null},"unspawnHandler"),(0,r.kt)("td",{parentName:"tr",align:null},"A method to use as a custom un-spawnhandler on clients.")))),(0,r.kt)("h4",{id:"unregisterspawnhandlerint32"},"UnregisterSpawnHandler(Int32)"),(0,r.kt)("p",null,"Removes a registered spawn handler function that was registered with ClientScene.RegisterHandler()."),(0,r.kt)("h5",{id:"declaration-12"},"Declaration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public void UnregisterSpawnHandler(int prefabHash)\n")),(0,r.kt)("h5",{id:"parameters-6"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"System.Int32"),(0,r.kt)("td",{parentName:"tr",align:null},"prefabHash"),(0,r.kt)("td",{parentName:"tr",align:null},"The prefabHash for the handler to be removed for.")))),(0,r.kt)("h4",{id:"clearspawners"},"ClearSpawners()"),(0,r.kt)("p",null,"This clears the registered spawn prefabs and spawn handler functions for this client."),(0,r.kt)("h5",{id:"declaration-13"},"Declaration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public void ClearSpawners()\n")),(0,r.kt)("h4",{id:"destroyallclientobjects"},"DestroyAllClientObjects()"),(0,r.kt)("p",null,"Destroys all networked objects on the client.\nThis can be used to clean up when a network connection is closed."),(0,r.kt)("h5",{id:"declaration-14"},"Declaration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public void DestroyAllClientObjects()\n")))}c.isMDXComponent=!0}}]);