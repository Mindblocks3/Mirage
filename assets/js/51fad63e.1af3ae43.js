"use strict";(self.webpackChunkmirage_docs=self.webpackChunkmirage_docs||[]).push([[678],{3905:(e,r,t)=>{t.d(r,{Zo:()=>d,kt:()=>f});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),c=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},d=function(e){var r=c(e.components);return n.createElement(s.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=c(t),f=o,u=m["".concat(s,".").concat(f)]||m[f]||p[f]||a;return t?n.createElement(u,i(i({ref:r},d),{},{components:t})):n.createElement(u,i({ref:r},d))}));function f(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},96009:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var n=t(87462),o=(t(67294),t(3905));const a={id:"Mirage.Experimental",title:"Mirage.Experimental"},i="Mirage.Experimental",l={unversionedId:"reference/Mirage.Experimental/Mirage.Experimental",id:"reference/Mirage.Experimental/Mirage.Experimental",title:"Mirage.Experimental",description:"Classes",source:"@site/docs/reference/Mirage.Experimental/index.md",sourceDirName:"reference/Mirage.Experimental",slug:"/reference/Mirage.Experimental/",permalink:"/Mirage/docs/reference/Mirage.Experimental/",draft:!1,editUrl:"https://github.com/MirageNet/Mirage/tree/master/doc/docs/reference/Mirage.Experimental/index.md",tags:[],version:"current",frontMatter:{id:"Mirage.Experimental",title:"Mirage.Experimental"},sidebar:"api",previous:{title:"NetworkPlayerEvent",permalink:"/Mirage/docs/reference/Mirage.Events/NetworkPlayerEvent"},next:{title:"NetworkLerpRigidbody",permalink:"/Mirage/docs/reference/Mirage.Experimental/NetworkLerpRigidbody"}},s={},c=[{value:"Classes",id:"classes",level:2},{value:"NetworkLerpRigidbody",id:"networklerprigidbody",level:4},{value:"NetworkRigidbody",id:"networkrigidbody",level:4},{value:"NetworkRigidbody.ClientSyncState",id:"networkrigidbodyclientsyncstate",level:4},{value:"NetworkTransform",id:"networktransform",level:4},{value:"NetworkTransformBase",id:"networktransformbase",level:4},{value:"NetworkTransformChild",id:"networktransformchild",level:4},{value:"Structs",id:"structs",level:2},{value:"NetworkTransformBase.DataPoint",id:"networktransformbasedatapoint",level:4}],d={toc:c};function p(e){let{components:r,...t}=e;return(0,o.kt)("wrapper",(0,n.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"mirageexperimental"},"Mirage.Experimental"),(0,o.kt)("h2",{id:"classes"},"Classes"),(0,o.kt)("h4",{id:"networklerprigidbody"},(0,o.kt)("a",{parentName:"h4",href:"./NetworkLerpRigidbody"},"NetworkLerpRigidbody")),(0,o.kt)("h4",{id:"networkrigidbody"},(0,o.kt)("a",{parentName:"h4",href:"./NetworkRigidbody"},"NetworkRigidbody")),(0,o.kt)("h4",{id:"networkrigidbodyclientsyncstate"},(0,o.kt)("a",{parentName:"h4",href:"./NetworkRigidbody.ClientSyncState"},"NetworkRigidbody.ClientSyncState")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"holds previously synced values")),(0,o.kt)("h4",{id:"networktransform"},(0,o.kt)("a",{parentName:"h4",href:"./NetworkTransform"},"NetworkTransform")),(0,o.kt)("h4",{id:"networktransformbase"},(0,o.kt)("a",{parentName:"h4",href:"./NetworkTransformBase"},"NetworkTransformBase")),(0,o.kt)("h4",{id:"networktransformchild"},(0,o.kt)("a",{parentName:"h4",href:"./NetworkTransformChild"},"NetworkTransformChild")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"A component to synchronize the position of child transforms of networked objects.\nThere must be a NetworkTransform on the root object of the hierarchy. There can be multiple NetworkTransformChild components on an object. This does not use physics for synchronization, it simply synchronizes the localPosition and localRotation of the child transform and lerps towards the received values.")),(0,o.kt)("h2",{id:"structs"},"Structs"),(0,o.kt)("h4",{id:"networktransformbasedatapoint"},(0,o.kt)("a",{parentName:"h4",href:"./NetworkTransformBase.DataPoint"},"NetworkTransformBase.DataPoint")))}p.isMDXComponent=!0}}]);