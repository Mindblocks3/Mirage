"use strict";(self.webpackChunkmirage_docs=self.webpackChunkmirage_docs||[]).push([[4716],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),g=l(n),d=i,m=g["".concat(s,".").concat(d)]||g[d]||p[d]||r;return n?a.createElement(m,o(o({ref:t},u),{},{components:n})):a.createElement(m,o({ref:t},u))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=g;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var l=2;l<r;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},81793:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var a=n(87462),i=(n(67294),n(3905));const r={},o="Bit Packing",c={unversionedId:"guides/bit-packing/index",id:"guides/bit-packing/index",title:"Bit Packing",description:"Bit packing is a form of data compression that reduces the number of bits it takes to serialize a value.",source:"@site/docs/guides/bit-packing/index.md",sourceDirName:"guides/bit-packing",slug:"/guides/bit-packing/",permalink:"/Mirage/docs/guides/bit-packing/",draft:!1,editUrl:"https://github.com/MirageNet/Mirage/tree/master/doc/docs/guides/bit-packing/index.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Network Scene Manager",permalink:"/Mirage/docs/guides/scene-loading/network-scene-manager"},next:{title:"Bit Count From Range",permalink:"/Mirage/docs/guides/bit-packing/bit-count-from-range"}},s={},l=[{value:"Bit Packing in Mirage",id:"bit-packing-in-mirage",level:2}],u={toc:l};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"bit-packing"},"Bit Packing"),(0,i.kt)("p",null,"Bit packing is a form of data compression that reduces the number of bits it takes to serialize a value."),(0,i.kt)("p",null,"A simple example of this is an integer that is always between 0 and 100. Normally an integer will be serialized as 32 bits, but knowing its range is 100 it can be packed into only 7 bits."),(0,i.kt)("h2",{id:"bit-packing-in-mirage"},"Bit Packing in Mirage"),(0,i.kt)("p",null,"Mirage has many attributes that can be applied to SyncVars and Rpc parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/guides/bit-packing/bit-count"},"BitCount")," Sets the number of bits on an integer"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/guides/bit-packing/bit-count-from-range"},"BitCountFromRange")," Sets the number of bits from a given range, rounding up."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/guides/bit-packing/zig-zag-encode"},"ZigZagEncode")," Encodes a value using ",(0,i.kt)("a",{parentName:"li",href:"https://gist.github.com/mfuerstenau/ba870a29e16536fdbaba"},"ZigZag Encoding"),". Only useable with ",(0,i.kt)("a",{parentName:"li",href:"/docs/guides/bit-packing/bit-count"},"BitCount")," or ",(0,i.kt)("a",{parentName:"li",href:"/docs/guides/bit-packing/var-int-blocks"},"VarIntBlocks")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/guides/bit-packing/var-int"},"VarInt")," Packs int to different sizes based on their size. Allows for 3 configurable size ranges"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/guides/bit-packing/var-int-blocks"},"VarIntBlocks"),"  Packs int to different sizes based on their size. Uses block size so can be used over a large range of values"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/guides/bit-packing/float-pack"},"FloatPack")," Compresses a float value"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/guides/bit-packing/vector-pack"},"VectorPack")," Compresses a Vector value"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/guides/bit-packing/quaternion-pack"},"QuaternionPack")," Compresses a Quaternion value")))}p.isMDXComponent=!0}}]);