{
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation !"
  },
  "api/Mirage.AddCharacterMessage.html": {
    "href": "api/Mirage.AddCharacterMessage.html",
    "title": "Struct AddCharacterMessage",
    "keywords": "Struct AddCharacterMessage Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax public struct AddCharacterMessage"
  },
  "api/Mirage.Authenticators.BasicAuthenticator.html": {
    "href": "api/Mirage.Authenticators.BasicAuthenticator.html",
    "title": "Class BasicAuthenticator",
    "keywords": "Class BasicAuthenticator Basic Authenticator that lets the server/host set a \"passcode\" in order to connect. This code could be a short string that can be used to host a private game. The host would set the code and then give it to their friends allowing them to join. Inheritance Object Object Component Behaviour MonoBehaviour NetworkAuthenticator BasicAuthenticator Inherited Members NetworkAuthenticator.OnServerAuthenticated NetworkAuthenticator.OnClientAuthenticated NetworkAuthenticator.ServerAccept(INetworkPlayer) NetworkAuthenticator.ServerReject(INetworkPlayer) NetworkAuthenticator.ClientAccept(INetworkPlayer) NetworkAuthenticator.ClientReject(INetworkPlayer) MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage.Authenticators Assembly : Mirage.Authenticators.dll Syntax [AddComponentMenu(\"Network/Authenticators/BasicAuthenticator\")] public class BasicAuthenticator : NetworkAuthenticator Fields | Improve this Doc View Source serverCode Code given to clients so that they can connect to the server/host Set this in inspector or at runtime when the server/host starts Declaration [Header(\"Custom Properties\")] public string serverCode Field Value Type Description String Methods | Improve this Doc View Source ClientAuthenticate(INetworkPlayer) Declaration public override void ClientAuthenticate(INetworkPlayer player) Parameters Type Name Description INetworkPlayer player Overrides NetworkAuthenticator.ClientAuthenticate(INetworkPlayer) | Improve this Doc View Source ClientSetup(NetworkClient) Declaration public override void ClientSetup(NetworkClient client) Parameters Type Name Description NetworkClient client Overrides NetworkAuthenticator.ClientSetup(NetworkClient) | Improve this Doc View Source ServerAuthenticate(INetworkPlayer) Declaration public override void ServerAuthenticate(INetworkPlayer player) Parameters Type Name Description INetworkPlayer player Overrides NetworkAuthenticator.ServerAuthenticate(INetworkPlayer) | Improve this Doc View Source ServerSetup(NetworkServer) Declaration public override void ServerSetup(NetworkServer server) Parameters Type Name Description NetworkServer server Overrides NetworkAuthenticator.ServerSetup(NetworkServer)"
  },
  "api/Mirage.Authenticators.html": {
    "href": "api/Mirage.Authenticators.html",
    "title": "Namespace Mirage.Authenticators",
    "keywords": "Namespace Mirage.Authenticators Classes BasicAuthenticator Basic Authenticator that lets the server/host set a \"passcode\" in order to connect. This code could be a short string that can be used to host a private game. The host would set the code and then give it to their friends allowing them to join. TimeoutAuthenticator An authenticator that disconnects connections if they don't authenticate within a specified time limit."
  },
  "api/Mirage.Authenticators.TimeoutAuthenticator.html": {
    "href": "api/Mirage.Authenticators.TimeoutAuthenticator.html",
    "title": "Class TimeoutAuthenticator",
    "keywords": "Class TimeoutAuthenticator An authenticator that disconnects connections if they don't authenticate within a specified time limit. Inheritance Object Object Component Behaviour MonoBehaviour NetworkAuthenticator TimeoutAuthenticator Inherited Members NetworkAuthenticator.OnServerAuthenticated NetworkAuthenticator.OnClientAuthenticated NetworkAuthenticator.ServerAccept(INetworkPlayer) NetworkAuthenticator.ServerReject(INetworkPlayer) NetworkAuthenticator.ClientAccept(INetworkPlayer) NetworkAuthenticator.ClientReject(INetworkPlayer) MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage.Authenticators Assembly : Mirage.Authenticators.dll Syntax [AddComponentMenu(\"Network/Authenticators/TimeoutAuthenticator\")] public class TimeoutAuthenticator : NetworkAuthenticator Fields | Improve this Doc View Source Authenticator Declaration public NetworkAuthenticator Authenticator Field Value Type Description NetworkAuthenticator | Improve this Doc View Source Timeout Declaration [Range(0F, 600F)] [Tooltip(\"Timeout to auto-disconnect in seconds. Set to 0 for no timeout.\")] public float Timeout Field Value Type Description Single Methods | Improve this Doc View Source Awake() Declaration public void Awake() | Improve this Doc View Source ClientAuthenticate(INetworkPlayer) Declaration public override void ClientAuthenticate(INetworkPlayer player) Parameters Type Name Description INetworkPlayer player Overrides NetworkAuthenticator.ClientAuthenticate(INetworkPlayer) | Improve this Doc View Source ClientSetup(NetworkClient) Declaration public override void ClientSetup(NetworkClient client) Parameters Type Name Description NetworkClient client Overrides NetworkAuthenticator.ClientSetup(NetworkClient) | Improve this Doc View Source ServerAuthenticate(INetworkPlayer) Declaration public override void ServerAuthenticate(INetworkPlayer player) Parameters Type Name Description INetworkPlayer player Overrides NetworkAuthenticator.ServerAuthenticate(INetworkPlayer) | Improve this Doc View Source ServerSetup(NetworkServer) Declaration public override void ServerSetup(NetworkServer server) Parameters Type Name Description NetworkServer server Overrides NetworkAuthenticator.ServerSetup(NetworkServer)"
  },
  "api/Mirage.Channel.html": {
    "href": "api/Mirage.Channel.html",
    "title": "Class Channel",
    "keywords": "Class Channel Inheritance Object Channel Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage Assembly : Mirage.SocketLayer.dll Syntax public static class Channel Fields | Improve this Doc View Source Reliable Declaration public const int Reliable = 0 Field Value Type Description Int32 | Improve this Doc View Source Unreliable Declaration public const int Unreliable = 1 Field Value Type Description Int32"
  },
  "api/Mirage.CharacterSpawner.html": {
    "href": "api/Mirage.CharacterSpawner.html",
    "title": "Class CharacterSpawner",
    "keywords": "Class CharacterSpawner Spawns a player as soon as the connection is authenticated Inheritance Object Object Component Behaviour MonoBehaviour CharacterSpawner Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax public class CharacterSpawner : MonoBehaviour Fields | Improve this Doc View Source AutoSpawn Whether to span the player upon connection automatically Declaration public bool AutoSpawn Field Value Type Description Boolean | Improve this Doc View Source Client Declaration [FormerlySerializedAs(\"client\")] public NetworkClient Client Field Value Type Description NetworkClient | Improve this Doc View Source ClientObjectManager Declaration [FormerlySerializedAs(\"clientObjectManager\")] public ClientObjectManager ClientObjectManager Field Value Type Description ClientObjectManager | Improve this Doc View Source PlayerPrefab Declaration [FormerlySerializedAs(\"playerPrefab\")] public NetworkIdentity PlayerPrefab Field Value Type Description NetworkIdentity | Improve this Doc View Source playerSpawnMethod The current method of spawning players used by the CharacterSpawner. Declaration [Tooltip(\"Round Robin or Random order of Start Position selection\")] public CharacterSpawner.PlayerSpawnMethod playerSpawnMethod Field Value Type Description CharacterSpawner.PlayerSpawnMethod | Improve this Doc View Source SceneManager Declaration [FormerlySerializedAs(\"sceneManager\")] public NetworkSceneManager SceneManager Field Value Type Description NetworkSceneManager | Improve this Doc View Source Server Declaration [FormerlySerializedAs(\"server\")] public NetworkServer Server Field Value Type Description NetworkServer | Improve this Doc View Source ServerObjectManager Declaration [FormerlySerializedAs(\"serverObjectManager\")] public ServerObjectManager ServerObjectManager Field Value Type Description ServerObjectManager | Improve this Doc View Source startPositionIndex Declaration public int startPositionIndex Field Value Type Description Int32 | Improve this Doc View Source startPositions List of transforms where players can be spawned Declaration public List<Transform> startPositions Field Value Type Description List < Transform > Methods | Improve this Doc View Source Awake() Declaration public virtual void Awake() | Improve this Doc View Source GetStartPosition() This finds a spawn position based on start position objects in the scene. This is used by the default implementation of OnServerAddPlayer. Declaration public virtual Transform GetStartPosition() Returns Type Description Transform Returns the transform to spawn a player at, or null. | Improve this Doc View Source OnClientFinishedSceneChange(Scene, SceneOperation) Called on the client when a normal scene change happens. The default implementation of this function sets the client as ready and adds a player. Override the function to dictate what happens when the client connects. Declaration public virtual void OnClientFinishedSceneChange(Scene scene, SceneOperation sceneOperation) Parameters Type Name Description Scene scene SceneOperation sceneOperation The type of scene load that happened. | Improve this Doc View Source OnServerAddPlayer(INetworkPlayer) Called on the server when a client adds a new player with ClientScene.AddPlayer. The default implementation for this function creates a new player object from the playerPrefab. Declaration public virtual void OnServerAddPlayer(INetworkPlayer player) Parameters Type Name Description INetworkPlayer player Connection from client. | Improve this Doc View Source RequestServerSpawnPlayer() Declaration public virtual void RequestServerSpawnPlayer() | Improve this Doc View Source SetCharacterName(INetworkPlayer, NetworkIdentity) Declaration protected virtual void SetCharacterName(INetworkPlayer player, NetworkIdentity character) Parameters Type Name Description INetworkPlayer player NetworkIdentity character"
  },
  "api/Mirage.CharacterSpawner.PlayerSpawnMethod.html": {
    "href": "api/Mirage.CharacterSpawner.PlayerSpawnMethod.html",
    "title": "Enum CharacterSpawner.PlayerSpawnMethod",
    "keywords": "Enum CharacterSpawner.PlayerSpawnMethod Enumeration of methods of where to spawn player objects in multiplayer games. Namespace : Mirage Assembly : Mirage.dll Syntax public enum PlayerSpawnMethod Fields Name Description Random RoundRobin"
  },
  "api/Mirage.ClientAttribute.html": {
    "href": "api/Mirage.ClientAttribute.html",
    "title": "Class ClientAttribute",
    "keywords": "Class ClientAttribute Prevents this method from running if client is not active. Can only be used inside a NetworkBehaviour Inheritance Object Attribute ClientAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage Assembly : Mirage.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class ClientAttribute : Attribute Fields | Improve this Doc View Source error If true, when the method is called from a client, it throws an error If false, no error is thrown, but the method won't execute useful for unity built in methods such as Await, Update, Start, etc. Declaration public bool error Field Value Type Description Boolean"
  },
  "api/Mirage.ClientObjectManager.html": {
    "href": "api/Mirage.ClientObjectManager.html",
    "title": "Class ClientObjectManager",
    "keywords": "Class ClientObjectManager Inheritance Object Object Component Behaviour MonoBehaviour ClientObjectManager Implements IClientObjectManager Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax [AddComponentMenu(\"Network/ClientObjectManager\")] [DisallowMultipleComponent] public class ClientObjectManager : MonoBehaviour, IClientObjectManager Fields | Improve this Doc View Source Client Declaration [FormerlySerializedAs(\"client\")] public NetworkClient Client Field Value Type Description NetworkClient | Improve this Doc View Source NetworkSceneManager Declaration [FormerlySerializedAs(\"networkSceneManager\")] public NetworkSceneManager NetworkSceneManager Field Value Type Description NetworkSceneManager | Improve this Doc View Source spawnableObjects This is dictionary of the disabled NetworkIdentity objects in the scene that could be spawned by messages from the server. The key to the dictionary is the NetworkIdentity sceneId. Declaration public readonly Dictionary<ulong, NetworkIdentity> spawnableObjects Field Value Type Description Dictionary < UInt64 , NetworkIdentity > | Improve this Doc View Source spawnPrefabs List of prefabs that will be registered with the spawning system. For each of these prefabs, ClientManager.RegisterPrefab() will be automatically invoke. Declaration [Header(\"Prefabs\")] public List<NetworkIdentity> spawnPrefabs Field Value Type Description List < NetworkIdentity > Methods | Improve this Doc View Source ClearSpawners() This clears the registered spawn prefabs and spawn handler functions for this client. Declaration public void ClearSpawners() | Improve this Doc View Source DestroyAllClientObjects() Destroys all networked objects on the client. This can be used to clean up when a network connection is closed. Declaration public void DestroyAllClientObjects() | Improve this Doc View Source GetPrefab(Int32) Find the registered prefab for this asset id. Useful for debuggers Declaration public NetworkIdentity GetPrefab(int prefabHash) Parameters Type Name Description Int32 prefabHash asset id of the prefab Returns Type Description NetworkIdentity true if prefab was registered | Improve this Doc View Source PrepareToSpawnSceneObjects() Call this after loading/unloading a scene in the client after connection to register the spawnable objects Declaration public void PrepareToSpawnSceneObjects() | Improve this Doc View Source RegisterPrefab(NetworkIdentity) Registers a prefab with the spawning system. When a NetworkIdentity object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId. The ClientObjectManager has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene. The set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of PrefabHash and prefab references. Declaration public void RegisterPrefab(NetworkIdentity identity) Parameters Type Name Description NetworkIdentity identity A Prefab that will be spawned. | Improve this Doc View Source RegisterPrefab(NetworkIdentity, SpawnHandlerDelegate, UnSpawnDelegate) Registers a prefab with the spawning system. When a NetworkIdentity object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId. The ClientObjectManager has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene. The set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of PrefabHash and prefab references. Declaration public void RegisterPrefab(NetworkIdentity identity, SpawnHandlerDelegate spawnHandler, UnSpawnDelegate unspawnHandler) Parameters Type Name Description NetworkIdentity identity A Prefab that will be spawned. SpawnHandlerDelegate spawnHandler A method to use as a custom spawnhandler on clients. UnSpawnDelegate unspawnHandler A method to use as a custom un-spawnhandler on clients. | Improve this Doc View Source RegisterPrefab(NetworkIdentity, Int32) Registers a prefab with the spawning system. When a NetworkIdentity object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId. The ClientObjectManager has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene. The set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of PrefabHash and prefab references. Declaration public void RegisterPrefab(NetworkIdentity identity, int newPrefabHash) Parameters Type Name Description NetworkIdentity identity A Prefab that will be spawned. Int32 newPrefabHash A hash to be assigned to this prefab. This allows a dynamically created game object to be registered for an already known asset Id. | Improve this Doc View Source RegisterSpawnHandler(Int32, SpawnHandlerDelegate, UnSpawnDelegate) This is an advanced spawning function that registers a custom prefabHash with the UNET spawning system. This can be used to register custom spawning methods for an prefabHash - instead of the usual method of registering spawning methods for a prefab. This should be used when no prefab exists for the spawned objects - such as when they are constructed dynamically at runtime from configuration data. Declaration public void RegisterSpawnHandler(int prefabHash, SpawnHandlerDelegate spawnHandler, UnSpawnDelegate unspawnHandler) Parameters Type Name Description Int32 prefabHash SpawnHandlerDelegate spawnHandler A method to use as a custom spawnhandler on clients. UnSpawnDelegate unspawnHandler A method to use as a custom un-spawnhandler on clients. | Improve this Doc View Source Start() Declaration public void Start() | Improve this Doc View Source UnregisterPrefab(NetworkIdentity) Removes a registered spawn prefab that was setup with ClientScene.RegisterPrefab. Declaration public void UnregisterPrefab(NetworkIdentity identity) Parameters Type Name Description NetworkIdentity identity The prefab to be removed from registration. | Improve this Doc View Source UnregisterSpawnHandler(Int32) Removes a registered spawn handler function that was registered with ClientScene.RegisterHandler(). Declaration public void UnregisterSpawnHandler(int prefabHash) Parameters Type Name Description Int32 prefabHash The prefabHash for the handler to be removed for. Implements IClientObjectManager"
  },
  "api/Mirage.ClientRpcAttribute.html": {
    "href": "api/Mirage.ClientRpcAttribute.html",
    "title": "Class ClientRpcAttribute",
    "keywords": "Class ClientRpcAttribute The server uses a Remote Procedure Call (RPC) to run this function on specific clients. Note that if you set the target as Connection, you need to pass a specific connection as a parameter of your method Inheritance Object Attribute ClientRpcAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage Assembly : Mirage.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class ClientRpcAttribute : Attribute Fields | Improve this Doc View Source channel Declaration public int channel Field Value Type Description Int32 | Improve this Doc View Source excludeOwner Declaration public bool excludeOwner Field Value Type Description Boolean | Improve this Doc View Source target Declaration public RpcTarget target Field Value Type Description RpcTarget"
  },
  "api/Mirage.ClientStoppedReason.html": {
    "href": "api/Mirage.ClientStoppedReason.html",
    "title": "Enum ClientStoppedReason",
    "keywords": "Enum ClientStoppedReason Reason why Client was stopped or disconnected Namespace : Mirage Assembly : Mirage.dll Syntax [Serializable] public enum ClientStoppedReason Remarks Use different enums than SocketLayer so that: User doesn't need to add reference to socket layer to use event; Give high level reason so that they are easierto understand by the end user. Fields Name Description ConnectingCancel Disconnect called locally before server replies with connected ConnectingTimeout Server did not reply HostModeStopped Disconnect called when server was stopped in host mode InvalidPacket Server disconnected because sent packet was not allowed by server config KeyInvalid Key given with first message did not match the value on the server, See SocketLayer Config LocalConnectionClosed Connection disconnect called locally None No reason given RemoteConnectionClosed Connection disconnect called on server ServerFull Server rejected connecting because it was full Timeout Connecting timed out Server not sending replies"
  },
  "api/Mirage.Collections.html": {
    "href": "api/Mirage.Collections.html",
    "title": "Namespace Mirage.Collections",
    "keywords": "Namespace Mirage.Collections Classes SyncDictionary<TKey, TValue> SyncHashSet<T> SyncIDictionary<TKey, TValue> SyncList<T> SyncSet<T> SyncSortedSet<T> Structs SyncList<T>.Enumerator Interfaces ISyncObject A sync object is an object that can synchronize it's state between server and client, such as a SyncList"
  },
  "api/Mirage.Collections.ISyncObject.html": {
    "href": "api/Mirage.Collections.ISyncObject.html",
    "title": "Interface ISyncObject",
    "keywords": "Interface ISyncObject A sync object is an object that can synchronize it's state between server and client, such as a SyncList Namespace : Mirage.Collections Assembly : Mirage.dll Syntax public interface ISyncObject Properties | Improve this Doc View Source IsDirty true if there are changes since the last flush Declaration bool IsDirty { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Flush() Discard all the queued changes Consider the object fully synchronized with clients Declaration void Flush() | Improve this Doc View Source OnDeserializeAll(NetworkReader) Reads a full copy of the object Declaration void OnDeserializeAll(NetworkReader reader) Parameters Type Name Description NetworkReader reader | Improve this Doc View Source OnDeserializeDelta(NetworkReader) Reads the changes made to the object since last sync Declaration void OnDeserializeDelta(NetworkReader reader) Parameters Type Name Description NetworkReader reader | Improve this Doc View Source OnSerializeAll(NetworkWriter) Write a full copy of the object Declaration void OnSerializeAll(NetworkWriter writer) Parameters Type Name Description NetworkWriter writer | Improve this Doc View Source OnSerializeDelta(NetworkWriter) Write the changes made to the object since last sync Declaration void OnSerializeDelta(NetworkWriter writer) Parameters Type Name Description NetworkWriter writer | Improve this Doc View Source Reset() Resets the SyncObject so that it can be re-used Declaration void Reset() Events | Improve this Doc View Source OnChange Raised after the list has been updated Server: This will invoke for every change Client: This will invoke after OnDeserialize Declaration event Action OnChange Event Type Type Description Action"
  },
  "api/Mirage.Collections.SyncDictionary-2.html": {
    "href": "api/Mirage.Collections.SyncDictionary-2.html",
    "title": "Class SyncDictionary<TKey, TValue>",
    "keywords": "Class SyncDictionary<TKey, TValue> Inheritance Object SyncIDictionary <TKey, TValue> SyncDictionary<TKey, TValue> Implements IDictionary <TKey, TValue> ICollection < KeyValuePair <TKey, TValue>> ISyncObject IReadOnlyDictionary <TKey, TValue> IReadOnlyCollection < KeyValuePair <TKey, TValue>> IEnumerable < KeyValuePair <TKey, TValue>> IEnumerable Inherited Members SyncIDictionary<TKey, TValue>.objects SyncIDictionary<TKey, TValue>.Count SyncIDictionary<TKey, TValue>.IsReadOnly SyncIDictionary<TKey, TValue>.OnInsert SyncIDictionary<TKey, TValue>.OnClear SyncIDictionary<TKey, TValue>.OnRemove SyncIDictionary<TKey, TValue>.OnSet SyncIDictionary<TKey, TValue>.OnChange SyncIDictionary<TKey, TValue>.Reset() SyncIDictionary<TKey, TValue>.IsDirty SyncIDictionary<TKey, TValue>.Keys SyncIDictionary<TKey, TValue>.Values SyncIDictionary<TKey, TValue>.IReadOnlyDictionary<TKey, TValue>.Keys SyncIDictionary<TKey, TValue>.IReadOnlyDictionary<TKey, TValue>.Values SyncIDictionary<TKey, TValue>.Flush() SyncIDictionary<TKey, TValue>.OnSerializeAll(NetworkWriter) SyncIDictionary<TKey, TValue>.OnSerializeDelta(NetworkWriter) SyncIDictionary<TKey, TValue>.OnDeserializeAll(NetworkReader) SyncIDictionary<TKey, TValue>.OnDeserializeDelta(NetworkReader) SyncIDictionary<TKey, TValue>.Clear() SyncIDictionary<TKey, TValue>.ContainsKey(TKey) SyncIDictionary<TKey, TValue>.Remove(TKey) SyncIDictionary<TKey, TValue>.Item[TKey] SyncIDictionary<TKey, TValue>.TryGetValue(TKey, TValue) SyncIDictionary<TKey, TValue>.Add(TKey, TValue) SyncIDictionary<TKey, TValue>.Add(KeyValuePair<TKey, TValue>) SyncIDictionary<TKey, TValue>.Contains(KeyValuePair<TKey, TValue>) SyncIDictionary<TKey, TValue>.CopyTo(KeyValuePair<TKey, TValue>[], Int32) SyncIDictionary<TKey, TValue>.Remove(KeyValuePair<TKey, TValue>) SyncIDictionary<TKey, TValue>.GetEnumerator() SyncIDictionary<TKey, TValue>.IEnumerable.GetEnumerator() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Collections Assembly : Mirage.dll Syntax public class SyncDictionary<TKey, TValue> : SyncIDictionary<TKey, TValue>, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, ISyncObject, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable Type Parameters Name Description TKey TValue Constructors | Improve this Doc View Source SyncDictionary() Declaration public SyncDictionary() | Improve this Doc View Source SyncDictionary(IEqualityComparer<TKey>) Declaration public SyncDictionary(IEqualityComparer<TKey> eq) Parameters Type Name Description IEqualityComparer <TKey> eq Properties | Improve this Doc View Source Keys Declaration public Dictionary<TKey, TValue>.KeyCollection Keys { get; } Property Value Type Description Dictionary.KeyCollection <> | Improve this Doc View Source Values Declaration public Dictionary<TKey, TValue>.ValueCollection Values { get; } Property Value Type Description Dictionary.ValueCollection <> Methods | Improve this Doc View Source GetEnumerator() Declaration public Dictionary<TKey, TValue>.Enumerator GetEnumerator() Returns Type Description Dictionary.Enumerator <> Implements System.Collections.Generic.IDictionary<TKey,TValue> System.Collections.Generic.ICollection<T> ISyncObject System.Collections.Generic.IReadOnlyDictionary<TKey,TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Mirage.Collections.SyncHashSet-1.html": {
    "href": "api/Mirage.Collections.SyncHashSet-1.html",
    "title": "Class SyncHashSet<T>",
    "keywords": "Class SyncHashSet<T> Inheritance Object SyncSet <T> SyncHashSet<T> Implements ISet <T> ICollection <T> IEnumerable <T> IEnumerable ISyncObject Inherited Members SyncSet<T>.objects SyncSet<T>.Count SyncSet<T>.IsReadOnly SyncSet<T>.OnAdd SyncSet<T>.OnClear SyncSet<T>.OnRemove SyncSet<T>.OnChange SyncSet<T>.Reset() SyncSet<T>.IsDirty SyncSet<T>.Flush() SyncSet<T>.OnSerializeAll(NetworkWriter) SyncSet<T>.OnSerializeDelta(NetworkWriter) SyncSet<T>.OnDeserializeAll(NetworkReader) SyncSet<T>.OnDeserializeDelta(NetworkReader) SyncSet<T>.Add(T) SyncSet<T>.ICollection<T>.Add(T) SyncSet<T>.Clear() SyncSet<T>.Contains(T) SyncSet<T>.CopyTo(T[], Int32) SyncSet<T>.Remove(T) SyncSet<T>.IEnumerable.GetEnumerator() SyncSet<T>.ExceptWith(IEnumerable<T>) SyncSet<T>.IntersectWith(IEnumerable<T>) SyncSet<T>.IsProperSubsetOf(IEnumerable<T>) SyncSet<T>.IsProperSupersetOf(IEnumerable<T>) SyncSet<T>.IsSubsetOf(IEnumerable<T>) SyncSet<T>.IsSupersetOf(IEnumerable<T>) SyncSet<T>.Overlaps(IEnumerable<T>) SyncSet<T>.SetEquals(IEnumerable<T>) SyncSet<T>.SymmetricExceptWith(IEnumerable<T>) SyncSet<T>.UnionWith(IEnumerable<T>) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Collections Assembly : Mirage.dll Syntax public class SyncHashSet<T> : SyncSet<T>, ISet<T>, ICollection<T>, IEnumerable<T>, IEnumerable, ISyncObject Type Parameters Name Description T Constructors | Improve this Doc View Source SyncHashSet() Declaration public SyncHashSet() | Improve this Doc View Source SyncHashSet(IEqualityComparer<T>) Declaration public SyncHashSet(IEqualityComparer<T> comparer) Parameters Type Name Description IEqualityComparer <T> comparer Methods | Improve this Doc View Source GetEnumerator() Declaration public HashSet<T>.Enumerator GetEnumerator() Returns Type Description HashSet.Enumerator <> Implements System.Collections.Generic.ISet<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable ISyncObject"
  },
  "api/Mirage.Collections.SyncIDictionary-2.html": {
    "href": "api/Mirage.Collections.SyncIDictionary-2.html",
    "title": "Class SyncIDictionary<TKey, TValue>",
    "keywords": "Class SyncIDictionary<TKey, TValue> Inheritance Object SyncIDictionary<TKey, TValue> SyncDictionary<TKey, TValue> Implements IDictionary <TKey, TValue> ICollection < KeyValuePair <TKey, TValue>> ISyncObject IReadOnlyDictionary <TKey, TValue> IReadOnlyCollection < KeyValuePair <TKey, TValue>> IEnumerable < KeyValuePair <TKey, TValue>> IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Collections Assembly : Mirage.dll Syntax public class SyncIDictionary<TKey, TValue> : IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, ISyncObject, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable Type Parameters Name Description TKey TValue Constructors | Improve this Doc View Source SyncIDictionary(IDictionary<TKey, TValue>) Declaration public SyncIDictionary(IDictionary<TKey, TValue> objects) Parameters Type Name Description IDictionary <TKey, TValue> objects Fields | Improve this Doc View Source objects Declaration protected readonly IDictionary<TKey, TValue> objects Field Value Type Description IDictionary <TKey, TValue> Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source IsDirty Declaration public bool IsDirty { get; } Property Value Type Description Boolean | Improve this Doc View Source IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean | Improve this Doc View Source Item[TKey] Declaration public TValue this[TKey i] { get; set; } Parameters Type Name Description TKey i Property Value Type Description TValue | Improve this Doc View Source Keys Declaration public ICollection<TKey> Keys { get; } Property Value Type Description ICollection <TKey> | Improve this Doc View Source Values Declaration public ICollection<TValue> Values { get; } Property Value Type Description ICollection <TValue> Methods | Improve this Doc View Source Add(TKey, TValue) Declaration public void Add(TKey key, TValue value) Parameters Type Name Description TKey key TValue value | Improve this Doc View Source Add(KeyValuePair<TKey, TValue>) Declaration public void Add(KeyValuePair<TKey, TValue> item) Parameters Type Name Description KeyValuePair <TKey, TValue> item | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Contains(KeyValuePair<TKey, TValue>) Declaration public bool Contains(KeyValuePair<TKey, TValue> item) Parameters Type Name Description KeyValuePair <TKey, TValue> item Returns Type Description Boolean | Improve this Doc View Source ContainsKey(TKey) Declaration public bool ContainsKey(TKey key) Parameters Type Name Description TKey key Returns Type Description Boolean | Improve this Doc View Source CopyTo(KeyValuePair<TKey, TValue>[], Int32) Declaration public void CopyTo([NotNull] KeyValuePair<TKey, TValue>[] array, int arrayIndex) Parameters Type Name Description KeyValuePair <TKey, TValue>[] array Int32 arrayIndex | Improve this Doc View Source Flush() Declaration public void Flush() | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator() Returns Type Description IEnumerator < KeyValuePair <TKey, TValue>> | Improve this Doc View Source OnDeserializeAll(NetworkReader) Declaration public void OnDeserializeAll(NetworkReader reader) Parameters Type Name Description NetworkReader reader | Improve this Doc View Source OnDeserializeDelta(NetworkReader) Declaration public void OnDeserializeDelta(NetworkReader reader) Parameters Type Name Description NetworkReader reader | Improve this Doc View Source OnSerializeAll(NetworkWriter) Declaration public void OnSerializeAll(NetworkWriter writer) Parameters Type Name Description NetworkWriter writer | Improve this Doc View Source OnSerializeDelta(NetworkWriter) Declaration public void OnSerializeDelta(NetworkWriter writer) Parameters Type Name Description NetworkWriter writer | Improve this Doc View Source Remove(TKey) Declaration public bool Remove(TKey key) Parameters Type Name Description TKey key Returns Type Description Boolean | Improve this Doc View Source Remove(KeyValuePair<TKey, TValue>) Declaration public bool Remove(KeyValuePair<TKey, TValue> item) Parameters Type Name Description KeyValuePair <TKey, TValue> item Returns Type Description Boolean | Improve this Doc View Source Reset() Declaration public void Reset() | Improve this Doc View Source TryGetValue(TKey, out TValue) Declaration public bool TryGetValue(TKey key, out TValue value) Parameters Type Name Description TKey key TValue value Returns Type Description Boolean Events | Improve this Doc View Source OnChange Raised after the dictionary has been updated Note that if there are multiple changes this event is only raised once. Declaration public event Action OnChange Event Type Type Description Action | Improve this Doc View Source OnClear Raised when the dictionary is cleared Declaration public event Action OnClear Event Type Type Description Action | Improve this Doc View Source OnInsert Raised when an element is added to the dictionary. Receives the key and value of the new item Declaration public event Action<TKey, TValue> OnInsert Event Type Type Description Action <TKey, TValue> | Improve this Doc View Source OnRemove Raised when an item is removed from the dictionary receives the key and value of the old item Declaration public event Action<TKey, TValue> OnRemove Event Type Type Description Action <TKey, TValue> | Improve this Doc View Source OnSet Raised when an item is changed in a dictionary Receives key, the old value and the new value Declaration public event Action<TKey, TValue, TValue> OnSet Event Type Type Description Action <TKey, TValue, TValue> Explicit Interface Implementations | Improve this Doc View Source IReadOnlyDictionary<TKey, TValue>.Keys Declaration IEnumerable<TKey> IReadOnlyDictionary<TKey, TValue>.Keys { get; } Returns Type Description IEnumerable <TKey> | Improve this Doc View Source IReadOnlyDictionary<TKey, TValue>.Values Declaration IEnumerable<TValue> IReadOnlyDictionary<TKey, TValue>.Values { get; } Returns Type Description IEnumerable <TValue> | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IDictionary<TKey,TValue> System.Collections.Generic.ICollection<T> ISyncObject System.Collections.Generic.IReadOnlyDictionary<TKey,TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Mirage.Collections.SyncList-1.Enumerator.html": {
    "href": "api/Mirage.Collections.SyncList-1.Enumerator.html",
    "title": "Struct SyncList<T>.Enumerator",
    "keywords": "Struct SyncList<T>.Enumerator Implements IEnumerator <T> IEnumerator IDisposable Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Mirage.Collections Assembly : Mirage.dll Syntax public struct Enumerator : IEnumerator<T>, IEnumerator, IDisposable Constructors | Improve this Doc View Source Enumerator(SyncList<T>) Declaration public Enumerator(SyncList<T> list) Parameters Type Name Description SyncList <T> list Properties | Improve this Doc View Source Current Declaration public T Current { get; } Property Value Type Description T Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source MoveNext() Declaration public bool MoveNext() Returns Type Description Boolean | Improve this Doc View Source Reset() Declaration public void Reset() Explicit Interface Implementations | Improve this Doc View Source IEnumerator.Current Declaration object IEnumerator.Current { get; } Returns Type Description Object Implements System.Collections.Generic.IEnumerator<T> System.Collections.IEnumerator System.IDisposable"
  },
  "api/Mirage.Collections.SyncList-1.html": {
    "href": "api/Mirage.Collections.SyncList-1.html",
    "title": "Class SyncList<T>",
    "keywords": "Class SyncList<T> Inheritance Object SyncList<T> Implements IList <T> ICollection <T> IReadOnlyList <T> IReadOnlyCollection <T> IEnumerable <T> IEnumerable ISyncObject Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Collections Assembly : Mirage.dll Syntax public class SyncList<T> : IList<T>, ICollection<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable, ISyncObject Type Parameters Name Description T Constructors | Improve this Doc View Source SyncList() Declaration public SyncList() | Improve this Doc View Source SyncList(IEqualityComparer<T>) Declaration public SyncList(IEqualityComparer<T> comparer) Parameters Type Name Description IEqualityComparer <T> comparer | Improve this Doc View Source SyncList(IList<T>, IEqualityComparer<T>) Declaration public SyncList(IList<T> objects, IEqualityComparer<T> comparer = null) Parameters Type Name Description IList <T> objects IEqualityComparer <T> comparer Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source IsDirty Declaration public bool IsDirty { get; } Property Value Type Description Boolean | Improve this Doc View Source IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean | Improve this Doc View Source Item[Int32] Declaration public T this[int i] { get; set; } Parameters Type Name Description Int32 i Property Value Type Description T Methods | Improve this Doc View Source Add(T) Declaration public void Add(T item) Parameters Type Name Description T item | Improve this Doc View Source AddRange(IEnumerable<T>) Declaration public void AddRange(IEnumerable<T> range) Parameters Type Name Description IEnumerable <T> range | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Contains(T) Declaration public bool Contains(T item) Parameters Type Name Description T item Returns Type Description Boolean | Improve this Doc View Source CopyTo(T[], Int32) Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array Int32 arrayIndex | Improve this Doc View Source Find(Predicate<T>) Declaration public T Find(Predicate<T> match) Parameters Type Name Description Predicate <T> match Returns Type Description T | Improve this Doc View Source FindAll(Predicate<T>) Declaration public List<T> FindAll(Predicate<T> match) Parameters Type Name Description Predicate <T> match Returns Type Description List <T> | Improve this Doc View Source FindIndex(Predicate<T>) Declaration public int FindIndex(Predicate<T> match) Parameters Type Name Description Predicate <T> match Returns Type Description Int32 | Improve this Doc View Source Flush() Declaration public void Flush() | Improve this Doc View Source GetEnumerator() Declaration public SyncList<T>.Enumerator GetEnumerator() Returns Type Description SyncList.Enumerator <> | Improve this Doc View Source IndexOf(T) Declaration public int IndexOf(T item) Parameters Type Name Description T item Returns Type Description Int32 | Improve this Doc View Source Insert(Int32, T) Declaration public void Insert(int index, T item) Parameters Type Name Description Int32 index T item | Improve this Doc View Source InsertRange(Int32, IEnumerable<T>) Declaration public void InsertRange(int index, IEnumerable<T> range) Parameters Type Name Description Int32 index IEnumerable <T> range | Improve this Doc View Source OnDeserializeAll(NetworkReader) Declaration public void OnDeserializeAll(NetworkReader reader) Parameters Type Name Description NetworkReader reader | Improve this Doc View Source OnDeserializeDelta(NetworkReader) Declaration public void OnDeserializeDelta(NetworkReader reader) Parameters Type Name Description NetworkReader reader | Improve this Doc View Source OnSerializeAll(NetworkWriter) Declaration public void OnSerializeAll(NetworkWriter writer) Parameters Type Name Description NetworkWriter writer | Improve this Doc View Source OnSerializeDelta(NetworkWriter) Declaration public void OnSerializeDelta(NetworkWriter writer) Parameters Type Name Description NetworkWriter writer | Improve this Doc View Source Remove(T) Declaration public bool Remove(T item) Parameters Type Name Description T item Returns Type Description Boolean | Improve this Doc View Source RemoveAll(Predicate<T>) Declaration public int RemoveAll(Predicate<T> match) Parameters Type Name Description Predicate <T> match Returns Type Description Int32 | Improve this Doc View Source RemoveAt(Int32) Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index | Improve this Doc View Source Reset() Declaration public void Reset() Events | Improve this Doc View Source OnChange Raised after the list has been updated Note that if there are multiple changes this event is only raised once. Declaration public event Action OnChange Event Type Type Description Action | Improve this Doc View Source OnClear Raised when the list is cleared Declaration public event Action OnClear Event Type Type Description Action | Improve this Doc View Source OnInsert Raised when an element is added to the list. Receives index and new item Declaration public event Action<int, T> OnInsert Event Type Type Description Action < Int32 , T> | Improve this Doc View Source OnRemove Raised when an item is removed from the list receives the index and the old item Declaration public event Action<int, T> OnRemove Event Type Type Description Action < Int32 , T> | Improve this Doc View Source OnSet Raised when an item is changed in a list Receives index, old item and new item Declaration public event Action<int, T, T> OnSet Event Type Type Description Action < Int32 , T, T> Explicit Interface Implementations | Improve this Doc View Source IEnumerable<T>.GetEnumerator() Declaration IEnumerator<T> IEnumerable<T>.GetEnumerator() Returns Type Description IEnumerator <T> | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable ISyncObject"
  },
  "api/Mirage.Collections.SyncSet-1.html": {
    "href": "api/Mirage.Collections.SyncSet-1.html",
    "title": "Class SyncSet<T>",
    "keywords": "Class SyncSet<T> Inheritance Object SyncSet<T> SyncHashSet<T> SyncSortedSet<T> Implements ISet <T> ICollection <T> IEnumerable <T> IEnumerable ISyncObject Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Collections Assembly : Mirage.dll Syntax public class SyncSet<T> : ISet<T>, ICollection<T>, IEnumerable<T>, IEnumerable, ISyncObject Type Parameters Name Description T Constructors | Improve this Doc View Source SyncSet(ISet<T>) Declaration public SyncSet(ISet<T> objects) Parameters Type Name Description ISet <T> objects Fields | Improve this Doc View Source objects Declaration protected readonly ISet<T> objects Field Value Type Description ISet <T> Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source IsDirty Declaration public bool IsDirty { get; } Property Value Type Description Boolean | Improve this Doc View Source IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Add(T) Declaration public bool Add(T item) Parameters Type Name Description T item Returns Type Description Boolean | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Contains(T) Declaration public bool Contains(T item) Parameters Type Name Description T item Returns Type Description Boolean | Improve this Doc View Source CopyTo(T[], Int32) Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array Int32 arrayIndex | Improve this Doc View Source ExceptWith(IEnumerable<T>) Declaration public void ExceptWith(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other | Improve this Doc View Source Flush() Declaration public void Flush() | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> | Improve this Doc View Source IntersectWith(IEnumerable<T>) Declaration public void IntersectWith(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other | Improve this Doc View Source IsProperSubsetOf(IEnumerable<T>) Declaration public bool IsProperSubsetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other Returns Type Description Boolean | Improve this Doc View Source IsProperSupersetOf(IEnumerable<T>) Declaration public bool IsProperSupersetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other Returns Type Description Boolean | Improve this Doc View Source IsSubsetOf(IEnumerable<T>) Declaration public bool IsSubsetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other Returns Type Description Boolean | Improve this Doc View Source IsSupersetOf(IEnumerable<T>) Declaration public bool IsSupersetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other Returns Type Description Boolean | Improve this Doc View Source OnDeserializeAll(NetworkReader) Declaration public void OnDeserializeAll(NetworkReader reader) Parameters Type Name Description NetworkReader reader | Improve this Doc View Source OnDeserializeDelta(NetworkReader) Declaration public void OnDeserializeDelta(NetworkReader reader) Parameters Type Name Description NetworkReader reader | Improve this Doc View Source OnSerializeAll(NetworkWriter) Declaration public void OnSerializeAll(NetworkWriter writer) Parameters Type Name Description NetworkWriter writer | Improve this Doc View Source OnSerializeDelta(NetworkWriter) Declaration public void OnSerializeDelta(NetworkWriter writer) Parameters Type Name Description NetworkWriter writer | Improve this Doc View Source Overlaps(IEnumerable<T>) Declaration public bool Overlaps(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other Returns Type Description Boolean | Improve this Doc View Source Remove(T) Declaration public bool Remove(T item) Parameters Type Name Description T item Returns Type Description Boolean | Improve this Doc View Source Reset() Declaration public void Reset() | Improve this Doc View Source SetEquals(IEnumerable<T>) Declaration public bool SetEquals(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other Returns Type Description Boolean | Improve this Doc View Source SymmetricExceptWith(IEnumerable<T>) Declaration public void SymmetricExceptWith(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other | Improve this Doc View Source UnionWith(IEnumerable<T>) Declaration public void UnionWith(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other Events | Improve this Doc View Source OnAdd Raised when an element is added to the list. Receives the new item Declaration public event Action<T> OnAdd Event Type Type Description Action <T> | Improve this Doc View Source OnChange Raised after the set has been updated Note that if there are multiple changes this event is only raised once. Declaration public event Action OnChange Event Type Type Description Action | Improve this Doc View Source OnClear Raised when the set is cleared Declaration public event Action OnClear Event Type Type Description Action | Improve this Doc View Source OnRemove Raised when an item is removed from the set receives the old item Declaration public event Action<T> OnRemove Event Type Type Description Action <T> Explicit Interface Implementations | Improve this Doc View Source ICollection<T>.Add(T) Declaration void ICollection<T>.Add(T item) Parameters Type Name Description T item | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.ISet<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable ISyncObject"
  },
  "api/Mirage.Collections.SyncSortedSet-1.html": {
    "href": "api/Mirage.Collections.SyncSortedSet-1.html",
    "title": "Class SyncSortedSet<T>",
    "keywords": "Class SyncSortedSet<T> Inheritance Object SyncSet <T> SyncSortedSet<T> Implements ISet <T> ICollection <T> IEnumerable <T> IEnumerable ISyncObject Inherited Members SyncSet<T>.objects SyncSet<T>.Count SyncSet<T>.IsReadOnly SyncSet<T>.OnAdd SyncSet<T>.OnClear SyncSet<T>.OnRemove SyncSet<T>.OnChange SyncSet<T>.Reset() SyncSet<T>.IsDirty SyncSet<T>.Flush() SyncSet<T>.OnSerializeAll(NetworkWriter) SyncSet<T>.OnSerializeDelta(NetworkWriter) SyncSet<T>.OnDeserializeAll(NetworkReader) SyncSet<T>.OnDeserializeDelta(NetworkReader) SyncSet<T>.Add(T) SyncSet<T>.ICollection<T>.Add(T) SyncSet<T>.Clear() SyncSet<T>.Contains(T) SyncSet<T>.CopyTo(T[], Int32) SyncSet<T>.Remove(T) SyncSet<T>.IEnumerable.GetEnumerator() SyncSet<T>.ExceptWith(IEnumerable<T>) SyncSet<T>.IntersectWith(IEnumerable<T>) SyncSet<T>.IsProperSubsetOf(IEnumerable<T>) SyncSet<T>.IsProperSupersetOf(IEnumerable<T>) SyncSet<T>.IsSubsetOf(IEnumerable<T>) SyncSet<T>.IsSupersetOf(IEnumerable<T>) SyncSet<T>.Overlaps(IEnumerable<T>) SyncSet<T>.SetEquals(IEnumerable<T>) SyncSet<T>.SymmetricExceptWith(IEnumerable<T>) SyncSet<T>.UnionWith(IEnumerable<T>) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Collections Assembly : Mirage.dll Syntax public class SyncSortedSet<T> : SyncSet<T>, ISet<T>, ICollection<T>, IEnumerable<T>, IEnumerable, ISyncObject Type Parameters Name Description T Constructors | Improve this Doc View Source SyncSortedSet() Declaration public SyncSortedSet() | Improve this Doc View Source SyncSortedSet(IComparer<T>) Declaration public SyncSortedSet(IComparer<T> comparer) Parameters Type Name Description IComparer <T> comparer Methods | Improve this Doc View Source GetEnumerator() Declaration public SortedSet<T>.Enumerator GetEnumerator() Returns Type Description SortedSet.Enumerator <> Implements System.Collections.Generic.ISet<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable ISyncObject"
  },
  "api/Mirage.ConnectState.html": {
    "href": "api/Mirage.ConnectState.html",
    "title": "Enum ConnectState",
    "keywords": "Enum ConnectState Namespace : Mirage Assembly : Mirage.dll Syntax public enum ConnectState Fields Name Description Connected Connecting Disconnected"
  },
  "api/Mirage.DeserializeFailedException.html": {
    "href": "api/Mirage.DeserializeFailedException.html",
    "title": "Class DeserializeFailedException",
    "keywords": "Class DeserializeFailedException Inheritance Object Exception DeserializeFailedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax [Serializable] public class DeserializeFailedException : Exception, ISerializable Constructors | Improve this Doc View Source DeserializeFailedException(SerializationInfo, StreamingContext) Declaration protected DeserializeFailedException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context | Improve this Doc View Source DeserializeFailedException(String) Declaration public DeserializeFailedException(string message) Parameters Type Name Description String message Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Mirage.DisplayMetrics.DisplayMetricsAverageGui.html": {
    "href": "api/Mirage.DisplayMetrics.DisplayMetricsAverageGui.html",
    "title": "Class DisplayMetricsAverageGui",
    "keywords": "Class DisplayMetricsAverageGui This is an example of how to show metrics, It only shows some of the values inside Metrics If you want to show more of the values then create a copy of this class and add values to DrawAverage Inheritance Object Object Component Behaviour MonoBehaviour DisplayMetricsAverageGui Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage.DisplayMetrics Assembly : Mirage.Components.dll Syntax public class DisplayMetricsAverageGui : MonoBehaviour Fields | Improve this Doc View Source background Declaration public Color background Field Value Type Description Color | Improve this Doc View Source offset Declaration public Rect offset Field Value Type Description Rect Properties | Improve this Doc View Source Metrics Declaration public Metrics Metrics { get; set; } Property Value Type Description Metrics"
  },
  "api/Mirage.DisplayMetrics.html": {
    "href": "api/Mirage.DisplayMetrics.html",
    "title": "Namespace Mirage.DisplayMetrics",
    "keywords": "Namespace Mirage.DisplayMetrics Classes DisplayMetricsAverageGui This is an example of how to show metrics, It only shows some of the values inside Metrics If you want to show more of the values then create a copy of this class and add values to DrawAverage RequestServerMetrics SetDisplayMetrics"
  },
  "api/Mirage.DisplayMetrics.RequestServerMetrics.html": {
    "href": "api/Mirage.DisplayMetrics.RequestServerMetrics.html",
    "title": "Class RequestServerMetrics",
    "keywords": "Class RequestServerMetrics Inheritance Object Object Component Behaviour MonoBehaviour RequestServerMetrics Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage.DisplayMetrics Assembly : Mirage.Components.dll Syntax public class RequestServerMetrics : MonoBehaviour Fields | Improve this Doc View Source client Declaration public NetworkClient client Field Value Type Description NetworkClient | Improve this Doc View Source displayMetrics Declaration public DisplayMetricsAverageGui displayMetrics Field Value Type Description DisplayMetricsAverageGui | Improve this Doc View Source RequestMetrics Declaration public bool RequestMetrics Field Value Type Description Boolean | Improve this Doc View Source server Declaration public NetworkServer server Field Value Type Description NetworkServer Methods | Improve this Doc View Source Runner() Declaration public IEnumerator Runner() Returns Type Description IEnumerator"
  },
  "api/Mirage.DisplayMetrics.SetDisplayMetrics.html": {
    "href": "api/Mirage.DisplayMetrics.SetDisplayMetrics.html",
    "title": "Class SetDisplayMetrics",
    "keywords": "Class SetDisplayMetrics Inheritance Object Object Component Behaviour MonoBehaviour SetDisplayMetrics Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage.DisplayMetrics Assembly : Mirage.Components.dll Syntax public class SetDisplayMetrics : MonoBehaviour Fields | Improve this Doc View Source client Declaration public NetworkClient client Field Value Type Description NetworkClient | Improve this Doc View Source displayMetrics Declaration public DisplayMetricsAverageGui displayMetrics Field Value Type Description DisplayMetricsAverageGui | Improve this Doc View Source server Declaration public NetworkServer server Field Value Type Description NetworkServer"
  },
  "api/Mirage.Events.AddLateEvent.html": {
    "href": "api/Mirage.Events.AddLateEvent.html",
    "title": "Class AddLateEvent",
    "keywords": "Class AddLateEvent An event that will invoke handlers immediately if they are added after Invoke() has been called Inheritance Object AddLateEventBase AddLateEvent Implements IAddLateEvent Inherited Members AddLateEventBase.hasInvoked AddLateEventBase.MarkInvoked() AddLateEventBase.Reset() AddLateEventBase.RemoveAllListeners() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Events Assembly : Mirage.dll Syntax [Serializable] public sealed class AddLateEvent : AddLateEventBase, IAddLateEvent Remarks AddLateEvent should be used for time sensitive events where Invoke might be called before the user has chance to add a handler. For example Server Started event. Events that are invoked multiple times, like AuthorityChanged, will have the most recent Invoke() argument sent to new handler. Examples This Example shows uses of Event public class Server : MonoBehaviour { // shows in inspector [SerializeField] private AddLateEvent _started; // expose interface so others can add handlers, but does not let them invoke public IAddLateEvent Started => customEvent; public void StartServer() { // ... // invoke using field _started.Invoke(); } public void StopServer() { // ... // reset event, resets the hasInvoked flag _started.Reset(); } } This is an example to show how to create events with arguments: // Serializable so that it can be used in inspector [Serializable] public class IntUnityEvent : UnityEvent<int> { } [Serializable] public class IntAddLateEvent : AddLateEvent<int, IntUnityEvent> { } public class MyClass : MonoBehaviour { [SerializeField] private IntAddLateEvent customEvent; public IAddLateEvent<int> CustomEvent => customEvent; } Properties | Improve this Doc View Source baseEvent Declaration protected override UnityEventBase baseEvent { get; } Property Value Type Description UnityEventBase Overrides AddLateEventBase.baseEvent Methods | Improve this Doc View Source AddListener(UnityAction) Declaration public void AddListener(UnityAction handler) Parameters Type Name Description UnityAction handler | Improve this Doc View Source Invoke() Declaration public void Invoke() | Improve this Doc View Source RemoveListener(UnityAction) Declaration public void RemoveListener(UnityAction handler) Parameters Type Name Description UnityAction handler Implements IAddLateEvent"
  },
  "api/Mirage.Events.AddLateEvent-2.html": {
    "href": "api/Mirage.Events.AddLateEvent-2.html",
    "title": "Class AddLateEvent<T0, TEvent>",
    "keywords": "Class AddLateEvent<T0, TEvent> Version of AddLateEvent with 1 argument Create a non-generic class inheriting from this to use in inspector. Same rules as UnityEvent Inheritance Object AddLateEventBase AddLateEvent<T0, TEvent> BoolAddLateEvent DisconnectAddLateEvent NetworkPlayerAddLateEvent Implements IAddLateEvent <T0> Inherited Members AddLateEventBase.hasInvoked AddLateEventBase.MarkInvoked() AddLateEventBase.Reset() AddLateEventBase.RemoveAllListeners() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Events Assembly : Mirage.dll Syntax [Serializable] public abstract class AddLateEvent<T0, TEvent> : AddLateEventBase, IAddLateEvent<T0> where TEvent : UnityEvent<T0>, new() Type Parameters Name Description T0 argument 0 TEvent UnityEvent Properties | Improve this Doc View Source baseEvent Declaration protected override UnityEventBase baseEvent { get; } Property Value Type Description UnityEventBase Overrides AddLateEventBase.baseEvent Methods | Improve this Doc View Source AddListener(UnityAction<T0>) Declaration public void AddListener(UnityAction<T0> handler) Parameters Type Name Description UnityAction <T0> handler | Improve this Doc View Source Invoke(T0) Declaration public void Invoke(T0 arg0) Parameters Type Name Description T0 arg0 | Improve this Doc View Source RemoveListener(UnityAction<T0>) Declaration public void RemoveListener(UnityAction<T0> handler) Parameters Type Name Description UnityAction <T0> handler Implements IAddLateEvent<T0>"
  },
  "api/Mirage.Events.AddLateEvent-3.html": {
    "href": "api/Mirage.Events.AddLateEvent-3.html",
    "title": "Class AddLateEvent<T0, T1, TEvent>",
    "keywords": "Class AddLateEvent<T0, T1, TEvent> Version of AddLateEvent with 2 arguments Create a non-generic class inheriting from this to use in inspector. Same rules as UnityEvent Inheritance Object AddLateEventBase AddLateEvent<T0, T1, TEvent> Implements IAddLateEvent <T0, T1> Inherited Members AddLateEventBase.hasInvoked AddLateEventBase.MarkInvoked() AddLateEventBase.Reset() AddLateEventBase.RemoveAllListeners() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Events Assembly : Mirage.dll Syntax [Serializable] public abstract class AddLateEvent<T0, T1, TEvent> : AddLateEventBase, IAddLateEvent<T0, T1> where TEvent : UnityEvent<T0, T1>, new() Type Parameters Name Description T0 T1 TEvent Properties | Improve this Doc View Source baseEvent Declaration protected override UnityEventBase baseEvent { get; } Property Value Type Description UnityEventBase Overrides AddLateEventBase.baseEvent Methods | Improve this Doc View Source AddListener(UnityAction<T0, T1>) Declaration public void AddListener(UnityAction<T0, T1> handler) Parameters Type Name Description UnityAction <T0, T1> handler | Improve this Doc View Source Invoke(T0, T1) Declaration public void Invoke(T0 arg0, T1 arg1) Parameters Type Name Description T0 arg0 T1 arg1 | Improve this Doc View Source RemoveListener(UnityAction<T0, T1>) Declaration public void RemoveListener(UnityAction<T0, T1> handler) Parameters Type Name Description UnityAction <T0, T1> handler Implements IAddLateEvent<T0, T1>"
  },
  "api/Mirage.Events.AddLateEventBase.html": {
    "href": "api/Mirage.Events.AddLateEventBase.html",
    "title": "Class AddLateEventBase",
    "keywords": "Class AddLateEventBase Inheritance Object AddLateEventBase AddLateEvent AddLateEvent<T0, TEvent> AddLateEvent<T0, T1, TEvent> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Events Assembly : Mirage.dll Syntax public abstract class AddLateEventBase Properties | Improve this Doc View Source baseEvent Declaration protected abstract UnityEventBase baseEvent { get; } Property Value Type Description UnityEventBase | Improve this Doc View Source hasInvoked Declaration protected bool hasInvoked { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source MarkInvoked() Declaration protected void MarkInvoked() | Improve this Doc View Source RemoveAllListeners() Remove all non-persisent (ie created from script) listeners from the event. Declaration public void RemoveAllListeners() | Improve this Doc View Source Reset() Resets invoked flag, meaning new handles wont be invoked untill invoke is called again Reset does not remove listeners Declaration public void Reset()"
  },
  "api/Mirage.Events.BoolAddLateEvent.html": {
    "href": "api/Mirage.Events.BoolAddLateEvent.html",
    "title": "Class BoolAddLateEvent",
    "keywords": "Class BoolAddLateEvent Inheritance Object AddLateEventBase AddLateEvent < Boolean , BoolUnityEvent > BoolAddLateEvent Implements IAddLateEvent < Boolean > Inherited Members AddLateEvent<Boolean, BoolUnityEvent>.baseEvent AddLateEvent<Boolean, BoolUnityEvent>.AddListener(UnityAction<Boolean>) AddLateEvent<Boolean, BoolUnityEvent>.RemoveListener(UnityAction<Boolean>) AddLateEvent<Boolean, BoolUnityEvent>.Invoke(Boolean) AddLateEventBase.baseEvent AddLateEventBase.hasInvoked AddLateEventBase.MarkInvoked() AddLateEventBase.Reset() AddLateEventBase.RemoveAllListeners() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Events Assembly : Mirage.dll Syntax [Serializable] public class BoolAddLateEvent : AddLateEvent<bool, BoolUnityEvent>, IAddLateEvent<bool> Implements IAddLateEvent<T0>"
  },
  "api/Mirage.Events.BoolUnityEvent.html": {
    "href": "api/Mirage.Events.BoolUnityEvent.html",
    "title": "Class BoolUnityEvent",
    "keywords": "Class BoolUnityEvent Inheritance Object UnityEventBase UnityEvent < Boolean > BoolUnityEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<Boolean>.AddListener(UnityAction<Boolean>) UnityEvent<Boolean>.RemoveListener(UnityAction<Boolean>) UnityEngine.Events.UnityEvent<System.Boolean>.FindMethod_Impl(System.String, System.Type) UnityEvent<Boolean>.Invoke(Boolean) UnityEventBase.ISerializationCallbackReceiver.OnBeforeSerialize() UnityEventBase.ISerializationCallbackReceiver.OnAfterDeserialize() UnityEventBase.FindMethod_Impl(String, Object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(Int32) UnityEventBase.GetPersistentMethodName(Int32) UnityEventBase.SetPersistentListenerState(Int32, UnityEventCallState) UnityEventBase.AddListener(Object, MethodInfo) UnityEventBase.RemoveListener(Object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(Object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(Object, String, Type[]) UnityEngine.Events.UnityEventBase.GetValidMethodInfo(System.Type, System.String, System.Type[]) UnityEventBase.ValidateRegistration(MethodInfo, Object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, Object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(Int32, Object, MethodInfo) UnityEngine.Events.UnityEventBase.RegisterPersistentListener(System.Int32, System.Object, System.Type, System.Reflection.MethodInfo) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage.Events Assembly : Mirage.dll Syntax [Serializable] public class BoolUnityEvent : UnityEvent<bool>, ISerializationCallbackReceiver Implements ISerializationCallbackReceiver"
  },
  "api/Mirage.Events.DisconnectAddLateEvent.html": {
    "href": "api/Mirage.Events.DisconnectAddLateEvent.html",
    "title": "Class DisconnectAddLateEvent",
    "keywords": "Class DisconnectAddLateEvent Event fires from a NetworkClient when it fails to connect to the server Inheritance Object AddLateEventBase AddLateEvent < ClientStoppedReason , DisconnectEvent > DisconnectAddLateEvent Implements IAddLateEvent < ClientStoppedReason > Inherited Members AddLateEvent<ClientStoppedReason, DisconnectEvent>.baseEvent AddLateEvent<ClientStoppedReason, DisconnectEvent>.AddListener(UnityAction<ClientStoppedReason>) AddLateEvent<ClientStoppedReason, DisconnectEvent>.RemoveListener(UnityAction<ClientStoppedReason>) AddLateEvent<ClientStoppedReason, DisconnectEvent>.Invoke(ClientStoppedReason) AddLateEventBase.baseEvent AddLateEventBase.hasInvoked AddLateEventBase.MarkInvoked() AddLateEventBase.Reset() AddLateEventBase.RemoveAllListeners() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Events Assembly : Mirage.dll Syntax [Serializable] public class DisconnectAddLateEvent : AddLateEvent<ClientStoppedReason, DisconnectEvent>, IAddLateEvent<ClientStoppedReason> Implements IAddLateEvent<T0>"
  },
  "api/Mirage.Events.DisconnectEvent.html": {
    "href": "api/Mirage.Events.DisconnectEvent.html",
    "title": "Class DisconnectEvent",
    "keywords": "Class DisconnectEvent Inheritance Object UnityEventBase UnityEvent < ClientStoppedReason > DisconnectEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<ClientStoppedReason>.AddListener(UnityAction<ClientStoppedReason>) UnityEvent<ClientStoppedReason>.RemoveListener(UnityAction<ClientStoppedReason>) UnityEngine.Events.UnityEvent<Mirage.ClientStoppedReason>.FindMethod_Impl(System.String, System.Type) UnityEvent<ClientStoppedReason>.Invoke(ClientStoppedReason) UnityEventBase.ISerializationCallbackReceiver.OnBeforeSerialize() UnityEventBase.ISerializationCallbackReceiver.OnAfterDeserialize() UnityEventBase.FindMethod_Impl(String, Object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(Int32) UnityEventBase.GetPersistentMethodName(Int32) UnityEventBase.SetPersistentListenerState(Int32, UnityEventCallState) UnityEventBase.AddListener(Object, MethodInfo) UnityEventBase.RemoveListener(Object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(Object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(Object, String, Type[]) UnityEngine.Events.UnityEventBase.GetValidMethodInfo(System.Type, System.String, System.Type[]) UnityEventBase.ValidateRegistration(MethodInfo, Object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, Object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(Int32, Object, MethodInfo) UnityEngine.Events.UnityEventBase.RegisterPersistentListener(System.Int32, System.Object, System.Type, System.Reflection.MethodInfo) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage.Events Assembly : Mirage.dll Syntax [Serializable] public class DisconnectEvent : UnityEvent<ClientStoppedReason>, ISerializationCallbackReceiver Implements ISerializationCallbackReceiver"
  },
  "api/Mirage.Events.html": {
    "href": "api/Mirage.Events.html",
    "title": "Namespace Mirage.Events",
    "keywords": "Namespace Mirage.Events Classes AddLateEvent An event that will invoke handlers immediately if they are added after Invoke() has been called AddLateEvent<T0, TEvent> Version of AddLateEvent with 1 argument Create a non-generic class inheriting from this to use in inspector. Same rules as UnityEvent AddLateEvent<T0, T1, TEvent> Version of AddLateEvent with 2 arguments Create a non-generic class inheriting from this to use in inspector. Same rules as UnityEvent AddLateEventBase BoolAddLateEvent BoolUnityEvent DisconnectAddLateEvent Event fires from a NetworkClient when it fails to connect to the server DisconnectEvent NetworkPlayerAddLateEvent Event fires from a NetworkClient or NetworkServer during a new connection, a new authentication, or a disconnection. NetworkPlayerEvent Interfaces IAddLateEvent Event that can only run once, adding handler late will it invoke right away IAddLateEvent<T0> Version of IAddLateEvent with 1 argument IAddLateEvent<T0, T1> Version of IAddLateEvent with 2 arguments"
  },
  "api/Mirage.Events.IAddLateEvent.html": {
    "href": "api/Mirage.Events.IAddLateEvent.html",
    "title": "Interface IAddLateEvent",
    "keywords": "Interface IAddLateEvent Event that can only run once, adding handler late will it invoke right away Namespace : Mirage.Events Assembly : Mirage.dll Syntax public interface IAddLateEvent Remarks Interface only contains AddHandler method because Invoke should only be called from the owner of the event Methods | Improve this Doc View Source AddListener(UnityAction) Declaration void AddListener(UnityAction handler) Parameters Type Name Description UnityAction handler | Improve this Doc View Source RemoveListener(UnityAction) Declaration void RemoveListener(UnityAction handler) Parameters Type Name Description UnityAction handler"
  },
  "api/Mirage.Events.IAddLateEvent-1.html": {
    "href": "api/Mirage.Events.IAddLateEvent-1.html",
    "title": "Interface IAddLateEvent<T0>",
    "keywords": "Interface IAddLateEvent<T0> Version of IAddLateEvent with 1 argument Namespace : Mirage.Events Assembly : Mirage.dll Syntax public interface IAddLateEvent<T0> Type Parameters Name Description T0 Methods | Improve this Doc View Source AddListener(UnityAction<T0>) Declaration void AddListener(UnityAction<T0> handler) Parameters Type Name Description UnityAction <T0> handler | Improve this Doc View Source RemoveListener(UnityAction<T0>) Declaration void RemoveListener(UnityAction<T0> handler) Parameters Type Name Description UnityAction <T0> handler"
  },
  "api/Mirage.Events.IAddLateEvent-2.html": {
    "href": "api/Mirage.Events.IAddLateEvent-2.html",
    "title": "Interface IAddLateEvent<T0, T1>",
    "keywords": "Interface IAddLateEvent<T0, T1> Version of IAddLateEvent with 2 arguments Namespace : Mirage.Events Assembly : Mirage.dll Syntax public interface IAddLateEvent<T0, T1> Type Parameters Name Description T0 T1 Methods | Improve this Doc View Source AddListener(UnityAction<T0, T1>) Declaration void AddListener(UnityAction<T0, T1> handler) Parameters Type Name Description UnityAction <T0, T1> handler | Improve this Doc View Source RemoveListener(UnityAction<T0, T1>) Declaration void RemoveListener(UnityAction<T0, T1> handler) Parameters Type Name Description UnityAction <T0, T1> handler"
  },
  "api/Mirage.Events.NetworkPlayerAddLateEvent.html": {
    "href": "api/Mirage.Events.NetworkPlayerAddLateEvent.html",
    "title": "Class NetworkPlayerAddLateEvent",
    "keywords": "Class NetworkPlayerAddLateEvent Event fires from a NetworkClient or NetworkServer during a new connection, a new authentication, or a disconnection. Inheritance Object AddLateEventBase AddLateEvent < INetworkPlayer , NetworkPlayerEvent > NetworkPlayerAddLateEvent Implements IAddLateEvent < INetworkPlayer > Inherited Members AddLateEvent<INetworkPlayer, NetworkPlayerEvent>.baseEvent AddLateEvent<INetworkPlayer, NetworkPlayerEvent>.AddListener(UnityAction<INetworkPlayer>) AddLateEvent<INetworkPlayer, NetworkPlayerEvent>.RemoveListener(UnityAction<INetworkPlayer>) AddLateEvent<INetworkPlayer, NetworkPlayerEvent>.Invoke(INetworkPlayer) AddLateEventBase.baseEvent AddLateEventBase.hasInvoked AddLateEventBase.MarkInvoked() AddLateEventBase.Reset() AddLateEventBase.RemoveAllListeners() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Events Assembly : Mirage.dll Syntax [Serializable] public class NetworkPlayerAddLateEvent : AddLateEvent<INetworkPlayer, NetworkPlayerEvent>, IAddLateEvent<INetworkPlayer> Implements IAddLateEvent<T0>"
  },
  "api/Mirage.Events.NetworkPlayerEvent.html": {
    "href": "api/Mirage.Events.NetworkPlayerEvent.html",
    "title": "Class NetworkPlayerEvent",
    "keywords": "Class NetworkPlayerEvent Inheritance Object UnityEventBase UnityEvent < INetworkPlayer > NetworkPlayerEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<INetworkPlayer>.AddListener(UnityAction<INetworkPlayer>) UnityEvent<INetworkPlayer>.RemoveListener(UnityAction<INetworkPlayer>) UnityEngine.Events.UnityEvent<Mirage.INetworkPlayer>.FindMethod_Impl(System.String, System.Type) UnityEvent<INetworkPlayer>.Invoke(INetworkPlayer) UnityEventBase.ISerializationCallbackReceiver.OnBeforeSerialize() UnityEventBase.ISerializationCallbackReceiver.OnAfterDeserialize() UnityEventBase.FindMethod_Impl(String, Object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(Int32) UnityEventBase.GetPersistentMethodName(Int32) UnityEventBase.SetPersistentListenerState(Int32, UnityEventCallState) UnityEventBase.AddListener(Object, MethodInfo) UnityEventBase.RemoveListener(Object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(Object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(Object, String, Type[]) UnityEngine.Events.UnityEventBase.GetValidMethodInfo(System.Type, System.String, System.Type[]) UnityEventBase.ValidateRegistration(MethodInfo, Object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, Object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(Int32, Object, MethodInfo) UnityEngine.Events.UnityEventBase.RegisterPersistentListener(System.Int32, System.Object, System.Type, System.Reflection.MethodInfo) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage.Events Assembly : Mirage.dll Syntax [Serializable] public class NetworkPlayerEvent : UnityEvent<INetworkPlayer>, ISerializationCallbackReceiver Implements ISerializationCallbackReceiver"
  },
  "api/Mirage.Experimental.html": {
    "href": "api/Mirage.Experimental.html",
    "title": "Namespace Mirage.Experimental",
    "keywords": "Namespace Mirage.Experimental Classes NetworkLerpRigidbody NetworkRigidbody NetworkRigidbody.ClientSyncState holds previously synced values NetworkTransform NetworkTransformBase NetworkTransformChild A component to synchronize the position of child transforms of networked objects. There must be a NetworkTransform on the root object of the hierarchy. There can be multiple NetworkTransformChild components on an object. This does not use physics for synchronization, it simply synchronizes the localPosition and localRotation of the child transform and lerps towards the received values. Structs NetworkTransformBase.DataPoint"
  },
  "api/Mirage.Experimental.NetworkLerpRigidbody.html": {
    "href": "api/Mirage.Experimental.NetworkLerpRigidbody.html",
    "title": "Class NetworkLerpRigidbody",
    "keywords": "Class NetworkLerpRigidbody Inheritance Object Object Component Behaviour MonoBehaviour NetworkBehaviour NetworkLerpRigidbody Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.IsServer NetworkBehaviour.IsClient NetworkBehaviour.IsLocalClient NetworkBehaviour.IsLocalPlayer NetworkBehaviour.IsServerOnly NetworkBehaviour.IsClientOnly NetworkBehaviour.HasAuthority NetworkBehaviour.NetId NetworkBehaviour.Server NetworkBehaviour.ServerObjectManager NetworkBehaviour.Client NetworkBehaviour.ClientObjectManager NetworkBehaviour.Owner NetworkBehaviour.World NetworkBehaviour.NetworkTime NetworkBehaviour.SyncVarDirtyBits NetworkBehaviour.GetSyncVarHookGuard(UInt64) NetworkBehaviour.SetSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.Identity NetworkBehaviour.COMPONENT_INDEX_NOT_FOUND NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(ISyncObject) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.StillDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.GetRpcCount() NetworkBehaviour.remoteCallCollection MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage.Experimental Assembly : Mirage.Components.dll Syntax [AddComponentMenu(\"Network/Experimental/NetworkLerpRigidbody\")] [HelpURL(\"https://miragenet.github.io/Mirage/Articles/Components/NetworkLerpRigidbody.html\")] public class NetworkLerpRigidbody : NetworkBehaviour Fields | Improve this Doc View Source clientAuthority Declaration [Tooltip(\"Set to true if moves come from owner client, set to false if moves always come from server\")] public bool clientAuthority Field Value Type Description Boolean | Improve this Doc View Source lerpPositionAmount Declaration [Tooltip(\"How quickly current position approaches target position\")] public float lerpPositionAmount Field Value Type Description Single | Improve this Doc View Source lerpVelocityAmount Declaration [Tooltip(\"How quickly current velocity approaches target velocity\")] public float lerpVelocityAmount Field Value Type Description Single"
  },
  "api/Mirage.Experimental.NetworkRigidbody.ClientSyncState.html": {
    "href": "api/Mirage.Experimental.NetworkRigidbody.ClientSyncState.html",
    "title": "Class NetworkRigidbody.ClientSyncState",
    "keywords": "Class NetworkRigidbody.ClientSyncState holds previously synced values Inheritance Object NetworkRigidbody.ClientSyncState Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Experimental Assembly : Mirage.Components.dll Syntax public class ClientSyncState Fields | Improve this Doc View Source angularDrag Declaration public float angularDrag Field Value Type Description Single | Improve this Doc View Source angularVelocity Declaration public Vector3 angularVelocity Field Value Type Description Vector3 | Improve this Doc View Source drag Declaration public float drag Field Value Type Description Single | Improve this Doc View Source isKinematic Declaration public bool isKinematic Field Value Type Description Boolean | Improve this Doc View Source nextSyncTime Next sync time that velocity will be synced, based on syncInterval. Declaration public float nextSyncTime Field Value Type Description Single | Improve this Doc View Source useGravity Declaration public bool useGravity Field Value Type Description Boolean | Improve this Doc View Source velocity Declaration public Vector3 velocity Field Value Type Description Vector3"
  },
  "api/Mirage.Experimental.NetworkRigidbody.html": {
    "href": "api/Mirage.Experimental.NetworkRigidbody.html",
    "title": "Class NetworkRigidbody",
    "keywords": "Class NetworkRigidbody Inheritance Object Object Component Behaviour MonoBehaviour NetworkBehaviour NetworkRigidbody Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.IsServer NetworkBehaviour.IsClient NetworkBehaviour.IsLocalClient NetworkBehaviour.IsLocalPlayer NetworkBehaviour.IsServerOnly NetworkBehaviour.IsClientOnly NetworkBehaviour.HasAuthority NetworkBehaviour.NetId NetworkBehaviour.Server NetworkBehaviour.ServerObjectManager NetworkBehaviour.Client NetworkBehaviour.ClientObjectManager NetworkBehaviour.Owner NetworkBehaviour.World NetworkBehaviour.NetworkTime NetworkBehaviour.SyncVarDirtyBits NetworkBehaviour.GetSyncVarHookGuard(UInt64) NetworkBehaviour.SetSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.Identity NetworkBehaviour.COMPONENT_INDEX_NOT_FOUND NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(ISyncObject) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.StillDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.GetRpcCount() NetworkBehaviour.remoteCallCollection MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage.Experimental Assembly : Mirage.Components.dll Syntax [AddComponentMenu(\"Network/Experimental/NetworkRigidbody\")] [HelpURL(\"https://miragenet.github.io/Mirage/Articles/Components/NetworkRigidbody.html\")] public class NetworkRigidbody : NetworkBehaviour Fields | Improve this Doc View Source angularVelocitySensitivity Declaration [Tooltip(\"Only Syncs Value if distance between previous and current is great than sensitivity\")] public float angularVelocitySensitivity Field Value Type Description Single | Improve this Doc View Source clearAngularVelocity Declaration [Tooltip(\"Set angularVelocity to 0 each frame (only works if syncAngularVelocity is false\")] public bool clearAngularVelocity Field Value Type Description Boolean | Improve this Doc View Source clearVelocity Declaration [Tooltip(\"Set velocity to 0 each frame (only works if syncVelocity is false\")] public bool clearVelocity Field Value Type Description Boolean | Improve this Doc View Source clientAuthority Declaration [Tooltip(\"Set to true if moves come from owner client, set to false if moves always come from server\")] public bool clientAuthority Field Value Type Description Boolean | Improve this Doc View Source syncAngularVelocity Declaration [Header(\"Angular Velocity\")] [Tooltip(\"Syncs AngularVelocity every SyncInterval\")] public bool syncAngularVelocity Field Value Type Description Boolean | Improve this Doc View Source syncVelocity Declaration [Header(\"Velocity\")] [Tooltip(\"Syncs Velocity every SyncInterval\")] public bool syncVelocity Field Value Type Description Boolean | Improve this Doc View Source target Declaration [Header(\"Settings\")] public Rigidbody target Field Value Type Description Rigidbody | Improve this Doc View Source velocitySensitivity Declaration [Tooltip(\"Only Syncs Value if distance between previous and current is great than sensitivity\")] public float velocitySensitivity Field Value Type Description Single"
  },
  "api/Mirage.Experimental.NetworkTransform.html": {
    "href": "api/Mirage.Experimental.NetworkTransform.html",
    "title": "Class NetworkTransform",
    "keywords": "Class NetworkTransform Inheritance Object Object Component Behaviour MonoBehaviour NetworkBehaviour NetworkTransformBase NetworkTransform Inherited Members NetworkTransformBase.clientAuthority NetworkTransformBase.excludeOwnerUpdate NetworkTransformBase.syncPosition NetworkTransformBase.syncRotation NetworkTransformBase.syncScale NetworkTransformBase.interpolatePosition NetworkTransformBase.interpolateRotation NetworkTransformBase.interpolateScale NetworkTransformBase.localPositionSensitivity NetworkTransformBase.localRotationSensitivity NetworkTransformBase.localScaleSensitivity NetworkTransformBase.lastPosition NetworkTransformBase.lastRotation NetworkTransformBase.lastScale NetworkTransformBase.start NetworkTransformBase.goal NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.IsServer NetworkBehaviour.IsClient NetworkBehaviour.IsLocalClient NetworkBehaviour.IsLocalPlayer NetworkBehaviour.IsServerOnly NetworkBehaviour.IsClientOnly NetworkBehaviour.HasAuthority NetworkBehaviour.NetId NetworkBehaviour.Server NetworkBehaviour.ServerObjectManager NetworkBehaviour.Client NetworkBehaviour.ClientObjectManager NetworkBehaviour.Owner NetworkBehaviour.World NetworkBehaviour.NetworkTime NetworkBehaviour.SyncVarDirtyBits NetworkBehaviour.GetSyncVarHookGuard(UInt64) NetworkBehaviour.SetSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.Identity NetworkBehaviour.COMPONENT_INDEX_NOT_FOUND NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(ISyncObject) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.StillDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.GetRpcCount() NetworkBehaviour.remoteCallCollection MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage.Experimental Assembly : Mirage.Components.dll Syntax [DisallowMultipleComponent] [AddComponentMenu(\"Network/Experimental/NetworkTransformExperimental\")] [HelpURL(\"https://miragenet.github.io/Mirage/Articles/Components/NetworkTransform.html\")] public class NetworkTransform : NetworkTransformBase Properties | Improve this Doc View Source TargetTransform Declaration protected override Transform TargetTransform { get; } Property Value Type Description Transform Overrides NetworkTransformBase.TargetTransform"
  },
  "api/Mirage.Experimental.NetworkTransformBase.DataPoint.html": {
    "href": "api/Mirage.Experimental.NetworkTransformBase.DataPoint.html",
    "title": "Struct NetworkTransformBase.DataPoint",
    "keywords": "Struct NetworkTransformBase.DataPoint Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Mirage.Experimental Assembly : Mirage.Components.dll Syntax [Serializable] public struct DataPoint Fields | Improve this Doc View Source localPosition Declaration public Vector3 localPosition Field Value Type Description Vector3 | Improve this Doc View Source localRotation Declaration public Quaternion localRotation Field Value Type Description Quaternion | Improve this Doc View Source localScale Declaration public Vector3 localScale Field Value Type Description Vector3 | Improve this Doc View Source movementSpeed Declaration public float movementSpeed Field Value Type Description Single | Improve this Doc View Source timeStamp Declaration public float timeStamp Field Value Type Description Single Properties | Improve this Doc View Source IsValid Declaration public bool IsValid { get; } Property Value Type Description Boolean"
  },
  "api/Mirage.Experimental.NetworkTransformBase.html": {
    "href": "api/Mirage.Experimental.NetworkTransformBase.html",
    "title": "Class NetworkTransformBase",
    "keywords": "Class NetworkTransformBase Inheritance Object Object Component Behaviour MonoBehaviour NetworkBehaviour NetworkTransformBase NetworkTransform NetworkTransformChild Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.IsServer NetworkBehaviour.IsClient NetworkBehaviour.IsLocalClient NetworkBehaviour.IsLocalPlayer NetworkBehaviour.IsServerOnly NetworkBehaviour.IsClientOnly NetworkBehaviour.HasAuthority NetworkBehaviour.NetId NetworkBehaviour.Server NetworkBehaviour.ServerObjectManager NetworkBehaviour.Client NetworkBehaviour.ClientObjectManager NetworkBehaviour.Owner NetworkBehaviour.World NetworkBehaviour.NetworkTime NetworkBehaviour.SyncVarDirtyBits NetworkBehaviour.GetSyncVarHookGuard(UInt64) NetworkBehaviour.SetSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.Identity NetworkBehaviour.COMPONENT_INDEX_NOT_FOUND NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(ISyncObject) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.StillDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.GetRpcCount() NetworkBehaviour.remoteCallCollection MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage.Experimental Assembly : Mirage.Components.dll Syntax public abstract class NetworkTransformBase : NetworkBehaviour Fields | Improve this Doc View Source clientAuthority Declaration [Header(\"Authority\")] [Tooltip(\"Set to true if moves come from owner client, set to false if moves always come from server\")] public bool clientAuthority Field Value Type Description Boolean | Improve this Doc View Source excludeOwnerUpdate Declaration [Tooltip(\"Set to true if updates from server should be ignored by owner\")] public bool excludeOwnerUpdate Field Value Type Description Boolean | Improve this Doc View Source goal Declaration public NetworkTransformBase.DataPoint goal Field Value Type Description NetworkTransformBase.DataPoint | Improve this Doc View Source interpolatePosition Declaration [Header(\"Interpolation\")] [Tooltip(\"Set to true if position should be interpolated\")] public bool interpolatePosition Field Value Type Description Boolean | Improve this Doc View Source interpolateRotation Declaration [Tooltip(\"Set to true if rotation should be interpolated\")] public bool interpolateRotation Field Value Type Description Boolean | Improve this Doc View Source interpolateScale Declaration [Tooltip(\"Set to true if scale should be interpolated\")] public bool interpolateScale Field Value Type Description Boolean | Improve this Doc View Source lastPosition Declaration [Header(\"Diagnostics\")] public Vector3 lastPosition Field Value Type Description Vector3 | Improve this Doc View Source lastRotation Declaration public Quaternion lastRotation Field Value Type Description Quaternion | Improve this Doc View Source lastScale Declaration public Vector3 lastScale Field Value Type Description Vector3 | Improve this Doc View Source localPositionSensitivity Declaration [Header(\"Sensitivity\")] [Tooltip(\"Changes to the transform must exceed these values to be transmitted on the network.\")] public float localPositionSensitivity Field Value Type Description Single | Improve this Doc View Source localRotationSensitivity Declaration [Tooltip(\"If rotation exceeds this angle, it will be transmitted on the network\")] public float localRotationSensitivity Field Value Type Description Single | Improve this Doc View Source localScaleSensitivity Declaration [Tooltip(\"Changes to the transform must exceed these values to be transmitted on the network.\")] public float localScaleSensitivity Field Value Type Description Single | Improve this Doc View Source start Declaration public NetworkTransformBase.DataPoint start Field Value Type Description NetworkTransformBase.DataPoint | Improve this Doc View Source syncPosition Declaration [Header(\"Synchronization\")] [Tooltip(\"Set to true if position should be synchronized\")] public bool syncPosition Field Value Type Description Boolean | Improve this Doc View Source syncRotation Declaration [Tooltip(\"Set to true if rotation should be synchronized\")] public bool syncRotation Field Value Type Description Boolean | Improve this Doc View Source syncScale Declaration [Tooltip(\"Set to true if scale should be synchronized\")] public bool syncScale Field Value Type Description Boolean Properties | Improve this Doc View Source TargetTransform Declaration protected abstract Transform TargetTransform { get; } Property Value Type Description Transform"
  },
  "api/Mirage.Experimental.NetworkTransformChild.html": {
    "href": "api/Mirage.Experimental.NetworkTransformChild.html",
    "title": "Class NetworkTransformChild",
    "keywords": "Class NetworkTransformChild A component to synchronize the position of child transforms of networked objects. There must be a NetworkTransform on the root object of the hierarchy. There can be multiple NetworkTransformChild components on an object. This does not use physics for synchronization, it simply synchronizes the localPosition and localRotation of the child transform and lerps towards the received values. Inheritance Object Object Component Behaviour MonoBehaviour NetworkBehaviour NetworkTransformBase NetworkTransformChild Inherited Members NetworkTransformBase.clientAuthority NetworkTransformBase.excludeOwnerUpdate NetworkTransformBase.syncPosition NetworkTransformBase.syncRotation NetworkTransformBase.syncScale NetworkTransformBase.interpolatePosition NetworkTransformBase.interpolateRotation NetworkTransformBase.interpolateScale NetworkTransformBase.localPositionSensitivity NetworkTransformBase.localRotationSensitivity NetworkTransformBase.localScaleSensitivity NetworkTransformBase.lastPosition NetworkTransformBase.lastRotation NetworkTransformBase.lastScale NetworkTransformBase.start NetworkTransformBase.goal NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.IsServer NetworkBehaviour.IsClient NetworkBehaviour.IsLocalClient NetworkBehaviour.IsLocalPlayer NetworkBehaviour.IsServerOnly NetworkBehaviour.IsClientOnly NetworkBehaviour.HasAuthority NetworkBehaviour.NetId NetworkBehaviour.Server NetworkBehaviour.ServerObjectManager NetworkBehaviour.Client NetworkBehaviour.ClientObjectManager NetworkBehaviour.Owner NetworkBehaviour.World NetworkBehaviour.NetworkTime NetworkBehaviour.SyncVarDirtyBits NetworkBehaviour.GetSyncVarHookGuard(UInt64) NetworkBehaviour.SetSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.Identity NetworkBehaviour.COMPONENT_INDEX_NOT_FOUND NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(ISyncObject) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.StillDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.GetRpcCount() NetworkBehaviour.remoteCallCollection MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage.Experimental Assembly : Mirage.Components.dll Syntax [AddComponentMenu(\"Network/Experimental/NetworkTransformChildExperimentalExperimental\")] [HelpURL(\"https://miragenet.github.io/Mirage/Articles/Components/NetworkTransformChild.html\")] public class NetworkTransformChild : NetworkTransformBase Fields | Improve this Doc View Source target Declaration [Header(\"Target\")] public Transform target Field Value Type Description Transform Properties | Improve this Doc View Source TargetTransform Declaration protected override Transform TargetTransform { get; } Property Value Type Description Transform Overrides NetworkTransformBase.TargetTransform"
  },
  "api/Mirage.ExponentialMovingAverage.html": {
    "href": "api/Mirage.ExponentialMovingAverage.html",
    "title": "Class ExponentialMovingAverage",
    "keywords": "Class ExponentialMovingAverage Inheritance Object ExponentialMovingAverage Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage Assembly : Mirage.dll Syntax public class ExponentialMovingAverage Constructors | Improve this Doc View Source ExponentialMovingAverage(Int32) Declaration public ExponentialMovingAverage(int n) Parameters Type Name Description Int32 n Properties | Improve this Doc View Source Value Declaration public double Value { get; } Property Value Type Description Double | Improve this Doc View Source Var Declaration public double Var { get; } Property Value Type Description Double Methods | Improve this Doc View Source Add(Double) Declaration public void Add(double newValue) Parameters Type Name Description Double newValue | Improve this Doc View Source Reset() Declaration public void Reset()"
  },
  "api/Mirage.FoldoutEventAttribute.html": {
    "href": "api/Mirage.FoldoutEventAttribute.html",
    "title": "Class FoldoutEventAttribute",
    "keywords": "Class FoldoutEventAttribute Draws UnityEvent as a foldout Inheritance Object Attribute PropertyAttribute FoldoutEventAttribute Inherited Members PropertyAttribute.order Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage Assembly : Mirage.dll Syntax [AttributeUsage(AttributeTargets.Field)] public sealed class FoldoutEventAttribute : PropertyAttribute"
  },
  "api/Mirage.GameobjectExtension.html": {
    "href": "api/Mirage.GameobjectExtension.html",
    "title": "Class GameobjectExtension",
    "keywords": "Class GameobjectExtension Inheritance Object GameobjectExtension Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage Assembly : Mirage.dll Syntax public static class GameobjectExtension Methods | Improve this Doc View Source GetNetworkIdentity(GameObject) Gets NetworkIdentity on a GameObject and throws InvalidOperationException if the GameObject does not have one. Declaration public static NetworkIdentity GetNetworkIdentity(this GameObject gameObject) Parameters Type Name Description GameObject gameObject Returns Type Description NetworkIdentity attached NetworkIdentity Exceptions Type Condition InvalidOperationException Throws when gameObject does not have a NetworkIdentity attached"
  },
  "api/Mirage.GameObjectSerializers.html": {
    "href": "api/Mirage.GameObjectSerializers.html",
    "title": "Class GameObjectSerializers",
    "keywords": "Class GameObjectSerializers Inheritance Object GameObjectSerializers Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage Assembly : Mirage.dll Syntax public static class GameObjectSerializers Methods | Improve this Doc View Source ReadGameObjectSyncVar(NetworkReader) Declaration public static GameObjectSyncvar ReadGameObjectSyncVar(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description GameObjectSyncvar | Improve this Doc View Source WriteGameObjectSyncVar(NetworkWriter, GameObjectSyncvar) Declaration public static void WriteGameObjectSyncVar(this NetworkWriter writer, GameObjectSyncvar id) Parameters Type Name Description NetworkWriter writer GameObjectSyncvar id"
  },
  "api/Mirage.GameObjectSyncvar.html": {
    "href": "api/Mirage.GameObjectSyncvar.html",
    "title": "Struct GameObjectSyncvar",
    "keywords": "Struct GameObjectSyncvar backing struct for a NetworkIdentity when used as a syncvar the weaver will replace the syncvar with this struct. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax public struct GameObjectSyncvar Properties | Improve this Doc View Source Value Declaration public GameObject Value { get; set; } Property Value Type Description GameObject"
  },
  "api/Mirage.HasAuthorityAttribute.html": {
    "href": "api/Mirage.HasAuthorityAttribute.html",
    "title": "Class HasAuthorityAttribute",
    "keywords": "Class HasAuthorityAttribute Prevents players without authority from running this method. Can only be used inside a NetworkBehaviour Inheritance Object Attribute HasAuthorityAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage Assembly : Mirage.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class HasAuthorityAttribute : Attribute Fields | Improve this Doc View Source error If true, when the method is called from a client, it throws an error If false, no error is thrown, but the method won't execute useful for unity built in methods such as Await, Update, Start, etc. Declaration public bool error Field Value Type Description Boolean"
  },
  "api/Mirage.HeadlessAutoStart.html": {
    "href": "api/Mirage.HeadlessAutoStart.html",
    "title": "Class HeadlessAutoStart",
    "keywords": "Class HeadlessAutoStart Inheritance Object Object Component Behaviour MonoBehaviour HeadlessAutoStart Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.Components.dll Syntax public class HeadlessAutoStart : MonoBehaviour Fields | Improve this Doc View Source Server Declaration [FormerlySerializedAs(\"server\")] public NetworkServer Server Field Value Type Description NetworkServer | Improve this Doc View Source startOnHeadless Automatically invoke StartServer() If the application is a Server Build or run with the -batchMode ServerRpc line argument, StartServer is automatically invoked. Declaration [Tooltip(\"Should the server auto-start when the game is started in a headless build?\")] public bool startOnHeadless Field Value Type Description Boolean"
  },
  "api/Mirage.HeadlessFrameLimiter.html": {
    "href": "api/Mirage.HeadlessFrameLimiter.html",
    "title": "Class HeadlessFrameLimiter",
    "keywords": "Class HeadlessFrameLimiter Inheritance Object Object Component Behaviour MonoBehaviour HeadlessFrameLimiter Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.Components.dll Syntax public class HeadlessFrameLimiter : MonoBehaviour Fields | Improve this Doc View Source serverTickRate Server Update frequency, per second. Use around 60Hz for fast paced games like Counter-Strike to minimize latency. Use around 30Hz for games like WoW to minimize computations. Use around 1-10Hz for slow paced games like EVE. Declaration [Tooltip(\"Server Update frequency, per second. Use around 60Hz for fast paced games like Counter-Strike to minimize latency. Use around 30Hz for games like WoW to minimize computations. Use around 1-10Hz for slow paced games like EVE.\")] public int serverTickRate Field Value Type Description Int32 Methods | Improve this Doc View Source Start() Set the frame rate for a headless server. Declaration public void Start()"
  },
  "api/Mirage.html": {
    "href": "api/Mirage.html",
    "title": "Namespace Mirage",
    "keywords": "Namespace Mirage Classes Channel CharacterSpawner Spawns a player as soon as the connection is authenticated ClientAttribute Prevents this method from running if client is not active. Can only be used inside a NetworkBehaviour ClientObjectManager ClientRpcAttribute The server uses a Remote Procedure Call (RPC) to run this function on specific clients. Note that if you set the target as Connection, you need to pass a specific connection as a parameter of your method DeserializeFailedException ExponentialMovingAverage FoldoutEventAttribute Draws UnityEvent as a foldout GameobjectExtension GameObjectSerializers HasAuthorityAttribute Prevents players without authority from running this method. Can only be used inside a NetworkBehaviour HeadlessAutoStart HeadlessFrameLimiter LobbyReady LocalPlayerAttribute Prevents nonlocal players from running this method. Can only be used inside a NetworkBehaviour MessageHandler MethodInvocationException Exception thrown if a guarded method is invoked incorrectly NetworkAnimator A component to synchronize animation states for networked objects. NetworkAuthenticator Base class for implementing component-based authentication during the Connect phase NetworkBehaviorSerializers NetworkBehaviour Base class which should be inherited by scripts which contain networking functionality. NetworkClient This is a network client class used by the networking system. It contains a NetworkConnection that is used to connect to a network server. The NetworkClient handle connection state, messages handlers, and connection configuration. There can be many NetworkClient instances in a process at a time, but only one that is connected to a game server ( NetworkServer ) that uses spawned objects. NetworkClient has an internal update function where it handles events from the transport layer. This includes asynchronous connect events, disconnect events and incoming data from a server. NetworkDiagnostics Provides profiling information from mirror A profiler can subscribe to these events and present the data in a friendly way to the user NetworkIdentity The NetworkIdentity identifies objects across the network, between server and clients. Its primary data is a NetworkInstanceId which is allocated by the server and then set on clients. This is used in network communications to be able to lookup game objects on different machines. NetworkIdentitySerializers NetworkManager NetworkManagerGUI NetworkManagerHud NetworkMatchChecker Component that controls visibility of networked objects based on match id. Any object with this component on it will only be visible to other objects in the same match. This would be used to isolate players to their respective matches within a single game server instance. NetworkMessageAttribute Tell the weaver to generate reader and writer for a class NetworkPingDisplay Component that will display the clients ping in milliseconds NetworkPlayer A High level network connection. This is used for connections from client-to-server and for connection from server-to-client. NetworkProximityChecker Component that controls visibility of networked objects for players. Any object with this component on it will not be visible to players more than a (configurable) distance away. NetworkSceneChecker Component that controls visibility of networked objects between scenes. Any object with this component on it will only be visible to other objects in the same scene This would be used when the server has multiple additive subscenes loaded to isolate players to their respective subscenes NetworkSceneManager NetworkSceneManager is an optional component that helps keep scene in sync between server and client. The NetworkClient loads scenes as instructed by the NetworkServer . The NetworkServer controls the currently active Scene and any additive Load/Unload. when a client connect NetworkSceneManager will send a message telling the new client to load the scene that is active on the server NetworkServer The NetworkServer. NetworkTime Synchronize time between the server and the clients NetworkTransform NetworkTransformBase NetworkTransformBase.DataPoint NetworkTransformChild A component to synchronize the position of child transforms of networked objects. There must be a NetworkTransform on the root object of the hierarchy. There can be multiple NetworkTransformChild components on an object. This does not use physics for synchronization, it simply synchronizes the localPosition and localRotation of the child transform and lerps towards the received values. NetworkVisibility NetworkWorld Holds collection of spawned network objects This class works on both server and client ObjectReady OnlineOfflineScene PipePeerConnection A IConnection that is directly sends data to a IDataHandler PipePeerConnection.PipeEndPoint PlayerSceneChangeEvent ReadOnlyInspectorAttribute Draws UnityEvent as a foldout SceneAttribute Converts a string property into a Scene property in the inspector SceneChangeFinishedEvent Event fires from INetworkSceneManager when a scene change finishes on either Server or Client. Scene - Loaded scene SceneOperation - Scene change type (Normal, Additive Load, Additive Unload). SceneChangeStartedEvent Event fires from INetworkSceneManager when a scene change begins on either Server or Client. Scene - Name or path of the scene that's about to be loaded SceneOperation - Scene change type (Normal, Additive Load, Additive Unload). SceneVisibilityChecker ServerAttribute Prevents a method from running if server is not active. Can only be used inside a NetworkBehaviour ServerObjectManager The ServerObjectManager. ServerRpcAttribute Call this from a client to run this function on the server. Make sure to validate input etc. It's not possible to call this from a server. ShowInInspectorAttribute Used to show private SyncList in the inspector, Use instead of SerializeField for non Serializable types SpawnEvent StringHash SyncVarAttribute SyncVars are used to synchronize a variable from the server to all clients automatically. Value must be changed on server, not directly by clients. Hook parameter allows you to define a client-side method to be invoked when the client gets an update from the server. SyncVarReceiver Class that handles syncvar message and passes it to correct NetworkIdentity SyncVarSender Class that Syncs syncvar and other NetworkIdentity State Version Structs AddCharacterMessage GameObjectSyncvar backing struct for a NetworkIdentity when used as a syncvar the weaver will replace the syncvar with this struct. NetworkBehaviorSyncvar backing struct for a NetworkIdentity when used as a syncvar the weaver will replace the syncvar with this struct. NetworkDiagnostics.MessageInfo Describes an outgoing message NetworkIdentity.TransformSpawnSettings NetworkIdentitySyncvar backing struct for a NetworkIdentity when used as a syncvar the weaver will replace the syncvar with this struct. NetworkPingMessage NetworkPongMessage ObjectDestroyMessage ObjectHideMessage PipePeerConnection.PipeNotifyToken Token that invokes Delivered immediately RemoveAuthorityMessage RemoveCharacterMessage RpcMessage SceneMessage SceneNotReadyMessage Sent to client to mark their scene as not ready Client can sent SceneReadyMessage once its scene is ready again SceneReadyMessage Sent to indicate the scene is finished loading ServerRpcMessage ServerRpcReply ServerRpcWithReplyMessage SpawnMessage UpdateVarsMessage Interfaces IAuthenticatedObject IClientObjectManager IMessageReceiver An object that can receive messages IMessageSender An object that can send messages INetIdGenerator INetworkClient INetworkPlayer An object owned by a player that can: send/receive messages, have network visibility, be an object owner, authenticated permissions, and load scenes. May be from the server to client or from client to server INetworkSceneManager INetworkServer IObjectLocator An object that implements this interface can find objects by their net id This is used by readers when trying to deserialize gameobjects IObjectOwner An object that can own networked objects ISceneLoader IServerObjectManager IVisibilityTracker An object that can observe NetworkIdentities. this is useful for interest management Enums CharacterSpawner.PlayerSpawnMethod Enumeration of methods of where to spawn player objects in multiplayer games. ClientStoppedReason Reason why Client was stopped or disconnected ConnectState NetworkManagerMode RpcTarget Used by ClientRpc to tell mirage who to send remote call to SceneOperation SyncMode Sync to everyone, or only to owner. Delegates MessageDelegate<T> MessageDelegateWithPlayer<T> SpawnHandlerDelegate UnSpawnDelegate"
  },
  "api/Mirage.IAuthenticatedObject.html": {
    "href": "api/Mirage.IAuthenticatedObject.html",
    "title": "Interface IAuthenticatedObject",
    "keywords": "Interface IAuthenticatedObject Namespace : Mirage Assembly : Mirage.dll Syntax public interface IAuthenticatedObject Properties | Improve this Doc View Source AuthenticationData General purpose object to hold authentication data, character selection, tokens, etc. associated with the connection for reference after Authentication completes. Declaration object AuthenticationData { get; set; } Property Value Type Description Object | Improve this Doc View Source IsAuthenticated Marks if this player has been accepted by a NetworkAuthenticator Declaration bool IsAuthenticated { get; set; } Property Value Type Description Boolean"
  },
  "api/Mirage.IClientObjectManager.html": {
    "href": "api/Mirage.IClientObjectManager.html",
    "title": "Interface IClientObjectManager",
    "keywords": "Interface IClientObjectManager Namespace : Mirage Assembly : Mirage.dll Syntax public interface IClientObjectManager Methods | Improve this Doc View Source ClearSpawners() Declaration void ClearSpawners() | Improve this Doc View Source DestroyAllClientObjects() Declaration void DestroyAllClientObjects() | Improve this Doc View Source GetPrefab(Int32) Declaration NetworkIdentity GetPrefab(int prefabHash) Parameters Type Name Description Int32 prefabHash Returns Type Description NetworkIdentity | Improve this Doc View Source PrepareToSpawnSceneObjects() Declaration void PrepareToSpawnSceneObjects() | Improve this Doc View Source RegisterPrefab(NetworkIdentity) Declaration void RegisterPrefab(NetworkIdentity identity) Parameters Type Name Description NetworkIdentity identity | Improve this Doc View Source RegisterPrefab(NetworkIdentity, SpawnHandlerDelegate, UnSpawnDelegate) Declaration void RegisterPrefab(NetworkIdentity identity, SpawnHandlerDelegate spawnHandler, UnSpawnDelegate unspawnHandler) Parameters Type Name Description NetworkIdentity identity SpawnHandlerDelegate spawnHandler UnSpawnDelegate unspawnHandler | Improve this Doc View Source RegisterPrefab(NetworkIdentity, Int32) Declaration void RegisterPrefab(NetworkIdentity identity, int newPrefabHash) Parameters Type Name Description NetworkIdentity identity Int32 newPrefabHash | Improve this Doc View Source RegisterSpawnHandler(Int32, SpawnHandlerDelegate, UnSpawnDelegate) Declaration void RegisterSpawnHandler(int prefabHash, SpawnHandlerDelegate spawnHandler, UnSpawnDelegate unspawnHandler) Parameters Type Name Description Int32 prefabHash SpawnHandlerDelegate spawnHandler UnSpawnDelegate unspawnHandler | Improve this Doc View Source UnregisterPrefab(NetworkIdentity) Declaration void UnregisterPrefab(NetworkIdentity identity) Parameters Type Name Description NetworkIdentity identity | Improve this Doc View Source UnregisterSpawnHandler(Int32) Declaration void UnregisterSpawnHandler(int prefabHash) Parameters Type Name Description Int32 prefabHash"
  },
  "api/Mirage.IMessageReceiver.html": {
    "href": "api/Mirage.IMessageReceiver.html",
    "title": "Interface IMessageReceiver",
    "keywords": "Interface IMessageReceiver An object that can receive messages Namespace : Mirage Assembly : Mirage.dll Syntax public interface IMessageReceiver Methods | Improve this Doc View Source ClearHandlers() Declaration void ClearHandlers() | Improve this Doc View Source HandleMessage(INetworkPlayer, ArraySegment<Byte>) Declaration void HandleMessage(INetworkPlayer player, ArraySegment<byte> packet) Parameters Type Name Description INetworkPlayer player ArraySegment < Byte > packet | Improve this Doc View Source RegisterHandler<T>(MessageDelegate<T>) Declaration void RegisterHandler<T>(MessageDelegate<T> handler) Parameters Type Name Description MessageDelegate <T> handler Type Parameters Name Description T | Improve this Doc View Source RegisterHandler<T>(MessageDelegateWithPlayer<T>) Declaration void RegisterHandler<T>(MessageDelegateWithPlayer<T> handler) Parameters Type Name Description MessageDelegateWithPlayer <T> handler Type Parameters Name Description T | Improve this Doc View Source UnregisterHandler<T>() Declaration void UnregisterHandler<T>() Type Parameters Name Description T"
  },
  "api/Mirage.IMessageSender.html": {
    "href": "api/Mirage.IMessageSender.html",
    "title": "Interface IMessageSender",
    "keywords": "Interface IMessageSender An object that can send messages Namespace : Mirage Assembly : Mirage.dll Syntax public interface IMessageSender Methods | Improve this Doc View Source Send(ArraySegment<Byte>, Int32) Declaration void Send(ArraySegment<byte> segment, int channelId = 0) Parameters Type Name Description ArraySegment < Byte > segment Int32 channelId | Improve this Doc View Source Send<T>(T, INotifyCallBack) Declaration void Send<T>(T message, INotifyCallBack notifyCallBack) Parameters Type Name Description T message INotifyCallBack notifyCallBack Type Parameters Name Description T | Improve this Doc View Source Send<T>(T, Int32) Declaration void Send<T>(T message, int channelId = 0) Parameters Type Name Description T message Int32 channelId Type Parameters Name Description T"
  },
  "api/Mirage.INetIdGenerator.html": {
    "href": "api/Mirage.INetIdGenerator.html",
    "title": "Interface INetIdGenerator",
    "keywords": "Interface INetIdGenerator Namespace : Mirage Assembly : Mirage.dll Syntax public interface INetIdGenerator Methods | Improve this Doc View Source GenerateNetId() Generate your own specific net id. Declaration uint GenerateNetId() Returns Type Description UInt32"
  },
  "api/Mirage.INetworkClient.html": {
    "href": "api/Mirage.INetworkClient.html",
    "title": "Interface INetworkClient",
    "keywords": "Interface INetworkClient Inherited Members IMessageSender.Send<T>(T, Int32) IMessageSender.Send(ArraySegment<Byte>, Int32) IMessageSender.Send<T>(T, INotifyCallBack) Namespace : Mirage Assembly : Mirage.dll Syntax public interface INetworkClient : IMessageSender Properties | Improve this Doc View Source Active active is true while a client is connecting/connected (= while the network is active) Declaration bool Active { get; } Property Value Type Description Boolean | Improve this Doc View Source Authenticated Event fires after the Client connection has successfully been authenticated with its Server. Declaration IAddLateEvent<INetworkPlayer> Authenticated { get; } Property Value Type Description IAddLateEvent < INetworkPlayer > | Improve this Doc View Source Connected Event fires once the Client has connected its Server. Declaration IAddLateEvent<INetworkPlayer> Connected { get; } Property Value Type Description IAddLateEvent < INetworkPlayer > | Improve this Doc View Source Disconnected Event fires after the Client has disconnected from its Server and Cleanup has been called. Declaration IAddLateEvent<ClientStoppedReason> Disconnected { get; } Property Value Type Description IAddLateEvent < ClientStoppedReason > | Improve this Doc View Source IsLocalClient NetworkClient can connect to local server in host mode too Declaration bool IsLocalClient { get; } Property Value Type Description Boolean | Improve this Doc View Source MessageHandler Declaration MessageHandler MessageHandler { get; } Property Value Type Description MessageHandler | Improve this Doc View Source Player The NetworkConnection object this client is using. Declaration INetworkPlayer Player { get; } Property Value Type Description INetworkPlayer | Improve this Doc View Source World Declaration NetworkWorld World { get; } Property Value Type Description NetworkWorld Methods | Improve this Doc View Source Disconnect() Declaration void Disconnect()"
  },
  "api/Mirage.INetworkPlayer.html": {
    "href": "api/Mirage.INetworkPlayer.html",
    "title": "Interface INetworkPlayer",
    "keywords": "Interface INetworkPlayer An object owned by a player that can: send/receive messages, have network visibility, be an object owner, authenticated permissions, and load scenes. May be from the server to client or from client to server Inherited Members IMessageSender.Send<T>(T, Int32) IMessageSender.Send(ArraySegment<Byte>, Int32) IMessageSender.Send<T>(T, INotifyCallBack) IVisibilityTracker.AddToVisList(NetworkIdentity) IVisibilityTracker.RemoveFromVisList(NetworkIdentity) IVisibilityTracker.RemoveAllVisibleObjects() IObjectOwner.OnIdentityChanged IObjectOwner.Identity IObjectOwner.HasCharacter IObjectOwner.RemoveOwnedObject(NetworkIdentity) IObjectOwner.AddOwnedObject(NetworkIdentity) IObjectOwner.DestroyOwnedObjects() IAuthenticatedObject.IsAuthenticated IAuthenticatedObject.AuthenticationData ISceneLoader.SceneIsReady Namespace : Mirage Assembly : Mirage.dll Syntax public interface INetworkPlayer : IMessageSender, IVisibilityTracker, IObjectOwner, IAuthenticatedObject, ISceneLoader Properties | Improve this Doc View Source Address Declaration IEndPoint Address { get; } Property Value Type Description IEndPoint | Improve this Doc View Source Connection Declaration IConnection Connection { get; } Property Value Type Description IConnection Methods | Improve this Doc View Source Disconnect() Declaration void Disconnect() | Improve this Doc View Source MarkAsDisconnected() Declaration void MarkAsDisconnected()"
  },
  "api/Mirage.INetworkSceneManager.html": {
    "href": "api/Mirage.INetworkSceneManager.html",
    "title": "Interface INetworkSceneManager",
    "keywords": "Interface INetworkSceneManager Namespace : Mirage Assembly : Mirage.dll Syntax public interface INetworkSceneManager Properties | Improve this Doc View Source OnClientFinishedSceneChange Event fires after the Client has completed its scene change. Declaration SceneChangeFinishedEvent OnClientFinishedSceneChange { get; } Property Value Type Description SceneChangeFinishedEvent | Improve this Doc View Source OnClientStartedSceneChange Event fires when the Client starts changing scene. Declaration SceneChangeStartedEvent OnClientStartedSceneChange { get; } Property Value Type Description SceneChangeStartedEvent | Improve this Doc View Source OnPlayerSceneReady Event fires On the server, after Client sends SceneReadyMessage to the server Declaration PlayerSceneChangeEvent OnPlayerSceneReady { get; } Property Value Type Description PlayerSceneChangeEvent | Improve this Doc View Source OnServerFinishedSceneChange Event fires after Server has completed scene change. Declaration SceneChangeFinishedEvent OnServerFinishedSceneChange { get; } Property Value Type Description SceneChangeFinishedEvent | Improve this Doc View Source OnServerStartedSceneChange Event fires before Server changes scene. Declaration SceneChangeStartedEvent OnServerStartedSceneChange { get; } Property Value Type Description SceneChangeStartedEvent Methods | Improve this Doc View Source ServerLoadSceneAdditively(String, IEnumerable<INetworkPlayer>, Boolean, Nullable<LoadSceneParameters>) Allows server to fully load in another scene on top of current active scene. Declaration void ServerLoadSceneAdditively(string scenePath, IEnumerable<INetworkPlayer> players, bool shouldClientLoadNormally = false, LoadSceneParameters? sceneLoadParameters = default(LoadSceneParameters? )) Parameters Type Name Description String scenePath The full path to the scene file or the name of the scene. IEnumerable < INetworkPlayer > players List of player's that are receiving the new scene load. Boolean shouldClientLoadNormally Should the clients load this additively too or load it full normal scene change. Nullable < LoadSceneParameters > sceneLoadParameters | Improve this Doc View Source ServerLoadSceneNormal(String, Nullable<LoadSceneParameters>) Allows server to fully load in a new scene and override current active scene. Declaration void ServerLoadSceneNormal(string scenePath, LoadSceneParameters? sceneLoadParameters = default(LoadSceneParameters? )) Parameters Type Name Description String scenePath The full path to the scene file or the name of the scene. Nullable < LoadSceneParameters > sceneLoadParameters | Improve this Doc View Source ServerUnloadSceneAdditively(Scene, IEnumerable<INetworkPlayer>) Allows server to fully unload a scene additively. Declaration void ServerUnloadSceneAdditively(Scene scene, IEnumerable<INetworkPlayer> players) Parameters Type Name Description Scene scene The scene handle which we want to unload additively. IEnumerable < INetworkPlayer > players List of player's that are receiving the new scene unload."
  },
  "api/Mirage.INetworkServer.html": {
    "href": "api/Mirage.INetworkServer.html",
    "title": "Interface INetworkServer",
    "keywords": "Interface INetworkServer Namespace : Mirage Assembly : Mirage.dll Syntax public interface INetworkServer Properties | Improve this Doc View Source Active Checks if the server has been started. This will be true after NetworkServer.Listen() has been called. Declaration bool Active { get; } Property Value Type Description Boolean | Improve this Doc View Source Authenticated Event fires once a new Client has passed Authentication to the Server. Declaration NetworkPlayerEvent Authenticated { get; } Property Value Type Description NetworkPlayerEvent | Improve this Doc View Source Connected Event fires once a new Client has connect to the Server. Declaration NetworkPlayerEvent Connected { get; } Property Value Type Description NetworkPlayerEvent | Improve this Doc View Source Disconnected Event fires once a Client has Disconnected from the Server. Declaration NetworkPlayerEvent Disconnected { get; } Property Value Type Description NetworkPlayerEvent | Improve this Doc View Source LocalClient The host client for this server Declaration INetworkClient LocalClient { get; } Property Value Type Description INetworkClient | Improve this Doc View Source LocalClientActive True if there is a local client connected to this server (host mode) Declaration bool LocalClientActive { get; } Property Value Type Description Boolean | Improve this Doc View Source LocalPlayer The connection to the host mode client (if any). Declaration INetworkPlayer LocalPlayer { get; } Property Value Type Description INetworkPlayer | Improve this Doc View Source MessageHandler Declaration MessageHandler MessageHandler { get; } Property Value Type Description MessageHandler | Improve this Doc View Source OnStartHost This is invoked when a host is started. StartHost has multiple signatures, but they all cause this hook to be called. Declaration IAddLateEvent OnStartHost { get; } Property Value Type Description IAddLateEvent | Improve this Doc View Source OnStopHost This is called when a host is stopped. Declaration IAddLateEvent OnStopHost { get; } Property Value Type Description IAddLateEvent | Improve this Doc View Source Players Declaration IReadOnlyCollection<INetworkPlayer> Players { get; } Property Value Type Description IReadOnlyCollection < INetworkPlayer > | Improve this Doc View Source Started This is invoked when a server is started - including when a host is started. Declaration IAddLateEvent Started { get; } Property Value Type Description IAddLateEvent | Improve this Doc View Source Stopped Declaration IAddLateEvent Stopped { get; } Property Value Type Description IAddLateEvent | Improve this Doc View Source SyncVarSender Declaration SyncVarSender SyncVarSender { get; } Property Value Type Description SyncVarSender | Improve this Doc View Source World Declaration NetworkWorld World { get; } Property Value Type Description NetworkWorld Methods | Improve this Doc View Source AddConnection(INetworkPlayer) Declaration void AddConnection(INetworkPlayer player) Parameters Type Name Description INetworkPlayer player | Improve this Doc View Source RemoveConnection(INetworkPlayer) Declaration void RemoveConnection(INetworkPlayer player) Parameters Type Name Description INetworkPlayer player | Improve this Doc View Source SendToAll<T>(T, Int32) Declaration void SendToAll<T>(T msg, int channelId = 0) Parameters Type Name Description T msg Int32 channelId Type Parameters Name Description T | Improve this Doc View Source Stop() Declaration void Stop()"
  },
  "api/Mirage.IObjectLocator.html": {
    "href": "api/Mirage.IObjectLocator.html",
    "title": "Interface IObjectLocator",
    "keywords": "Interface IObjectLocator An object that implements this interface can find objects by their net id This is used by readers when trying to deserialize gameobjects Namespace : Mirage Assembly : Mirage.dll Syntax public interface IObjectLocator Methods | Improve this Doc View Source TryGetIdentity(UInt32, out NetworkIdentity) Finds a network identity by id Declaration bool TryGetIdentity(uint netId, out NetworkIdentity identity) Parameters Type Name Description UInt32 netId the id of the object to find NetworkIdentity identity The NetworkIdentity matching the netId or null if none is found Returns Type Description Boolean true if identity is found and is not null"
  },
  "api/Mirage.IObjectOwner.html": {
    "href": "api/Mirage.IObjectOwner.html",
    "title": "Interface IObjectOwner",
    "keywords": "Interface IObjectOwner An object that can own networked objects Namespace : Mirage Assembly : Mirage.dll Syntax public interface IObjectOwner Properties | Improve this Doc View Source HasCharacter Declaration bool HasCharacter { get; } Property Value Type Description Boolean | Improve this Doc View Source Identity Declaration NetworkIdentity Identity { get; set; } Property Value Type Description NetworkIdentity Methods | Improve this Doc View Source AddOwnedObject(NetworkIdentity) Declaration void AddOwnedObject(NetworkIdentity networkIdentity) Parameters Type Name Description NetworkIdentity networkIdentity | Improve this Doc View Source DestroyOwnedObjects() Declaration void DestroyOwnedObjects() | Improve this Doc View Source RemoveOwnedObject(NetworkIdentity) Declaration void RemoveOwnedObject(NetworkIdentity networkIdentity) Parameters Type Name Description NetworkIdentity networkIdentity Events | Improve this Doc View Source OnIdentityChanged Declaration event Action<NetworkIdentity> OnIdentityChanged Event Type Type Description Action < NetworkIdentity >"
  },
  "api/Mirage.ISceneLoader.html": {
    "href": "api/Mirage.ISceneLoader.html",
    "title": "Interface ISceneLoader",
    "keywords": "Interface ISceneLoader Namespace : Mirage Assembly : Mirage.dll Syntax public interface ISceneLoader Properties | Improve this Doc View Source SceneIsReady Scene is fully loaded and we now can do things with player. Declaration bool SceneIsReady { get; set; } Property Value Type Description Boolean"
  },
  "api/Mirage.IServerObjectManager.html": {
    "href": "api/Mirage.IServerObjectManager.html",
    "title": "Interface IServerObjectManager",
    "keywords": "Interface IServerObjectManager Namespace : Mirage Assembly : Mirage.dll Syntax public interface IServerObjectManager Methods | Improve this Doc View Source AddCharacter(INetworkPlayer, NetworkIdentity) Declaration void AddCharacter(INetworkPlayer player, NetworkIdentity identity) Parameters Type Name Description INetworkPlayer player NetworkIdentity identity | Improve this Doc View Source AddCharacter(INetworkPlayer, GameObject) Declaration void AddCharacter(INetworkPlayer player, GameObject character) Parameters Type Name Description INetworkPlayer player GameObject character | Improve this Doc View Source AddCharacter(INetworkPlayer, GameObject, Int32) Declaration void AddCharacter(INetworkPlayer player, GameObject character, int prefabHash) Parameters Type Name Description INetworkPlayer player GameObject character Int32 prefabHash | Improve this Doc View Source Destroy(GameObject, Boolean) Declaration void Destroy(GameObject obj, bool destroyServerObject = true) Parameters Type Name Description GameObject obj Boolean destroyServerObject | Improve this Doc View Source DestroyCharacter(INetworkPlayer, Boolean) Declaration void DestroyCharacter(INetworkPlayer player, bool destroyServerObject = true) Parameters Type Name Description INetworkPlayer player Boolean destroyServerObject | Improve this Doc View Source RemoveCharacter(INetworkPlayer, Boolean) Declaration void RemoveCharacter(INetworkPlayer player, bool keepAuthority = false) Parameters Type Name Description INetworkPlayer player Boolean keepAuthority | Improve this Doc View Source ReplaceCharacter(INetworkPlayer, NetworkIdentity, Boolean) Declaration void ReplaceCharacter(INetworkPlayer player, NetworkIdentity identity, bool keepAuthority = false) Parameters Type Name Description INetworkPlayer player NetworkIdentity identity Boolean keepAuthority | Improve this Doc View Source ReplaceCharacter(INetworkPlayer, GameObject, Boolean) Declaration void ReplaceCharacter(INetworkPlayer player, GameObject character, bool keepAuthority = false) Parameters Type Name Description INetworkPlayer player GameObject character Boolean keepAuthority | Improve this Doc View Source ReplaceCharacter(INetworkPlayer, GameObject, Int32, Boolean) Declaration void ReplaceCharacter(INetworkPlayer player, GameObject character, int prefabHash, bool keepAuthority = false) Parameters Type Name Description INetworkPlayer player GameObject character Int32 prefabHash Boolean keepAuthority | Improve this Doc View Source Spawn(NetworkIdentity) Declaration void Spawn(NetworkIdentity identity) Parameters Type Name Description NetworkIdentity identity | Improve this Doc View Source Spawn(NetworkIdentity, INetworkPlayer) Declaration void Spawn(NetworkIdentity identity, INetworkPlayer owner) Parameters Type Name Description NetworkIdentity identity INetworkPlayer owner | Improve this Doc View Source Spawn(GameObject, INetworkPlayer) Declaration void Spawn(GameObject obj, INetworkPlayer owner = null) Parameters Type Name Description GameObject obj INetworkPlayer owner | Improve this Doc View Source Spawn(GameObject, Int32, INetworkPlayer) Declaration void Spawn(GameObject obj, int prefabHash, INetworkPlayer owner = null) Parameters Type Name Description GameObject obj Int32 prefabHash INetworkPlayer owner | Improve this Doc View Source Spawn(GameObject, GameObject) Declaration void Spawn(GameObject obj, GameObject ownerObject) Parameters Type Name Description GameObject obj GameObject ownerObject | Improve this Doc View Source SpawnObjects() Declaration void SpawnObjects()"
  },
  "api/Mirage.IVisibilityTracker.html": {
    "href": "api/Mirage.IVisibilityTracker.html",
    "title": "Interface IVisibilityTracker",
    "keywords": "Interface IVisibilityTracker An object that can observe NetworkIdentities. this is useful for interest management Namespace : Mirage Assembly : Mirage.dll Syntax public interface IVisibilityTracker Methods | Improve this Doc View Source AddToVisList(NetworkIdentity) Declaration void AddToVisList(NetworkIdentity identity) Parameters Type Name Description NetworkIdentity identity | Improve this Doc View Source RemoveAllVisibleObjects() Declaration void RemoveAllVisibleObjects() | Improve this Doc View Source RemoveFromVisList(NetworkIdentity) Declaration void RemoveFromVisList(NetworkIdentity identity) Parameters Type Name Description NetworkIdentity identity"
  },
  "api/Mirage.LobbyReady.html": {
    "href": "api/Mirage.LobbyReady.html",
    "title": "Class LobbyReady",
    "keywords": "Class LobbyReady Inheritance Object Object Component Behaviour MonoBehaviour LobbyReady Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.Components.dll Syntax public class LobbyReady : MonoBehaviour Fields | Improve this Doc View Source ObjectReadyList Declaration public List<ObjectReady> ObjectReadyList Field Value Type Description List < ObjectReady > Methods | Improve this Doc View Source SendToReady<T>(NetworkIdentity, T, Boolean, Int32) Declaration public void SendToReady<T>(NetworkIdentity identity, T msg, bool includeOwner = true, int channelId = 0) Parameters Type Name Description NetworkIdentity identity T msg Boolean includeOwner Int32 channelId Type Parameters Name Description T | Improve this Doc View Source SetAllClientsNotReady() Declaration public void SetAllClientsNotReady()"
  },
  "api/Mirage.LocalPlayerAttribute.html": {
    "href": "api/Mirage.LocalPlayerAttribute.html",
    "title": "Class LocalPlayerAttribute",
    "keywords": "Class LocalPlayerAttribute Prevents nonlocal players from running this method. Can only be used inside a NetworkBehaviour Inheritance Object Attribute LocalPlayerAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage Assembly : Mirage.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class LocalPlayerAttribute : Attribute Fields | Improve this Doc View Source error If true, when the method is called from a client, it throws an error If false, no error is thrown, but the method won't execute useful for unity built in methods such as Await, Update, Start, etc. Declaration public bool error Field Value Type Description Boolean"
  },
  "api/Mirage.Logging.html": {
    "href": "api/Mirage.Logging.html",
    "title": "Namespace Mirage.Logging",
    "keywords": "Namespace Mirage.Logging Classes ILoggerExtensions LogFactory LogSettings Used to load LogSettings in build LogSettingsExtensions LogSettingsSO LogSettingsSO.LoggerSettings"
  },
  "api/Mirage.Logging.ILoggerExtensions.html": {
    "href": "api/Mirage.Logging.ILoggerExtensions.html",
    "title": "Class ILoggerExtensions",
    "keywords": "Class ILoggerExtensions Inheritance Object ILoggerExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Logging Assembly : Mirage.dll Syntax public static class ILoggerExtensions Methods | Improve this Doc View Source Assert(ILogger, Boolean) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void Assert(this ILogger logger, bool condition) Parameters Type Name Description ILogger logger Boolean condition | Improve this Doc View Source Assert(ILogger, Boolean, Object) Declaration [Conditional(\"UNITY_ASSERTIONS\")] public static void Assert(this ILogger logger, bool condition, object message) Parameters Type Name Description ILogger logger Boolean condition Object message | Improve this Doc View Source ErrorEnabled(ILogger) Declaration public static bool ErrorEnabled(this ILogger logger) Parameters Type Name Description ILogger logger Returns Type Description Boolean | Improve this Doc View Source LogEnabled(ILogger) Declaration public static bool LogEnabled(this ILogger logger) Parameters Type Name Description ILogger logger Returns Type Description Boolean | Improve this Doc View Source LogError(ILogger, Object) Declaration public static void LogError(this ILogger logger, object message) Parameters Type Name Description ILogger logger Object message | Improve this Doc View Source LogWarning(ILogger, Object) Declaration public static void LogWarning(this ILogger logger, object message) Parameters Type Name Description ILogger logger Object message | Improve this Doc View Source WarnEnabled(ILogger) Declaration public static bool WarnEnabled(this ILogger logger) Parameters Type Name Description ILogger logger Returns Type Description Boolean"
  },
  "api/Mirage.Logging.LogFactory.html": {
    "href": "api/Mirage.Logging.LogFactory.html",
    "title": "Class LogFactory",
    "keywords": "Class LogFactory Inheritance Object LogFactory Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Logging Assembly : Mirage.dll Syntax public static class LogFactory Properties | Improve this Doc View Source Loggers Declaration public static IReadOnlyDictionary<string, ILogger> Loggers { get; } Property Value Type Description IReadOnlyDictionary < String , ILogger > Methods | Improve this Doc View Source GetLogger(String, LogType) Declaration public static ILogger GetLogger(string loggerName, LogType defaultLogLevel = LogType.Warning) Parameters Type Name Description String loggerName LogType defaultLogLevel Returns Type Description ILogger | Improve this Doc View Source GetLogger(Type, LogType) Declaration public static ILogger GetLogger(Type type, LogType defaultLogLevel = LogType.Warning) Parameters Type Name Description Type type LogType defaultLogLevel Returns Type Description ILogger | Improve this Doc View Source GetLogger<T>(LogType) Declaration public static ILogger GetLogger<T>(LogType defaultLogLevel = LogType.Warning) Parameters Type Name Description LogType defaultLogLevel Returns Type Description ILogger Type Parameters Name Description T | Improve this Doc View Source ReplaceLogHandler(ILogHandler) Replacing log handler for all existing loggers and sets defaultLogHandler for new loggers Declaration public static void ReplaceLogHandler(ILogHandler logHandler) Parameters Type Name Description ILogHandler logHandler"
  },
  "api/Mirage.Logging.LogSettings.html": {
    "href": "api/Mirage.Logging.LogSettings.html",
    "title": "Class LogSettings",
    "keywords": "Class LogSettings Used to load LogSettings in build Inheritance Object Object Component Behaviour MonoBehaviour LogSettings Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage.Logging Assembly : Mirage.dll Syntax [DisallowMultipleComponent] [AddComponentMenu(\"Network/LogSettings\")] [HelpURL(\"https://miragenet.github.io/Mirage/Articles/Components/NetworkLogSettings.html\")] public class LogSettings : MonoBehaviour"
  },
  "api/Mirage.Logging.LogSettingsExtensions.html": {
    "href": "api/Mirage.Logging.LogSettingsExtensions.html",
    "title": "Class LogSettingsExtensions",
    "keywords": "Class LogSettingsExtensions Inheritance Object LogSettingsExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Logging Assembly : Mirage.dll Syntax public static class LogSettingsExtensions Methods | Improve this Doc View Source LoadIntoLogFactory(LogSettingsSO) Declaration public static void LoadIntoLogFactory(this LogSettingsSO settings) Parameters Type Name Description LogSettingsSO settings | Improve this Doc View Source SaveFromLogFactory(LogSettingsSO) Declaration public static void SaveFromLogFactory(this LogSettingsSO settings) Parameters Type Name Description LogSettingsSO settings"
  },
  "api/Mirage.Logging.LogSettingsSO.html": {
    "href": "api/Mirage.Logging.LogSettingsSO.html",
    "title": "Class LogSettingsSO",
    "keywords": "Class LogSettingsSO Inheritance Object Object ScriptableObject LogSettingsSO Inherited Members ScriptableObject.SetDirty() ScriptableObject.CreateInstance(String) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage.Logging Assembly : Mirage.dll Syntax public class LogSettingsSO : ScriptableObject Fields | Improve this Doc View Source LogLevels Declaration public List<LogSettingsSO.LoggerSettings> LogLevels Field Value Type Description List < LogSettingsSO.LoggerSettings > Extension Methods LogSettingsExtensions.SaveFromLogFactory(LogSettingsSO) LogSettingsExtensions.LoadIntoLogFactory(LogSettingsSO)"
  },
  "api/Mirage.Logging.LogSettingsSO.LoggerSettings.html": {
    "href": "api/Mirage.Logging.LogSettingsSO.LoggerSettings.html",
    "title": "Class LogSettingsSO.LoggerSettings",
    "keywords": "Class LogSettingsSO.LoggerSettings Inheritance Object LogSettingsSO.LoggerSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Logging Assembly : Mirage.dll Syntax [Serializable] public class LoggerSettings Constructors | Improve this Doc View Source LoggerSettings(String, String, LogType) Declaration public LoggerSettings(string name, string Namespace, LogType level) Parameters Type Name Description String name String Namespace LogType level | Improve this Doc View Source LoggerSettings(String, LogType) Declaration public LoggerSettings(string fullname, LogType level) Parameters Type Name Description String fullname LogType level Fields | Improve this Doc View Source logLevel Declaration public LogType logLevel Field Value Type Description LogType | Improve this Doc View Source Name Declaration public string Name Field Value Type Description String | Improve this Doc View Source Namespace Declaration public string Namespace Field Value Type Description String Properties | Improve this Doc View Source FullName Declaration public string FullName { get; } Property Value Type Description String"
  },
  "api/Mirage.MessageDelegate-1.html": {
    "href": "api/Mirage.MessageDelegate-1.html",
    "title": "Delegate MessageDelegate<T>",
    "keywords": "Delegate MessageDelegate<T> Namespace : Mirage Assembly : Mirage.dll Syntax public delegate void MessageDelegate<in T>(T message); Parameters Type Name Description T message Type Parameters Name Description T"
  },
  "api/Mirage.MessageDelegateWithPlayer-1.html": {
    "href": "api/Mirage.MessageDelegateWithPlayer-1.html",
    "title": "Delegate MessageDelegateWithPlayer<T>",
    "keywords": "Delegate MessageDelegateWithPlayer<T> Namespace : Mirage Assembly : Mirage.dll Syntax public delegate void MessageDelegateWithPlayer<in T>(INetworkPlayer player, T message); Parameters Type Name Description INetworkPlayer player T message Type Parameters Name Description T"
  },
  "api/Mirage.MessageHandler.html": {
    "href": "api/Mirage.MessageHandler.html",
    "title": "Class MessageHandler",
    "keywords": "Class MessageHandler Inheritance Object MessageHandler Implements IMessageReceiver Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage Assembly : Mirage.dll Syntax public class MessageHandler : IMessageReceiver Constructors | Improve this Doc View Source MessageHandler(IObjectLocator, Boolean) Declaration public MessageHandler(IObjectLocator objectLocator, bool disconnectOnException) Parameters Type Name Description IObjectLocator objectLocator Boolean disconnectOnException Methods | Improve this Doc View Source ClearHandlers() Clear all registered callback handlers. Declaration public void ClearHandlers() | Improve this Doc View Source HandleMessage(INetworkPlayer, ArraySegment<Byte>) Declaration public void HandleMessage(INetworkPlayer player, ArraySegment<byte> packet) Parameters Type Name Description INetworkPlayer player ArraySegment < Byte > packet | Improve this Doc View Source RegisterHandler<T>(MessageDelegate<T>) Register a handler for a particular message type. There are several system message types which you can add handlers for. You can also add your own message types. Declaration public void RegisterHandler<T>(MessageDelegate<T> handler) Parameters Type Name Description MessageDelegate <T> handler Function handler which will be invoked for when this message type is received. Type Parameters Name Description T Message type | Improve this Doc View Source RegisterHandler<T>(MessageDelegateWithPlayer<T>) Register a handler for a particular message type. There are several system message types which you can add handlers for. You can also add your own message types. Declaration public void RegisterHandler<T>(MessageDelegateWithPlayer<T> handler) Parameters Type Name Description MessageDelegateWithPlayer <T> handler Function handler which will be invoked for when this message type is received. Type Parameters Name Description T Message type | Improve this Doc View Source UnregisterHandler<T>() Unregister a handler for a particular message type. Note: Messages dont need to be unregister when server or client stops as MessageHandler will be re-created next time server or client starts Declaration public void UnregisterHandler<T>() Type Parameters Name Description T Message type Implements IMessageReceiver"
  },
  "api/Mirage.MethodInvocationException.html": {
    "href": "api/Mirage.MethodInvocationException.html",
    "title": "Class MethodInvocationException",
    "keywords": "Class MethodInvocationException Exception thrown if a guarded method is invoked incorrectly Inheritance Object Exception MethodInvocationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax [Serializable] public class MethodInvocationException : Exception, ISerializable Constructors | Improve this Doc View Source MethodInvocationException() Initializes a new instance of the MethodInvocationException class Declaration public MethodInvocationException() | Improve this Doc View Source MethodInvocationException(SerializationInfo, StreamingContext) Declaration protected MethodInvocationException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context | Improve this Doc View Source MethodInvocationException(String) Initializes a new instance of the MethodInvocationException class Declaration public MethodInvocationException(string message) Parameters Type Name Description String message A String that describes the exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Mirage.NetworkAnimator.html": {
    "href": "api/Mirage.NetworkAnimator.html",
    "title": "Class NetworkAnimator",
    "keywords": "Class NetworkAnimator A component to synchronize animation states for networked objects. Inheritance Object Object Component Behaviour MonoBehaviour NetworkBehaviour NetworkAnimator Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.IsServer NetworkBehaviour.IsClient NetworkBehaviour.IsLocalClient NetworkBehaviour.IsLocalPlayer NetworkBehaviour.IsServerOnly NetworkBehaviour.IsClientOnly NetworkBehaviour.HasAuthority NetworkBehaviour.NetId NetworkBehaviour.Server NetworkBehaviour.ServerObjectManager NetworkBehaviour.Client NetworkBehaviour.ClientObjectManager NetworkBehaviour.Owner NetworkBehaviour.World NetworkBehaviour.NetworkTime NetworkBehaviour.SyncVarDirtyBits NetworkBehaviour.GetSyncVarHookGuard(UInt64) NetworkBehaviour.SetSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.Identity NetworkBehaviour.COMPONENT_INDEX_NOT_FOUND NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(ISyncObject) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.StillDirty() NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.GetRpcCount() NetworkBehaviour.remoteCallCollection MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.Components.dll Syntax [AddComponentMenu(\"Network/NetworkAnimator\")] [RequireComponent(typeof(NetworkIdentity))] [HelpURL(\"https://miragenet.github.io/Mirage/Articles/Components/NetworkAnimator.html\")] public class NetworkAnimator : NetworkBehaviour Remarks The animation of game objects can be networked by this component. There are two models of authority for networked movement: If the object has authority on the client, then it should be animated locally on the owning client. The animation state information will be sent from the owning client to the server, then broadcast to all of the other clients. This is common for player objects. If the object has authority on the server, then it should be animated on the server and state information will be sent to all clients. This is common for objects not related to a specific client, such as an enemy unit. The NetworkAnimator synchronizes all animation parameters of the selected Animator. It does not automatically synchronize triggers. The function SetTrigger can by used by an object with authority to fire an animation trigger on other clients. Fields | Improve this Doc View Source Animator The animator component to synchronize. Declaration [FormerlySerializedAs(\"m_Animator\")] [FormerlySerializedAs(\"animator\")] [Header(\"Animator\")] [Tooltip(\"Animator that will have parameters synchronized\")] public Animator Animator Field Value Type Description Animator | Improve this Doc View Source ClientAuthority Declaration [Header(\"Authority\")] [FormerlySerializedAs(\"clientAuthority\")] [Tooltip(\"Set to true if animations come from owner client, set to false if animations always come from server\")] public bool ClientAuthority Field Value Type Description Boolean Methods | Improve this Doc View Source OnDeserialize(NetworkReader, Boolean) Custom Deserialization Declaration public override void OnDeserialize(NetworkReader reader, bool initialState) Parameters Type Name Description NetworkReader reader Boolean initialState Overrides NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) | Improve this Doc View Source OnSerialize(NetworkWriter, Boolean) Custom Serialization Declaration public override bool OnSerialize(NetworkWriter writer, bool initialState) Parameters Type Name Description NetworkWriter writer Boolean initialState Returns Type Description Boolean Overrides NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) | Improve this Doc View Source ResetTrigger(Int32) Causes an animation trigger to be reset for a networked object. Declaration public void ResetTrigger(int hash) Parameters Type Name Description Int32 hash Hash id of trigger (from the Animator). | Improve this Doc View Source ResetTrigger(String) Causes an animation trigger to be reset for a networked object. If local authority is set, and this is called from the client, then the trigger will be reset on the server and all clients. If not, then this is called on the server, and the trigger will be reset on all clients. Declaration public void ResetTrigger(string triggerName) Parameters Type Name Description String triggerName Name of trigger. | Improve this Doc View Source SetTrigger(Int32) Causes an animation trigger to be invoked for a networked object. Declaration public void SetTrigger(int hash) Parameters Type Name Description Int32 hash Hash id of trigger (from the Animator). | Improve this Doc View Source SetTrigger(String) Causes an animation trigger to be invoked for a networked object. If local authority is set, and this is called from the client, then the trigger will be invoked on the server and all clients. If not, then this is called on the server, and the trigger will be called on all clients. Declaration public void SetTrigger(string triggerName) Parameters Type Name Description String triggerName Name of trigger."
  },
  "api/Mirage.NetworkAuthenticator.html": {
    "href": "api/Mirage.NetworkAuthenticator.html",
    "title": "Class NetworkAuthenticator",
    "keywords": "Class NetworkAuthenticator Base class for implementing component-based authentication during the Connect phase Inheritance Object Object Component Behaviour MonoBehaviour NetworkAuthenticator BasicAuthenticator TimeoutAuthenticator Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax [HelpURL(\"https://miragenet.github.io/Mirage/Articles/Components/Authenticators/index.html\")] public abstract class NetworkAuthenticator : MonoBehaviour Methods | Improve this Doc View Source ClientAccept(INetworkPlayer) Call this when player has been accepted on the client. Declaration protected void ClientAccept(INetworkPlayer player) Parameters Type Name Description INetworkPlayer player | Improve this Doc View Source ClientAuthenticate(INetworkPlayer) Authenticate the player on the Client. Called by the client after connected to the server Declaration public abstract void ClientAuthenticate(INetworkPlayer player) Parameters Type Name Description INetworkPlayer player | Improve this Doc View Source ClientReject(INetworkPlayer) Call this when player has been rejected on the client. This will disconnect the player. Declaration protected void ClientReject(INetworkPlayer player) Parameters Type Name Description INetworkPlayer player | Improve this Doc View Source ClientSetup(NetworkClient) Used to set up authenticator on client Can be used to register message handlers before any player connects Declaration public abstract void ClientSetup(NetworkClient client) Parameters Type Name Description NetworkClient client | Improve this Doc View Source ServerAccept(INetworkPlayer) Call this when player has been accepted on the server Declaration protected void ServerAccept(INetworkPlayer player) Parameters Type Name Description INetworkPlayer player | Improve this Doc View Source ServerAuthenticate(INetworkPlayer) Authenticate the player on the Server. Called by the server when new client connects Declaration public abstract void ServerAuthenticate(INetworkPlayer player) Parameters Type Name Description INetworkPlayer player | Improve this Doc View Source ServerReject(INetworkPlayer) Call this when player has been rejected on the server. This will disconnect the player. Declaration protected void ServerReject(INetworkPlayer player) Parameters Type Name Description INetworkPlayer player | Improve this Doc View Source ServerSetup(NetworkServer) Used to set up authenticator on server Can be used to register message handlers before any players connect Declaration public abstract void ServerSetup(NetworkServer server) Parameters Type Name Description NetworkServer server Events | Improve this Doc View Source OnClientAuthenticated Notify subscribers on the client when the client is authenticated Declaration public event Action<INetworkPlayer> OnClientAuthenticated Event Type Type Description Action < INetworkPlayer > | Improve this Doc View Source OnServerAuthenticated Notify subscribers on the server when a client is authenticated Declaration public event Action<INetworkPlayer> OnServerAuthenticated Event Type Type Description Action < INetworkPlayer >"
  },
  "api/Mirage.NetworkBehaviorSerializers.html": {
    "href": "api/Mirage.NetworkBehaviorSerializers.html",
    "title": "Class NetworkBehaviorSerializers",
    "keywords": "Class NetworkBehaviorSerializers Inheritance Object NetworkBehaviorSerializers Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage Assembly : Mirage.dll Syntax public static class NetworkBehaviorSerializers Methods | Improve this Doc View Source ReadNetworkBehaviourSyncVar(NetworkReader) Declaration public static NetworkBehaviorSyncvar ReadNetworkBehaviourSyncVar(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description NetworkBehaviorSyncvar | Improve this Doc View Source WriteNetworkBehaviorSyncVar(NetworkWriter, NetworkBehaviorSyncvar) Declaration public static void WriteNetworkBehaviorSyncVar(this NetworkWriter writer, NetworkBehaviorSyncvar id) Parameters Type Name Description NetworkWriter writer NetworkBehaviorSyncvar id"
  },
  "api/Mirage.NetworkBehaviorSyncvar.html": {
    "href": "api/Mirage.NetworkBehaviorSyncvar.html",
    "title": "Struct NetworkBehaviorSyncvar",
    "keywords": "Struct NetworkBehaviorSyncvar backing struct for a NetworkIdentity when used as a syncvar the weaver will replace the syncvar with this struct. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax public struct NetworkBehaviorSyncvar Properties | Improve this Doc View Source Value Declaration public NetworkBehaviour Value { get; set; } Property Value Type Description NetworkBehaviour"
  },
  "api/Mirage.NetworkBehaviour.html": {
    "href": "api/Mirage.NetworkBehaviour.html",
    "title": "Class NetworkBehaviour",
    "keywords": "Class NetworkBehaviour Base class which should be inherited by scripts which contain networking functionality. Inheritance Object Object Component Behaviour MonoBehaviour NetworkBehaviour NetworkLerpRigidbody NetworkRigidbody NetworkTransformBase NetworkAnimator NetworkTransformBase NetworkVisibility ObjectReady Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax [AddComponentMenu(\"\")] [HelpURL(\"https://miragenet.github.io/Mirage/Articles/Guides/GameObjects/NetworkBehaviour.html\")] public abstract class NetworkBehaviour : MonoBehaviour Remarks This is a MonoBehaviour class so scripts which need to use the networking feature should inherit this class instead of MonoBehaviour. It allows you to invoke networked actions, receive various callbacks, and automatically synchronize state from server-to-client. The NetworkBehaviour component requires a NetworkIdentity on the same game object or any of its parents. There can be multiple NetworkBehaviours on a single game object. For an object with sub-components in a hierarchy, the NetworkIdentity must be on the root object, and NetworkBehaviour scripts can be on the root object or any of its children. Some of the built-in components of the networking system are derived from NetworkBehaviour, including NetworkTransport, NetworkAnimator and NetworkProximityChecker. Constructors | Improve this Doc View Source NetworkBehaviour() Declaration public NetworkBehaviour() Fields | Improve this Doc View Source COMPONENT_INDEX_NOT_FOUND Declaration public const int COMPONENT_INDEX_NOT_FOUND = -1 Field Value Type Description Int32 | Improve this Doc View Source remoteCallCollection Declaration protected RemoteCallCollection remoteCallCollection Field Value Type Description RemoteCallCollection | Improve this Doc View Source syncInterval sync interval for OnSerialize (in seconds) Declaration [Tooltip(\"Time in seconds until next change is synchronized to the client. '0' means send immediately if changed. '0.5' means only send changes every 500ms.\\n(This is for state synchronization like SyncVars, SyncLists, OnSerialize. Not for Cmds, Rpcs, etc.)\")] [Range(0F, 2F)] [HideInInspector] public float syncInterval Field Value Type Description Single | Improve this Doc View Source syncMode sync mode for OnSerialize Declaration [HideInInspector] public SyncMode syncMode Field Value Type Description SyncMode | Improve this Doc View Source syncObjects objects that can synchronize themselves, such as synclists Declaration protected readonly List<ISyncObject> syncObjects Field Value Type Description List < ISyncObject > Properties | Improve this Doc View Source Client The NetworkClient associated to this object. Declaration public INetworkClient Client { get; } Property Value Type Description INetworkClient | Improve this Doc View Source ClientObjectManager Quick Reference to the NetworkIdentities ClientObjectManager. Present only for instances instances. Declaration public ClientObjectManager ClientObjectManager { get; } Property Value Type Description ClientObjectManager | Improve this Doc View Source ComponentIndex Returns the index of the component on this object Declaration public int ComponentIndex { get; } Property Value Type Description Int32 | Improve this Doc View Source HasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. The HasAuthority value on the NetworkIdentity determines how authority is determined. For most objects, authority is held by the server. For objects with HasAuthority set, authority is held by the client of that player. Declaration public bool HasAuthority { get; } Property Value Type Description Boolean | Improve this Doc View Source Identity Returns the NetworkIdentity of this object Declaration public NetworkIdentity Identity { get; } Property Value Type Description NetworkIdentity | Improve this Doc View Source IsClient Returns true if running as a client and this object was spawned by a server. Declaration public bool IsClient { get; } Property Value Type Description Boolean | Improve this Doc View Source IsClientOnly True if this object exists on a client that is not also acting as a server Declaration public bool IsClientOnly { get; } Property Value Type Description Boolean | Improve this Doc View Source IsLocalClient Returns true if we're on host mode. Declaration public bool IsLocalClient { get; } Property Value Type Description Boolean | Improve this Doc View Source IsLocalPlayer This returns true if this object is the one that represents the player on the local machine. In multiplayer games, there are multiple instances of the Player object. The client needs to know which one is for \"themselves\" so that only that player processes input and potentially has a camera attached. The IsLocalPlayer function will return true only for the player instance that belongs to the player on the local machine, so it can be used to filter out input for non-local players. Declaration public bool IsLocalPlayer { get; } Property Value Type Description Boolean | Improve this Doc View Source IsServer Returns true if this object is active on an active server. This is only true if the object has been spawned. This is different from NetworkServer.active, which is true if the server itself is active rather than this object being active. Declaration public bool IsServer { get; } Property Value Type Description Boolean | Improve this Doc View Source IsServerOnly True if this object only exists on the server Declaration public bool IsServerOnly { get; } Property Value Type Description Boolean | Improve this Doc View Source NetId The unique network Id of this object. This is assigned at runtime by the network server and will be unique for all objects for that network session. Declaration public uint NetId { get; } Property Value Type Description UInt32 | Improve this Doc View Source NetworkTime Returns the appropriate NetworkTime instance based on if this NetworkBehaviour is running as a Server or Client. Declaration public NetworkTime NetworkTime { get; } Property Value Type Description NetworkTime | Improve this Doc View Source Owner The NetworkPlayer associated with this NetworkIdentity This is only valid for player objects on the server. Declaration public INetworkPlayer Owner { get; } Property Value Type Description INetworkPlayer | Improve this Doc View Source Server The NetworkServer associated to this object. Declaration public INetworkServer Server { get; } Property Value Type Description INetworkServer | Improve this Doc View Source ServerObjectManager Quick Reference to the NetworkIdentities ServerObjectManager. Present only for server/host instances. Declaration public ServerObjectManager ServerObjectManager { get; } Property Value Type Description ServerObjectManager | Improve this Doc View Source SyncVarDirtyBits Declaration protected ulong SyncVarDirtyBits { get; } Property Value Type Description UInt64 | Improve this Doc View Source World Declaration public NetworkWorld World { get; } Property Value Type Description NetworkWorld Methods | Improve this Doc View Source ClearAllDirtyBits() This clears all the dirty bits that were set on this script by SetDirtyBits(); This is automatically invoked when an update is sent for this object, but can be called manually as well. Declaration public void ClearAllDirtyBits() | Improve this Doc View Source DeserializeSyncVars(NetworkReader, Boolean) Declaration public virtual void DeserializeSyncVars(NetworkReader reader, bool initialState) Parameters Type Name Description NetworkReader reader Boolean initialState | Improve this Doc View Source GetRpcCount() Declaration protected virtual int GetRpcCount() Returns Type Description Int32 | Improve this Doc View Source GetSyncVarHookGuard(UInt64) Declaration protected bool GetSyncVarHookGuard(ulong dirtyBit) Parameters Type Name Description UInt64 dirtyBit Returns Type Description Boolean | Improve this Doc View Source InitSyncObject(ISyncObject) Declaration protected void InitSyncObject(ISyncObject syncObject) Parameters Type Name Description ISyncObject syncObject | Improve this Doc View Source IsDirty() Declaration public bool IsDirty() Returns Type Description Boolean | Improve this Doc View Source OnDeserialize(NetworkReader, Boolean) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize(). Declaration public virtual void OnDeserialize(NetworkReader reader, bool initialState) Parameters Type Name Description NetworkReader reader Reader to read from the stream. Boolean initialState True if being sent initial state. | Improve this Doc View Source OnSerialize(NetworkWriter, Boolean) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize(). Declaration public virtual bool OnSerialize(NetworkWriter writer, bool initialState) Parameters Type Name Description NetworkWriter writer Writer to use to write to the stream. Boolean initialState If this is being called to send initial state. Returns Type Description Boolean True if data was written. Remarks The initialState flag is useful to differentiate between the first time an object is serialized and when incremental updates can be sent. The first time an object is sent to a client, it must include a full state snapshot, but subsequent updates can save on bandwidth by including only incremental changes. Note that SyncVar hook functions are not called when initialState is true, only for incremental updates. If a class has SyncVars, then an implementation of this function and OnDeserialize() are added automatically to the class. So a class that has SyncVars cannot also have custom serialization functions. The OnSerialize function should return true to indicate that an update should be sent. If it returns true, then the dirty bits for that script are set to zero, if it returns false then the dirty bits are not changed. This allows multiple changes to a script to be accumulated over time and sent when the system is ready, instead of every frame. | Improve this Doc View Source SerializeObjectsAll(NetworkWriter) Declaration public bool SerializeObjectsAll(NetworkWriter writer) Parameters Type Name Description NetworkWriter writer Returns Type Description Boolean | Improve this Doc View Source SerializeObjectsDelta(NetworkWriter) Declaration public bool SerializeObjectsDelta(NetworkWriter writer) Parameters Type Name Description NetworkWriter writer Returns Type Description Boolean | Improve this Doc View Source SerializeSyncVars(NetworkWriter, Boolean) Declaration public virtual bool SerializeSyncVars(NetworkWriter writer, bool initialState) Parameters Type Name Description NetworkWriter writer Boolean initialState Returns Type Description Boolean | Improve this Doc View Source SetDirtyBit(UInt64) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 Declaration public void SetDirtyBit(ulong dirtyBit) Parameters Type Name Description UInt64 dirtyBit Bit mask to set. | Improve this Doc View Source SetSyncVarHookGuard(UInt64, Boolean) Declaration protected void SetSyncVarHookGuard(ulong dirtyBit, bool value) Parameters Type Name Description UInt64 dirtyBit Boolean value | Improve this Doc View Source StillDirty() Declaration public bool StillDirty() Returns Type Description Boolean | Improve this Doc View Source SyncVarEqual<T>(T, T) Declaration protected bool SyncVarEqual<T>(T value, T fieldValue) Parameters Type Name Description T value T fieldValue Returns Type Description Boolean Type Parameters Name Description T"
  },
  "api/Mirage.NetworkClient.html": {
    "href": "api/Mirage.NetworkClient.html",
    "title": "Class NetworkClient",
    "keywords": "Class NetworkClient This is a network client class used by the networking system. It contains a NetworkConnection that is used to connect to a network server. The NetworkClient handle connection state, messages handlers, and connection configuration. There can be many NetworkClient instances in a process at a time, but only one that is connected to a game server ( NetworkServer ) that uses spawned objects. NetworkClient has an internal update function where it handles events from the transport layer. This includes asynchronous connect events, disconnect events and incoming data from a server. Inheritance Object Object Component Behaviour MonoBehaviour NetworkClient Implements INetworkClient IMessageSender Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax [AddComponentMenu(\"Network/NetworkClient\")] [DisallowMultipleComponent] public class NetworkClient : MonoBehaviour, INetworkClient, IMessageSender Fields | Improve this Doc View Source authenticator Declaration [Tooltip(\"Authentication component attached to this object\")] public NetworkAuthenticator authenticator Field Value Type Description NetworkAuthenticator | Improve this Doc View Source DisconnectOnException Declaration public bool DisconnectOnException Field Value Type Description Boolean | Improve this Doc View Source EnablePeerMetrics Declaration public bool EnablePeerMetrics Field Value Type Description Boolean | Improve this Doc View Source MetricsSize Declaration [Tooltip(\"Sequence size of buffer in bits.\\n10 => array size 1024 => ~17 seconds at 60hz\")] public int MetricsSize Field Value Type Description Int32 | Improve this Doc View Source SocketFactory Declaration [Tooltip(\"Creates Socket for Peer to use\")] public SocketFactory SocketFactory Field Value Type Description SocketFactory Properties | Improve this Doc View Source Active active is true while a client is connecting/connected (= while the network is active) Declaration public bool Active { get; } Property Value Type Description Boolean | Improve this Doc View Source Authenticated Event fires after the Client connection has successfully been authenticated with its Server. Declaration public IAddLateEvent<INetworkPlayer> Authenticated { get; } Property Value Type Description IAddLateEvent < INetworkPlayer > | Improve this Doc View Source Connected Event fires once the Client has connected its Server. Declaration public IAddLateEvent<INetworkPlayer> Connected { get; } Property Value Type Description IAddLateEvent < INetworkPlayer > | Improve this Doc View Source Disconnected Event fires after the Client has disconnected from its Server and Cleanup has been called. Declaration public IAddLateEvent<ClientStoppedReason> Disconnected { get; } Property Value Type Description IAddLateEvent < ClientStoppedReason > | Improve this Doc View Source IsConnected This gives the current connection status of the client. Declaration public bool IsConnected { get; } Property Value Type Description Boolean | Improve this Doc View Source IsLocalClient NetworkClient can connect to local server in host mode too Declaration public bool IsLocalClient { get; } Property Value Type Description Boolean | Improve this Doc View Source MessageHandler Declaration public MessageHandler MessageHandler { get; } Property Value Type Description MessageHandler | Improve this Doc View Source Metrics Declaration public Metrics Metrics { get; } Property Value Type Description Metrics | Improve this Doc View Source PeerConfig Config for peer, if not set will use default settings Declaration public Config PeerConfig { get; set; } Property Value Type Description Config | Improve this Doc View Source Player The NetworkConnection object this client is using. Declaration public INetworkPlayer Player { get; } Property Value Type Description INetworkPlayer | Improve this Doc View Source Started Event fires when the client starts, before it has connected to the Server. Declaration public IAddLateEvent Started { get; } Property Value Type Description IAddLateEvent | Improve this Doc View Source World Declaration public NetworkWorld World { get; } Property Value Type Description NetworkWorld Methods | Improve this Doc View Source Connect(String, Nullable<UInt16>) Connect client to a NetworkServer instance. Declaration public void Connect(string address = null, ushort? port = default(ushort? )) Parameters Type Name Description String address Nullable < UInt16 > port | Improve this Doc View Source Disconnect() Disconnect from server. The disconnect message will be invoked. Declaration public void Disconnect() | Improve this Doc View Source Send(ArraySegment<Byte>, Int32) Declaration public void Send(ArraySegment<byte> segment, int channelId = 0) Parameters Type Name Description ArraySegment < Byte > segment Int32 channelId | Improve this Doc View Source Send<T>(T, INotifyCallBack) Declaration public void Send<T>(T message, INotifyCallBack notifyCallBack) Parameters Type Name Description T message INotifyCallBack notifyCallBack Type Parameters Name Description T | Improve this Doc View Source Send<T>(T, Int32) This sends a network message with a message Id to the server. This message is sent on channel zero, which by default is the reliable channel. The message must be an instance of a class derived from MessageBase. The message id passed to Send() is used to identify the handler function to invoke on the server when the message is received. Declaration public void Send<T>(T message, int channelId = 0) Parameters Type Name Description T message Int32 channelId Type Parameters Name Description T The message type to unregister. Implements INetworkClient IMessageSender"
  },
  "api/Mirage.NetworkDiagnostics.html": {
    "href": "api/Mirage.NetworkDiagnostics.html",
    "title": "Class NetworkDiagnostics",
    "keywords": "Class NetworkDiagnostics Provides profiling information from mirror A profiler can subscribe to these events and present the data in a friendly way to the user Inheritance Object NetworkDiagnostics Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage Assembly : Mirage.dll Syntax public static class NetworkDiagnostics Events | Improve this Doc View Source InMessageEvent Event that gets raised when Mirage receives a message Subscribe to this if you want to profile the network Declaration public static event Action<NetworkDiagnostics.MessageInfo> InMessageEvent Event Type Type Description Action < NetworkDiagnostics.MessageInfo > | Improve this Doc View Source OutMessageEvent Event that gets raised when Mirage sends a message Subscribe to this if you want to diagnose the network Declaration public static event Action<NetworkDiagnostics.MessageInfo> OutMessageEvent Event Type Type Description Action < NetworkDiagnostics.MessageInfo >"
  },
  "api/Mirage.NetworkDiagnostics.MessageInfo.html": {
    "href": "api/Mirage.NetworkDiagnostics.MessageInfo.html",
    "title": "Struct NetworkDiagnostics.MessageInfo",
    "keywords": "Struct NetworkDiagnostics.MessageInfo Describes an outgoing message Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax public struct MessageInfo Fields | Improve this Doc View Source bytes how big was the message (does not include transport headers) Declaration public readonly int bytes Field Value Type Description Int32 | Improve this Doc View Source count How many connections was the message sent to If an object has a lot of observers this count could be high Declaration public readonly int count Field Value Type Description Int32 | Improve this Doc View Source message The message being sent Declaration public readonly object message Field Value Type Description Object"
  },
  "api/Mirage.NetworkIdentity.html": {
    "href": "api/Mirage.NetworkIdentity.html",
    "title": "Class NetworkIdentity",
    "keywords": "Class NetworkIdentity The NetworkIdentity identifies objects across the network, between server and clients. Its primary data is a NetworkInstanceId which is allocated by the server and then set on clients. This is used in network communications to be able to lookup game objects on different machines. Inheritance Object Object Component Behaviour MonoBehaviour NetworkIdentity Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax [DisallowMultipleComponent] [AddComponentMenu(\"Network/NetworkIdentity\")] [HelpURL(\"https://miragenet.github.io/Mirage/Articles/Components/NetworkIdentity.html\")] public sealed class NetworkIdentity : MonoBehaviour Remarks The NetworkIdentity is used to synchronize information in the object with the network. Only the server should create instances of objects which have NetworkIdentity as otherwise they will not be properly connected to the system. For complex objects with a hierarchy of subcomponents, the NetworkIdentity must be on the root of the hierarchy. It is not supported to have multiple NetworkIdentity components on subcomponents of a hierarchy. NetworkBehaviour scripts require a NetworkIdentity on the game object to be able to function. The NetworkIdentity manages the dirty state of the NetworkBehaviours of the object. When it discovers that NetworkBehaviours are dirty, it causes an update packet to be created and sent to clients. The flow for serialization updates managed by the NetworkIdentity is: Each NetworkBehaviour has a dirty mask. This mask is available inside OnSerialize as syncVarDirtyBits Each SyncVar in a NetworkBehaviour script is assigned a bit in the dirty mask. Changing the value of SyncVars causes the bit for that SyncVar to be set in the dirty mask Alternatively, calling SetDirtyBit() writes directly to the dirty mask NetworkIdentity objects are checked on the server as part of it's update loop If any NetworkBehaviours on a NetworkIdentity are dirty, then an UpdateVars packet is created for that object The UpdateVars packet is populated by calling OnSerialize on each NetworkBehaviour on the object NetworkBehaviours that are NOT dirty write a zero to the packet for their dirty bits NetworkBehaviours that are dirty write their dirty mask, then the values for the SyncVars that have changed If OnSerialize returns true for a NetworkBehaviour, the dirty mask is reset for that NetworkBehaviour, so it will not send again until its value changes. The UpdateVars packet is sent to ready clients that are observing the object On the client: an UpdateVars packet is received for an object The OnDeserialize function is called for each NetworkBehaviour script on the object Each NetworkBehaviour script on the object reads a dirty mask. If the dirty mask for a NetworkBehaviour is zero, the OnDeserialize functions returns without reading any more If the dirty mask is non-zero value, then the OnDeserialize function reads the values for the SyncVars that correspond to the dirty bits that are set If there are SyncVar hook functions, those are invoked with the value read from the stream. Fields | Improve this Doc View Source ClientObjectManager The ClientObjectManager is present only for client instances. Declaration [Tooltip(\"Reference to Client set after the object is spawned. Used when debugging to see which client this object belongs to.\")] public ClientObjectManager ClientObjectManager Field Value Type Description ClientObjectManager | Improve this Doc View Source observers The set of network connections (players) that can see this object. Declaration public readonly HashSet<INetworkPlayer> observers Field Value Type Description HashSet < INetworkPlayer > | Improve this Doc View Source ServerObjectManager Declaration [Header(\"Runtime References\")] [Tooltip(\"Reference to Server set after the object is spawned. Used when debugging to see which server this object belongs to.\")] public ServerObjectManager ServerObjectManager Field Value Type Description ServerObjectManager | Improve this Doc View Source SpawnSettings Declaration public NetworkIdentity.TransformSpawnSettings SpawnSettings Field Value Type Description NetworkIdentity.TransformSpawnSettings Properties | Improve this Doc View Source Client The NetworkClient associated with this NetworkIdentity. Declaration public INetworkClient Client { get; } Property Value Type Description INetworkClient | Improve this Doc View Source HasAuthority This returns true if this object is the authoritative player object on the client. This value is determined at runtime. For most objects, authority is held by the server. For objects that had their authority set by AssignClientAuthority on the server, this will be true on the client that owns the object. NOT on other clients. Declaration public bool HasAuthority { get; } Property Value Type Description Boolean | Improve this Doc View Source IsClient Returns true if running as a client and this object was spawned by a server. Declaration public bool IsClient { get; } Property Value Type Description Boolean | Improve this Doc View Source IsLocalClient Returns true if we're on host mode. Declaration public bool IsLocalClient { get; } Property Value Type Description Boolean | Improve this Doc View Source IsLocalPlayer This returns true if this object is the one that represents the player on the local machine. This is set when the server has spawned an object for this particular client. Declaration public bool IsLocalPlayer { get; } Property Value Type Description Boolean | Improve this Doc View Source IsPrefab Is this object a prefab and have a PrefabHash so that it can be spawned over the network Declaration public bool IsPrefab { get; } Property Value Type Description Boolean | Improve this Doc View Source IsSceneObject Is this object part of a scene and have a Scene Id? Declaration public bool IsSceneObject { get; } Property Value Type Description Boolean | Improve this Doc View Source IsServer Returns true if NetworkServer.active and server is not stopped. Declaration public bool IsServer { get; } Property Value Type Description Boolean | Improve this Doc View Source IsSpawned Has this object been spawned and have a NetId Declaration public bool IsSpawned { get; } Property Value Type Description Boolean | Improve this Doc View Source NetId Unique identifier for this particular object instance, used for tracking objects between networked clients and the server. This is a unique identifier for this particular GameObject instance. Use it to track GameObjects between networked clients and the server. Declaration public uint NetId { get; } Property Value Type Description UInt32 | Improve this Doc View Source NetworkBehaviours Array of NetworkBehaviours associated with this NetworkIdentity. Can be in child GameObjects. Declaration public NetworkBehaviour[] NetworkBehaviours { get; } Property Value Type Description NetworkBehaviour [] | Improve this Doc View Source OnAuthorityChanged This is invoked on behaviours that have authority given or removed, see HasAuthority This is called after OnStartServer and before OnStartClient When AssignClientAuthority(INetworkPlayer) or RemoveClientAuthority() is called on the server, this will be called on the client that owns the object. When an object is spawned with Spawn(GameObject, GameObject) with a NetworkConnection parameter included, this will be called on the client that owns the object. NOTE: this even is only called for client and host Declaration public IAddLateEvent<bool> OnAuthorityChanged { get; } Property Value Type Description IAddLateEvent < Boolean > | Improve this Doc View Source OnStartClient Called on every NetworkBehaviour when it is activated on a client. Objects on the host have this function called, as there is a local client on the host. The values of SyncVars on object are guaranteed to be initialized correctly with the latest state from the server when this function is called on the client. Declaration public IAddLateEvent OnStartClient { get; } Property Value Type Description IAddLateEvent | Improve this Doc View Source OnStartLocalPlayer Called when the local player object has been set up. This happens after OnStartClient(), as it is triggered by an ownership message from the server. This is an appropriate place to activate components or functionality that should only be active for the local player, such as cameras and input. Declaration public IAddLateEvent OnStartLocalPlayer { get; } Property Value Type Description IAddLateEvent | Improve this Doc View Source OnStartServer This is invoked for NetworkBehaviour objects when they become active on the server. This could be triggered by NetworkServer.Listen() for objects in the scene, or by NetworkServer.Spawn() for objects that are dynamically created. This will be called for objects on a \"host\" as well as for object on a dedicated server. OnStartServer is invoked before this object is added to collection of spawned objects Declaration public IAddLateEvent OnStartServer { get; } Property Value Type Description IAddLateEvent | Improve this Doc View Source OnStopClient This is invoked on clients when the server has caused this object to be destroyed. This can be used as a hook to invoke effects or do client specific cleanup. Declaration public IAddLateEvent OnStopClient { get; } Property Value Type Description IAddLateEvent | Improve this Doc View Source OnStopServer This is called on the server when the object is unspawned Declaration public IAddLateEvent OnStopServer { get; } Property Value Type Description IAddLateEvent Remarks Can be used as hook to save player information | Improve this Doc View Source Owner The INetworkPlayer associated with this NetworkIdentity . This property is only valid on server Use it to return details such as the connection's identity, IP address and ready status. Declaration public INetworkPlayer Owner { get; } Property Value Type Description INetworkPlayer | Improve this Doc View Source PrefabHash Declaration public int PrefabHash { get; } Property Value Type Description Int32 | Improve this Doc View Source Server The NetworkServer associated with this NetworkIdentity. Declaration public INetworkServer Server { get; } Property Value Type Description INetworkServer | Improve this Doc View Source SpawnedFromInstantiate Declaration public bool SpawnedFromInstantiate { get; } Property Value Type Description Boolean | Improve this Doc View Source Visibility Declaration public NetworkVisibility Visibility { get; } Property Value Type Description NetworkVisibility | Improve this Doc View Source World The world this object exists in Declaration public NetworkWorld World { get; } Property Value Type Description NetworkWorld Methods | Improve this Doc View Source AssignClientAuthority(INetworkPlayer) Assign control of an object to a client via the client's NetworkPlayer This causes hasAuthority to be set on the client that owns the object, and NetworkBehaviour.OnStartAuthority will be called on that client. This object then will be in the NetworkConnection.clientOwnedObjects list for the connection. Authority can be removed with RemoveClientAuthority. Only one client can own an object at any time. This does not need to be called for player objects, as their authority is setup automatically. Declaration public void AssignClientAuthority(INetworkPlayer player) Parameters Type Name Description INetworkPlayer player The connection of the client to assign authority to. | Improve this Doc View Source RebuildObservers(Boolean) This causes the set of players that can see this object to be rebuild. The OnRebuildObservers callback function will be invoked on each NetworkBehaviour. Declaration public void RebuildObservers(bool initialize) Parameters Type Name Description Boolean initialize True if this is the first time. | Improve this Doc View Source RemoveClientAuthority() Removes ownership for an object. This applies to objects that had authority set by AssignClientAuthority, or Spawn(GameObject, GameObject) with a NetworkConnection parameter included. Authority cannot be removed for player objects. Declaration public void RemoveClientAuthority()"
  },
  "api/Mirage.NetworkIdentity.TransformSpawnSettings.html": {
    "href": "api/Mirage.NetworkIdentity.TransformSpawnSettings.html",
    "title": "Struct NetworkIdentity.TransformSpawnSettings",
    "keywords": "Struct NetworkIdentity.TransformSpawnSettings Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax [Serializable] public struct TransformSpawnSettings Constructors | Improve this Doc View Source TransformSpawnSettings(Boolean, Boolean, Boolean) Declaration public TransformSpawnSettings(bool sendPosition, bool sendRotation, bool sendScale) Parameters Type Name Description Boolean sendPosition Boolean sendRotation Boolean sendScale Fields | Improve this Doc View Source SendPosition Declaration public bool SendPosition Field Value Type Description Boolean | Improve this Doc View Source SendRotation Declaration public bool SendRotation Field Value Type Description Boolean | Improve this Doc View Source SendScale Declaration public bool SendScale Field Value Type Description Boolean"
  },
  "api/Mirage.NetworkIdentitySerializers.html": {
    "href": "api/Mirage.NetworkIdentitySerializers.html",
    "title": "Class NetworkIdentitySerializers",
    "keywords": "Class NetworkIdentitySerializers Inheritance Object NetworkIdentitySerializers Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage Assembly : Mirage.dll Syntax public static class NetworkIdentitySerializers Methods | Improve this Doc View Source ReadNetworkIdentitySyncVar(NetworkReader) Declaration public static NetworkIdentitySyncvar ReadNetworkIdentitySyncVar(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description NetworkIdentitySyncvar | Improve this Doc View Source WriteNetworkIdentitySyncVar(NetworkWriter, NetworkIdentitySyncvar) Declaration public static void WriteNetworkIdentitySyncVar(this NetworkWriter writer, NetworkIdentitySyncvar id) Parameters Type Name Description NetworkWriter writer NetworkIdentitySyncvar id"
  },
  "api/Mirage.NetworkIdentitySyncvar.html": {
    "href": "api/Mirage.NetworkIdentitySyncvar.html",
    "title": "Struct NetworkIdentitySyncvar",
    "keywords": "Struct NetworkIdentitySyncvar backing struct for a NetworkIdentity when used as a syncvar the weaver will replace the syncvar with this struct. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax public struct NetworkIdentitySyncvar Properties | Improve this Doc View Source Value Declaration public NetworkIdentity Value { get; set; } Property Value Type Description NetworkIdentity"
  },
  "api/Mirage.NetworkManager.html": {
    "href": "api/Mirage.NetworkManager.html",
    "title": "Class NetworkManager",
    "keywords": "Class NetworkManager Inheritance Object Object Component Behaviour MonoBehaviour NetworkManager Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax [AddComponentMenu(\"Network/NetworkManager\")] [HelpURL(\"https://miragenet.github.io/Mirage/Articles/Guides/Callbacks/NetworkManager.html\")] [DisallowMultipleComponent] public class NetworkManager : MonoBehaviour Fields | Improve this Doc View Source Client Declaration [FormerlySerializedAs(\"client\")] public NetworkClient Client Field Value Type Description NetworkClient | Improve this Doc View Source ClientObjectManager Declaration [FormerlySerializedAs(\"clientObjectManager\")] public ClientObjectManager ClientObjectManager Field Value Type Description ClientObjectManager | Improve this Doc View Source NetworkSceneManager Declaration [FormerlySerializedAs(\"sceneManager\")] [FormerlySerializedAs(\"SceneManager\")] public NetworkSceneManager NetworkSceneManager Field Value Type Description NetworkSceneManager | Improve this Doc View Source Server Declaration [FormerlySerializedAs(\"server\")] public NetworkServer Server Field Value Type Description NetworkServer | Improve this Doc View Source ServerObjectManager Declaration [FormerlySerializedAs(\"serverObjectManager\")] public ServerObjectManager ServerObjectManager Field Value Type Description ServerObjectManager Properties | Improve this Doc View Source IsNetworkActive True if the server or client is started and running This is set True in StartServer / StartClient, and set False in StopServer / StopClient Declaration public bool IsNetworkActive { get; } Property Value Type Description Boolean | Improve this Doc View Source NetworkMode helper enum to know if we started the networkmanager as server/client/host. Declaration public NetworkManagerMode NetworkMode { get; } Property Value Type Description NetworkManagerMode"
  },
  "api/Mirage.NetworkManagerGUI.html": {
    "href": "api/Mirage.NetworkManagerGUI.html",
    "title": "Class NetworkManagerGUI",
    "keywords": "Class NetworkManagerGUI Inheritance Object Object Component Behaviour MonoBehaviour NetworkManagerGUI Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.Components.dll Syntax public class NetworkManagerGUI : MonoBehaviour Fields | Improve this Doc View Source GUIAnchor Declaration public TextAnchor GUIAnchor Field Value Type Description TextAnchor | Improve this Doc View Source NetworkAddress Declaration public string NetworkAddress Field Value Type Description String | Improve this Doc View Source NetworkManager Declaration public NetworkManager NetworkManager Field Value Type Description NetworkManager | Improve this Doc View Source Scale Declaration [Range(0.01F, 10F)] public float Scale Field Value Type Description Single"
  },
  "api/Mirage.NetworkManagerHud.html": {
    "href": "api/Mirage.NetworkManagerHud.html",
    "title": "Class NetworkManagerHud",
    "keywords": "Class NetworkManagerHud Inheritance Object Object Component Behaviour MonoBehaviour NetworkManagerHud Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.Components.dll Syntax public class NetworkManagerHud : MonoBehaviour Fields | Improve this Doc View Source DontDestroy Declaration public bool DontDestroy Field Value Type Description Boolean | Improve this Doc View Source NetworkAddress Declaration public string NetworkAddress Field Value Type Description String | Improve this Doc View Source NetworkAddressInput Declaration [Header(\"Prefab Canvas Elements\")] public InputField NetworkAddressInput Field Value Type Description UnityEngine.UI.InputField | Improve this Doc View Source NetworkManager Declaration public NetworkManager NetworkManager Field Value Type Description NetworkManager | Improve this Doc View Source OfflineGO Declaration public GameObject OfflineGO Field Value Type Description GameObject | Improve this Doc View Source OnlineGO Declaration public GameObject OnlineGO Field Value Type Description GameObject | Improve this Doc View Source StatusLabel Declaration public Text StatusLabel Field Value Type Description UnityEngine.UI.Text Methods | Improve this Doc View Source OnNetworkAddressInputUpdate() Declaration public void OnNetworkAddressInputUpdate() | Improve this Doc View Source StartClientButtonHandler() Declaration public void StartClientButtonHandler() | Improve this Doc View Source StartHostButtonHandler() Declaration public void StartHostButtonHandler() | Improve this Doc View Source StartServerOnlyButtonHandler() Declaration public void StartServerOnlyButtonHandler() | Improve this Doc View Source StopButtonHandler() Declaration public void StopButtonHandler()"
  },
  "api/Mirage.NetworkManagerMode.html": {
    "href": "api/Mirage.NetworkManagerMode.html",
    "title": "Enum NetworkManagerMode",
    "keywords": "Enum NetworkManagerMode Namespace : Mirage Assembly : Mirage.dll Syntax [Flags] public enum NetworkManagerMode Fields Name Description Client Host None Server"
  },
  "api/Mirage.NetworkMatchChecker.html": {
    "href": "api/Mirage.NetworkMatchChecker.html",
    "title": "Class NetworkMatchChecker",
    "keywords": "Class NetworkMatchChecker Component that controls visibility of networked objects based on match id. Any object with this component on it will only be visible to other objects in the same match. This would be used to isolate players to their respective matches within a single game server instance. Inheritance Object Object Component Behaviour MonoBehaviour NetworkBehaviour NetworkVisibility NetworkMatchChecker Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.IsServer NetworkBehaviour.IsClient NetworkBehaviour.IsLocalClient NetworkBehaviour.IsLocalPlayer NetworkBehaviour.IsServerOnly NetworkBehaviour.IsClientOnly NetworkBehaviour.HasAuthority NetworkBehaviour.NetId NetworkBehaviour.Server NetworkBehaviour.ServerObjectManager NetworkBehaviour.Client NetworkBehaviour.ClientObjectManager NetworkBehaviour.Owner NetworkBehaviour.World NetworkBehaviour.NetworkTime NetworkBehaviour.SyncVarDirtyBits NetworkBehaviour.GetSyncVarHookGuard(UInt64) NetworkBehaviour.SetSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.Identity NetworkBehaviour.COMPONENT_INDEX_NOT_FOUND NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(ISyncObject) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.StillDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.GetRpcCount() NetworkBehaviour.remoteCallCollection MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.Components.dll Syntax [DisallowMultipleComponent] [AddComponentMenu(\"Network/NetworkMatchChecker\")] [RequireComponent(typeof(NetworkIdentity))] [HelpURL(\"https://miragenet.github.io/Mirage/Articles/Components/NetworkMatchChecker.html\")] public class NetworkMatchChecker : NetworkVisibility Fields | Improve this Doc View Source currentMatchDebug Declaration [Header(\"Diagnostics\")] public string currentMatchDebug Field Value Type Description String Properties | Improve this Doc View Source MatchId Set this to the same value on all networked objects that belong to a given match Declaration public Guid MatchId { get; set; } Property Value Type Description Guid Methods | Improve this Doc View Source Awake() Declaration public void Awake() | Improve this Doc View Source OnCheckObserver(INetworkPlayer) Callback used by the visibility system to determine if an observer (player) can see this object. If this function returns true, the network connection will be added as an observer. Declaration public override bool OnCheckObserver(INetworkPlayer player) Parameters Type Name Description INetworkPlayer player Network connection of a player. Returns Type Description Boolean True if the player can see this object. Overrides NetworkVisibility.OnCheckObserver(INetworkPlayer) | Improve this Doc View Source OnRebuildObservers(HashSet<INetworkPlayer>, Boolean) Callback used by the visibility system to (re)construct the set of observers that can see this object. Implementations of this callback should add network connections of players that can see this object to the observers set. Declaration public override void OnRebuildObservers(HashSet<INetworkPlayer> observers, bool initialize) Parameters Type Name Description HashSet < INetworkPlayer > observers The new set of observers for this object. Boolean initialize True if the set of observers is being built for the first time. Overrides NetworkVisibility.OnRebuildObservers(HashSet<INetworkPlayer>, Boolean) | Improve this Doc View Source OnStartServer() Declaration public void OnStartServer()"
  },
  "api/Mirage.NetworkMessageAttribute.html": {
    "href": "api/Mirage.NetworkMessageAttribute.html",
    "title": "Class NetworkMessageAttribute",
    "keywords": "Class NetworkMessageAttribute Tell the weaver to generate reader and writer for a class Inheritance Object Attribute NetworkMessageAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage Assembly : Mirage.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)] public class NetworkMessageAttribute : Attribute"
  },
  "api/Mirage.NetworkPingDisplay.html": {
    "href": "api/Mirage.NetworkPingDisplay.html",
    "title": "Class NetworkPingDisplay",
    "keywords": "Class NetworkPingDisplay Component that will display the clients ping in milliseconds Inheritance Object Object Component Behaviour MonoBehaviour NetworkPingDisplay Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.Components.dll Syntax [DisallowMultipleComponent] [AddComponentMenu(\"Network/NetworkPingDisplay\")] [HelpURL(\"https://miragenet.github.io/Mirage/Articles/Components/NetworkPingDisplay.html\")] public class NetworkPingDisplay : MonoBehaviour Fields | Improve this Doc View Source Client Declaration public NetworkClient Client Field Value Type Description NetworkClient | Improve this Doc View Source NetworkPingLabelText Declaration public Text NetworkPingLabelText Field Value Type Description UnityEngine.UI.Text"
  },
  "api/Mirage.NetworkPingMessage.html": {
    "href": "api/Mirage.NetworkPingMessage.html",
    "title": "Struct NetworkPingMessage",
    "keywords": "Struct NetworkPingMessage Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax public struct NetworkPingMessage Fields | Improve this Doc View Source clientTime Declaration public double clientTime Field Value Type Description Double"
  },
  "api/Mirage.NetworkPlayer.html": {
    "href": "api/Mirage.NetworkPlayer.html",
    "title": "Class NetworkPlayer",
    "keywords": "Class NetworkPlayer A High level network connection. This is used for connections from client-to-server and for connection from server-to-client. Inheritance Object NetworkPlayer Implements INetworkPlayer IVisibilityTracker IObjectOwner IAuthenticatedObject ISceneLoader IMessageSender Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax public sealed class NetworkPlayer : INetworkPlayer, IVisibilityTracker, IObjectOwner, IAuthenticatedObject, ISceneLoader, IMessageSender Remarks A NetworkConnection corresponds to a specific connection for a host in the transport layer. It has a connectionId that is assigned by the transport layer and passed to the Initialize function. A NetworkClient has one NetworkConnection. A NetworkServerSimple manages multiple NetworkConnections. The NetworkServer has multiple \"remote\" connections and a \"local\" connection for the local client. The NetworkConnection class provides message sending and handling facilities. For sending data over a network, there are methods to send message objects, byte arrays, and NetworkWriter objects. To handle data arriving from the network, handler functions can be registered for message Ids, byte arrays can be processed by HandleBytes(), and NetworkReader object can be processed by HandleReader(). NetworkConnection objects also act as observers for networked objects. When a connection is an observer of a networked object with a NetworkIdentity, then the object will be visible to corresponding client for the connection, and incremental state changes will be sent to the client. There are many virtual functions on NetworkConnection that allow its behaviour to be customized. NetworkClient and NetworkServer can both be made to instantiate custom classes derived from NetworkConnection by setting their networkConnectionClass member variable. Constructors | Improve this Doc View Source NetworkPlayer(IConnection) Creates a new NetworkConnection with the specified address and connectionId Declaration public NetworkPlayer(IConnection connection) Parameters Type Name Description IConnection connection Properties | Improve this Doc View Source Address The IP address / URL / FQDN associated with the connection. Can be useful for a game master to do IP Bans etc. Declaration public IEndPoint Address { get; } Property Value Type Description IEndPoint | Improve this Doc View Source AuthenticationData General purpose object to hold authentication data, character selection, tokens, etc. associated with the connection for reference after Authentication completes. Declaration public object AuthenticationData { get; set; } Property Value Type Description Object | Improve this Doc View Source Connection Declaration public IConnection Connection { get; } Property Value Type Description IConnection | Improve this Doc View Source HasCharacter Checks if this player has a Identity Declaration public bool HasCharacter { get; } Property Value Type Description Boolean | Improve this Doc View Source Identity The NetworkIdentity for this connection. Declaration public NetworkIdentity Identity { get; set; } Property Value Type Description NetworkIdentity | Improve this Doc View Source IsAuthenticated Marks if this player has been accepted by a NetworkAuthenticator Declaration public bool IsAuthenticated { get; set; } Property Value Type Description Boolean | Improve this Doc View Source SceneIsReady Flag that tells us if the scene has fully loaded in for player. This property is read-only. It is set by the system on the client when the scene has fully loaded, and set by the system on the server when a ready message is received from a client. A client that is ready is sent spawned objects by the server and updates to the state of spawned objects. A client that is not ready is not sent spawned objects. Starts as true, when a client connects it is assumed that it is already in a ready scene. It will be set to not ready if NetworkSceneManager loads a scene Declaration public bool SceneIsReady { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source AddOwnedObject(NetworkIdentity) Declaration public void AddOwnedObject(NetworkIdentity networkIdentity) Parameters Type Name Description NetworkIdentity networkIdentity | Improve this Doc View Source AddToVisList(NetworkIdentity) Declaration public void AddToVisList(NetworkIdentity identity) Parameters Type Name Description NetworkIdentity identity | Improve this Doc View Source DestroyOwnedObjects() Destroy all objects owned by this player NOTE: only destroyed objects that are currently spawned Declaration public void DestroyOwnedObjects() | Improve this Doc View Source Disconnect() Disconnects the player. A disconnected player can not send messages Declaration public void Disconnect() Remarks This method exists so that users do not need to add reference to SocketLayer asmdef | Improve this Doc View Source MarkAsDisconnected() Marks player as disconnected, used when the disconnect call is from peer A disconnected player can not send messages Declaration public void MarkAsDisconnected() | Improve this Doc View Source RemoveAllVisibleObjects() Removes all objects that this player can see This is called when loading a new scene Declaration public void RemoveAllVisibleObjects() | Improve this Doc View Source RemoveFromVisList(NetworkIdentity) Declaration public void RemoveFromVisList(NetworkIdentity identity) Parameters Type Name Description NetworkIdentity identity | Improve this Doc View Source RemoveOwnedObject(NetworkIdentity) Declaration public void RemoveOwnedObject(NetworkIdentity networkIdentity) Parameters Type Name Description NetworkIdentity networkIdentity | Improve this Doc View Source Send(ArraySegment<Byte>, Int32) Sends a block of data Only use this method if data has message Id already included, otherwise receives wont know how to handle it. Otherwise use Send<T>(T, Int32) Declaration public void Send(ArraySegment<byte> segment, int channelId = 0) Parameters Type Name Description ArraySegment < Byte > segment Int32 channelId | Improve this Doc View Source Send<T>(T, INotifyCallBack) This sends a network message to the connection. Declaration public void Send<T>(T message, INotifyCallBack token) Parameters Type Name Description T message INotifyCallBack token Type Parameters Name Description T The message type | Improve this Doc View Source Send<T>(T, Int32) This sends a network message to the connection. Declaration public void Send<T>(T message, int channelId = 0) Parameters Type Name Description T message Int32 channelId The transport layer channel to send on. Type Parameters Name Description T The message type | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Events | Improve this Doc View Source OnIdentityChanged Event called when Identity property is changed Declaration public event Action<NetworkIdentity> OnIdentityChanged Event Type Type Description Action < NetworkIdentity > Implements INetworkPlayer IVisibilityTracker IObjectOwner IAuthenticatedObject ISceneLoader IMessageSender"
  },
  "api/Mirage.NetworkPongMessage.html": {
    "href": "api/Mirage.NetworkPongMessage.html",
    "title": "Struct NetworkPongMessage",
    "keywords": "Struct NetworkPongMessage Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax public struct NetworkPongMessage Fields | Improve this Doc View Source clientTime Declaration public double clientTime Field Value Type Description Double | Improve this Doc View Source serverTime Declaration public double serverTime Field Value Type Description Double"
  },
  "api/Mirage.NetworkProximityChecker.html": {
    "href": "api/Mirage.NetworkProximityChecker.html",
    "title": "Class NetworkProximityChecker",
    "keywords": "Class NetworkProximityChecker Component that controls visibility of networked objects for players. Any object with this component on it will not be visible to players more than a (configurable) distance away. Inheritance Object Object Component Behaviour MonoBehaviour NetworkBehaviour NetworkVisibility NetworkProximityChecker Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.IsServer NetworkBehaviour.IsClient NetworkBehaviour.IsLocalClient NetworkBehaviour.IsLocalPlayer NetworkBehaviour.IsServerOnly NetworkBehaviour.IsClientOnly NetworkBehaviour.HasAuthority NetworkBehaviour.NetId NetworkBehaviour.Server NetworkBehaviour.ServerObjectManager NetworkBehaviour.Client NetworkBehaviour.ClientObjectManager NetworkBehaviour.Owner NetworkBehaviour.World NetworkBehaviour.NetworkTime NetworkBehaviour.SyncVarDirtyBits NetworkBehaviour.GetSyncVarHookGuard(UInt64) NetworkBehaviour.SetSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.Identity NetworkBehaviour.COMPONENT_INDEX_NOT_FOUND NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(ISyncObject) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.StillDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.GetRpcCount() NetworkBehaviour.remoteCallCollection MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.Components.dll Syntax [AddComponentMenu(\"Network/NetworkProximityChecker\")] [RequireComponent(typeof(NetworkIdentity))] [HelpURL(\"https://miragenet.github.io/Mirage/Articles/Components/NetworkProximityChecker.html\")] public class NetworkProximityChecker : NetworkVisibility Fields | Improve this Doc View Source ForceHidden Flag to force this object to be hidden for players. If this object is a player object, it will not be hidden for that player. Declaration [Tooltip(\"Enable to force this object to be hidden from players.\")] public bool ForceHidden Field Value Type Description Boolean | Improve this Doc View Source VisibilityRange The maximim range that objects will be visible at. Declaration [Tooltip(\"The maximum range that objects will be visible at.\")] public int VisibilityRange Field Value Type Description Int32 | Improve this Doc View Source VisibilityUpdateInterval How often (in seconds) that this object should update the list of observers that can see it. Declaration [Tooltip(\"How often (in seconds) that this object should update the list of observers that can see it.\")] public float VisibilityUpdateInterval Field Value Type Description Single Methods | Improve this Doc View Source Awake() Declaration public void Awake() | Improve this Doc View Source OnCheckObserver(INetworkPlayer) Callback used by the visibility system to determine if an observer (player) can see this object. If this function returns true, the network connection will be added as an observer. Declaration public override bool OnCheckObserver(INetworkPlayer player) Parameters Type Name Description INetworkPlayer player Network connection of a player. Returns Type Description Boolean True if the player can see this object. Overrides NetworkVisibility.OnCheckObserver(INetworkPlayer) | Improve this Doc View Source OnRebuildObservers(HashSet<INetworkPlayer>, Boolean) Callback used by the visibility system to (re)construct the set of observers that can see this object. Implementations of this callback should add network connections of players that can see this object to the observers set. Declaration public override void OnRebuildObservers(HashSet<INetworkPlayer> observers, bool initialize) Parameters Type Name Description HashSet < INetworkPlayer > observers The new set of observers for this object. Boolean initialize True if the set of observers is being built for the first time. Overrides NetworkVisibility.OnRebuildObservers(HashSet<INetworkPlayer>, Boolean)"
  },
  "api/Mirage.NetworkSceneChecker.html": {
    "href": "api/Mirage.NetworkSceneChecker.html",
    "title": "Class NetworkSceneChecker",
    "keywords": "Class NetworkSceneChecker Component that controls visibility of networked objects between scenes. Any object with this component on it will only be visible to other objects in the same scene This would be used when the server has multiple additive subscenes loaded to isolate players to their respective subscenes Inheritance Object Object Component Behaviour MonoBehaviour NetworkBehaviour NetworkVisibility NetworkSceneChecker Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.IsServer NetworkBehaviour.IsClient NetworkBehaviour.IsLocalClient NetworkBehaviour.IsLocalPlayer NetworkBehaviour.IsServerOnly NetworkBehaviour.IsClientOnly NetworkBehaviour.HasAuthority NetworkBehaviour.NetId NetworkBehaviour.Server NetworkBehaviour.ServerObjectManager NetworkBehaviour.Client NetworkBehaviour.ClientObjectManager NetworkBehaviour.Owner NetworkBehaviour.World NetworkBehaviour.NetworkTime NetworkBehaviour.SyncVarDirtyBits NetworkBehaviour.GetSyncVarHookGuard(UInt64) NetworkBehaviour.SetSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.Identity NetworkBehaviour.COMPONENT_INDEX_NOT_FOUND NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(ISyncObject) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.StillDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.GetRpcCount() NetworkBehaviour.remoteCallCollection MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.Components.dll Syntax [DisallowMultipleComponent] [AddComponentMenu(\"Network/NetworkSceneChecker\")] [RequireComponent(typeof(NetworkIdentity))] [HelpURL(\"https://miragenet.github.io/Mirage/Articles/Components/NetworkSceneChecker.html\")] [Obsolete(\"This checker is inefficient, use SimpleSceneChecker instead\")] public class NetworkSceneChecker : NetworkVisibility Fields | Improve this Doc View Source forceHidden Flag to force this object to be hidden from all observers. If this object is a player object, it will not be hidden for that client. Declaration [Tooltip(\"Enable to force this object to be hidden from all observers.\")] public bool forceHidden Field Value Type Description Boolean Methods | Improve this Doc View Source OnCheckObserver(INetworkPlayer) Callback used by the visibility system to determine if an observer (player) can see this object. If this function returns true, the network connection will be added as an observer. Declaration public override bool OnCheckObserver(INetworkPlayer player) Parameters Type Name Description INetworkPlayer player Network connection of a player. Returns Type Description Boolean True if the player can see this object. Overrides NetworkVisibility.OnCheckObserver(INetworkPlayer) | Improve this Doc View Source OnRebuildObservers(HashSet<INetworkPlayer>, Boolean) Callback used by the visibility system to (re)construct the set of observers that can see this object. Implementations of this callback should add network connections of players that can see this object to the observers set. Declaration public override void OnRebuildObservers(HashSet<INetworkPlayer> observers, bool initialize) Parameters Type Name Description HashSet < INetworkPlayer > observers The new set of observers for this object. Boolean initialize True if the set of observers is being built for the first time. Overrides NetworkVisibility.OnRebuildObservers(HashSet<INetworkPlayer>, Boolean) | Improve this Doc View Source OnStartServer() Declaration public void OnStartServer()"
  },
  "api/Mirage.NetworkSceneManager.html": {
    "href": "api/Mirage.NetworkSceneManager.html",
    "title": "Class NetworkSceneManager",
    "keywords": "Class NetworkSceneManager NetworkSceneManager is an optional component that helps keep scene in sync between server and client. The NetworkClient loads scenes as instructed by the NetworkServer . The NetworkServer controls the currently active Scene and any additive Load/Unload. when a client connect NetworkSceneManager will send a message telling the new client to load the scene that is active on the server Inheritance Object Object Component Behaviour MonoBehaviour NetworkSceneManager Implements INetworkSceneManager Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax [AddComponentMenu(\"Network/NetworkSceneManager\")] [DisallowMultipleComponent] public class NetworkSceneManager : MonoBehaviour, INetworkSceneManager Fields | Improve this Doc View Source Client Declaration [Header(\"Setup Settings\")] [FormerlySerializedAs(\"client\")] public NetworkClient Client Field Value Type Description NetworkClient | Improve this Doc View Source DontDestroy Sets the NetworksSceneManagers GameObject to DontDestroyOnLoad. Default = true. Declaration public bool DontDestroy Field Value Type Description Boolean | Improve this Doc View Source SceneLoadingAsyncOperationInfo Information on any scene that is currently being loaded. Declaration public AsyncOperation SceneLoadingAsyncOperationInfo Field Value Type Description AsyncOperation | Improve this Doc View Source Server Declaration [FormerlySerializedAs(\"server\")] public NetworkServer Server Field Value Type Description NetworkServer Properties | Improve this Doc View Source ActiveScenePath The path of the current active scene. If using additive scenes this will be the first scene. Value from GetActiveScene() Declaration public string ActiveScenePath { get; } Property Value Type Description String Remarks New clients that connect to a server will automatically load this scene. This is used to make sure that all scene changes are initialized by Mirage. | Improve this Doc View Source OnClientFinishedSceneChange Event fires after the Client has completed its scene change. Declaration public SceneChangeFinishedEvent OnClientFinishedSceneChange { get; } Property Value Type Description SceneChangeFinishedEvent | Improve this Doc View Source OnClientStartedSceneChange Event fires when the Client starts changing scene. Declaration public SceneChangeStartedEvent OnClientStartedSceneChange { get; } Property Value Type Description SceneChangeStartedEvent | Improve this Doc View Source OnPlayerSceneReady Event fires On the server, after Client sends SceneReadyMessage to the server Declaration public PlayerSceneChangeEvent OnPlayerSceneReady { get; } Property Value Type Description PlayerSceneChangeEvent | Improve this Doc View Source OnServerFinishedSceneChange Event fires after Server has completed scene change. Declaration public SceneChangeFinishedEvent OnServerFinishedSceneChange { get; } Property Value Type Description SceneChangeFinishedEvent | Improve this Doc View Source OnServerStartedSceneChange Event fires before Server changes scene. Declaration public SceneChangeStartedEvent OnServerStartedSceneChange { get; } Property Value Type Description SceneChangeStartedEvent | Improve this Doc View Source ServerSceneData Collection of scenes and which player's are in those scenes. Declaration public IReadOnlyDictionary<Scene, HashSet<INetworkPlayer>> ServerSceneData { get; } Property Value Type Description IReadOnlyDictionary < Scene , HashSet < INetworkPlayer >> Methods | Improve this Doc View Source ClientFinishedLoadingSceneMessage(INetworkPlayer, SceneReadyMessage) Received message from server that it has finished loading the scene. Default implementation will set AllowSceneActivation = true and invoke event handler. If this is not good enough intended behavior then override this method. Declaration protected virtual void ClientFinishedLoadingSceneMessage(INetworkPlayer player, SceneReadyMessage message) Parameters Type Name Description INetworkPlayer player The player who sent the message. SceneReadyMessage message The message data coming back from server. | Improve this Doc View Source ClientNotReadyMessage(INetworkPlayer, SceneNotReadyMessage) Received message that player is not ready. Default implementation is to set player to not ready. Declaration protected virtual void ClientNotReadyMessage(INetworkPlayer player, SceneNotReadyMessage message) Parameters Type Name Description INetworkPlayer player The player that is currently not ready. SceneNotReadyMessage message The message data coming in. | Improve this Doc View Source ClientStartSceneMessage(INetworkPlayer, SceneMessage) Received message from server to start loading scene or scenes. Default implementation is to load main activate scene server is using and load any other additive scenes in background and notify event handler. If this is not intended behavior you need please override this function. Declaration public virtual void ClientStartSceneMessage(INetworkPlayer player, SceneMessage message) Parameters Type Name Description INetworkPlayer player SceneMessage message | Improve this Doc View Source GetSceneByPathOrName(String) Let's us get scene by full path or by its name. Declaration public Scene GetSceneByPathOrName(string scenePath) Parameters Type Name Description String scenePath The path or name representing the scene. Returns Type Description Scene Returns back correct scene data. | Improve this Doc View Source IsPlayerInScene(Scene, INetworkPlayer) Check whether or not the player is in a specific scene or not. Declaration public bool IsPlayerInScene(Scene scene, INetworkPlayer player) Parameters Type Name Description Scene scene The scene we want to check in. INetworkPlayer player The player we want to check for. Returns Type Description Boolean Returns true or false if the player is in the scene specified. | Improve this Doc View Source OnDestroy() Declaration public virtual void OnDestroy() | Improve this Doc View Source OnServerAuthenticated(INetworkPlayer) When player authenticates to server we send a message to them to load up main scene and any other scenes that are loaded on server. Default implementation takes main activate scene as main and any other loaded scenes and sends it to player's Please override this function if this is not intended behavior for you. Declaration protected virtual void OnServerAuthenticated(INetworkPlayer player) Parameters Type Name Description INetworkPlayer player The current player that finished authenticating. | Improve this Doc View Source OnServerPlayerDisconnected(INetworkPlayer) When player disconnects from server we will need to clean up info in scenes related to user. Default implementation we loop through list of scenes and find where this player was in and removed them from list. Declaration protected virtual void OnServerPlayerDisconnected(INetworkPlayer disconnectedPlayer) Parameters Type Name Description INetworkPlayer disconnectedPlayer | Improve this Doc View Source ScenesPlayerIsIn(INetworkPlayer) What scene is this specific player currently in. Declaration public Scene[] ScenesPlayerIsIn(INetworkPlayer player) Parameters Type Name Description INetworkPlayer player The player we want to check against. Returns Type Description Scene [] Returns back a array of scene's the player is currently in. | Improve this Doc View Source ScenesPlayerIsInNonAlloc(INetworkPlayer, List<Scene>) Declaration public void ScenesPlayerIsInNonAlloc(INetworkPlayer player, List<Scene> scenes) Parameters Type Name Description INetworkPlayer player List < Scene > scenes | Improve this Doc View Source ServerLoadSceneAdditively(String, IEnumerable<INetworkPlayer>, Boolean, Nullable<LoadSceneParameters>) Allows server to fully load in another scene on top of current active scene. Declaration public void ServerLoadSceneAdditively(string scenePath, IEnumerable<INetworkPlayer> players, bool shouldClientLoadNormally = false, LoadSceneParameters? sceneLoadParameters = default(LoadSceneParameters? )) Parameters Type Name Description String scenePath The full path to the scene file or the name of the scene. IEnumerable < INetworkPlayer > players Collection of player's that are receiving the new scene load. Boolean shouldClientLoadNormally Should the clients load this additively too or load it full normal scene change. Nullable < LoadSceneParameters > sceneLoadParameters What settings should we be using for physics scene loading. | Improve this Doc View Source ServerLoadSceneNormal(String, Nullable<LoadSceneParameters>) Allows server to fully load in a new scene and override current active scene. Declaration public void ServerLoadSceneNormal(string scenePath, LoadSceneParameters? sceneLoadParameters = default(LoadSceneParameters? )) Parameters Type Name Description String scenePath The full path to the scene file or the name of the scene. Nullable < LoadSceneParameters > sceneLoadParameters What settings should we be using for physics scene loading. | Improve this Doc View Source ServerUnloadSceneAdditively(Scene, IEnumerable<INetworkPlayer>) Allows server to fully unload a scene additively. Declaration public void ServerUnloadSceneAdditively(Scene scene, IEnumerable<INetworkPlayer> players) Parameters Type Name Description Scene scene The scene handle which we want to unload additively. IEnumerable < INetworkPlayer > players Collection of player's that are receiving the new scene unload. | Improve this Doc View Source SetAllClientsNotReady(IEnumerable<INetworkPlayer>) Marks all connected clients as no longer ready. All clients will no longer be sent state synchronization updates. The player's clients can call ClientManager.Ready() again to re-enter the ready state. This is useful when switching scenes. Declaration public void SetAllClientsNotReady(IEnumerable<INetworkPlayer> players = null) Parameters Type Name Description IEnumerable < INetworkPlayer > players | Improve this Doc View Source SetClientNotReady(INetworkPlayer) Sets a player as not ready and removes all visible objects Players that are not ready will not be sent spawn message or state updates. Players that are not ready do not receive spawned objects or state synchronization updates. They client can be made ready again by calling SetClientReady(). Declaration public void SetClientNotReady(INetworkPlayer player) Parameters Type Name Description INetworkPlayer player The player to make not ready. | Improve this Doc View Source SetSceneIsReady() Signal that the client connection is ready to enter the game. This could be for example when a client enters an ongoing game and has finished loading the current scene. The server should respond to the message with an appropriate handler which instantiates the players object for example. Declaration public void SetSceneIsReady() Exceptions Type Condition InvalidOperationException When called with an null or disconnected client | Improve this Doc View Source Start() Declaration public virtual void Start() Implements INetworkSceneManager"
  },
  "api/Mirage.NetworkServer.html": {
    "href": "api/Mirage.NetworkServer.html",
    "title": "Class NetworkServer",
    "keywords": "Class NetworkServer The NetworkServer. Inheritance Object Object Component Behaviour MonoBehaviour NetworkServer Implements INetworkServer Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax [AddComponentMenu(\"Network/NetworkServer\")] [DisallowMultipleComponent] public class NetworkServer : MonoBehaviour, INetworkServer Remarks NetworkServer handles remote connections from remote clients, and also has a local connection for a local client. Fields | Improve this Doc View Source authenticator Declaration [Tooltip(\"Authentication component attached to this object\")] public NetworkAuthenticator authenticator Field Value Type Description NetworkAuthenticator | Improve this Doc View Source DisconnectOnException Declaration public bool DisconnectOnException Field Value Type Description Boolean | Improve this Doc View Source EnablePeerMetrics Declaration public bool EnablePeerMetrics Field Value Type Description Boolean | Improve this Doc View Source Listening Declaration [Tooltip(\"If disabled the server will not create a Network Peer to listen. This can be used to run server single player mode\")] public bool Listening Field Value Type Description Boolean | Improve this Doc View Source MaxConnections The maximum number of concurrent network connections to support. Excluding the host player. This field is only used if the PeerConfig property is null Declaration [Tooltip(\"Maximum number of concurrent connections. Excluding the host player.\")] [Min(1F)] public int MaxConnections Field Value Type Description Int32 | Improve this Doc View Source MetricsSize Declaration [Tooltip(\"Sequence size of buffer in bits.\\n10 => array size 1024 => ~17 seconds at 60hz\")] public int MetricsSize Field Value Type Description Int32 | Improve this Doc View Source SocketFactory Declaration [Tooltip(\"Creates Socket for Peer to use\")] public SocketFactory SocketFactory Field Value Type Description SocketFactory Properties | Improve this Doc View Source Active Checks if the server has been started. This will be true after NetworkServer.Listen() has been called. Declaration public bool Active { get; } Property Value Type Description Boolean | Improve this Doc View Source Authenticated Declaration public NetworkPlayerEvent Authenticated { get; } Property Value Type Description NetworkPlayerEvent | Improve this Doc View Source Connected Declaration public NetworkPlayerEvent Connected { get; } Property Value Type Description NetworkPlayerEvent | Improve this Doc View Source Disconnected Declaration public NetworkPlayerEvent Disconnected { get; } Property Value Type Description NetworkPlayerEvent | Improve this Doc View Source LocalClient The host client for this server Declaration public INetworkClient LocalClient { get; } Property Value Type Description INetworkClient | Improve this Doc View Source LocalClientActive True if there is a local client connected to this server (host mode) Declaration public bool LocalClientActive { get; } Property Value Type Description Boolean | Improve this Doc View Source LocalPlayer The connection to the host mode client (if any). Declaration public INetworkPlayer LocalPlayer { get; } Property Value Type Description INetworkPlayer | Improve this Doc View Source MessageHandler Declaration public MessageHandler MessageHandler { get; } Property Value Type Description MessageHandler | Improve this Doc View Source Metrics Declaration public Metrics Metrics { get; } Property Value Type Description Metrics | Improve this Doc View Source NumberOfPlayers Number of active player objects across all connections on the server. This is only valid on the host / server. Declaration public int NumberOfPlayers { get; } Property Value Type Description Int32 | Improve this Doc View Source OnStartHost Declaration public IAddLateEvent OnStartHost { get; } Property Value Type Description IAddLateEvent | Improve this Doc View Source OnStopHost Declaration public IAddLateEvent OnStopHost { get; } Property Value Type Description IAddLateEvent | Improve this Doc View Source PeerConfig Config for peer, if not set will use default settings Declaration public Config PeerConfig { get; set; } Property Value Type Description Config | Improve this Doc View Source Players A list of local connections on the server. Declaration public IReadOnlyCollection<INetworkPlayer> Players { get; } Property Value Type Description IReadOnlyCollection < INetworkPlayer > | Improve this Doc View Source Started This is invoked when a server is started - including when a host is started. Declaration public IAddLateEvent Started { get; } Property Value Type Description IAddLateEvent | Improve this Doc View Source Stopped Declaration public IAddLateEvent Stopped { get; } Property Value Type Description IAddLateEvent | Improve this Doc View Source SyncVarSender Declaration public SyncVarSender SyncVarSender { get; } Property Value Type Description SyncVarSender | Improve this Doc View Source World Declaration public NetworkWorld World { get; } Property Value Type Description NetworkWorld Methods | Improve this Doc View Source AddConnection(INetworkPlayer) This accepts a network connection and adds it to the server. This connection will use the callbacks registered with the server. Declaration public void AddConnection(INetworkPlayer player) Parameters Type Name Description INetworkPlayer player Network connection to add. | Improve this Doc View Source RemoveConnection(INetworkPlayer) This removes an external connection. Declaration public void RemoveConnection(INetworkPlayer player) Parameters Type Name Description INetworkPlayer player | Improve this Doc View Source SendToAll<T>(T, Int32) Send a message to all connected clients. Declaration public void SendToAll<T>(T msg, int channelId = 0) Parameters Type Name Description T msg Message Int32 channelId Transport channel to use Type Parameters Name Description T Message type | Improve this Doc View Source SendToMany<T>(IEnumerable<INetworkPlayer>, T, Int32) Sends a message to many connections Declaration public static void SendToMany<T>(IEnumerable<INetworkPlayer> players, T msg, int channelId = 0) Parameters Type Name Description IEnumerable < INetworkPlayer > players T msg Int32 channelId Type Parameters Name Description T | Improve this Doc View Source SendToMany<T>(IReadOnlyList<INetworkPlayer>, T, Int32) Sends a message to many connections Same as SendToMany<T>(IEnumerable<INetworkPlayer>, T, Int32) but uses for loop to avoid allocations Declaration public static void SendToMany<T>(IReadOnlyList<INetworkPlayer> players, T msg, int channelId = 0) Parameters Type Name Description IReadOnlyList < INetworkPlayer > players T msg Int32 channelId Type Parameters Name Description T Remarks Using list in foreach loop causes Unity's mono version to box the struct which causes allocations, Understanding the managed heap | Improve this Doc View Source StartServer(NetworkClient) Start the server If localClient is given then will start in host mode Declaration public void StartServer(NetworkClient localClient = null) Parameters Type Name Description NetworkClient localClient if not null then start the server and client in hostmode | Improve this Doc View Source Stop() This shuts down the server and disconnects all clients. If In host mode, this will also stop the local client Declaration public void Stop() Implements INetworkServer"
  },
  "api/Mirage.NetworkTime.html": {
    "href": "api/Mirage.NetworkTime.html",
    "title": "Class NetworkTime",
    "keywords": "Class NetworkTime Synchronize time between the server and the clients Inheritance Object NetworkTime Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage Assembly : Mirage.dll Syntax public class NetworkTime Constructors | Improve this Doc View Source NetworkTime() Declaration public NetworkTime() Fields | Improve this Doc View Source PingInterval how often are we sending ping messages used to calculate network time and RTT Declaration public float PingInterval Field Value Type Description Single | Improve this Doc View Source PingWindowSize average out the last few results from Ping Declaration public int PingWindowSize Field Value Type Description Int32 Properties | Improve this Doc View Source Offset Clock difference in seconds between the client and the server Declaration public double Offset { get; } Property Value Type Description Double Remarks Note this value is always 0 at the server | Improve this Doc View Source Rtt how long in seconds does it take for a message to go to the server and come back Declaration public double Rtt { get; } Property Value Type Description Double | Improve this Doc View Source RttSd Measure the standard deviation of rtt the higher the number, the less accurate rtt is Declaration public double RttSd { get; } Property Value Type Description Double | Improve this Doc View Source RttVar measure variance of rtt the higher the number, the less accurate rtt is Declaration public double RttVar { get; } Property Value Type Description Double | Improve this Doc View Source Time The time in seconds since the server started. Declaration public double Time { get; } Property Value Type Description Double Remarks Note this value works in the client and the server the value is synchronized accross the network with high accuracy You should not cast this down to a float because the it loses too much accuracy when the server is up for a while I measured the accuracy of float and I got this: for the same day, accuracy is better than 1 ms after 1 day, accuracy goes down to 7 ms after 10 days, accuracy is 61 ms after 30 days , accuracy is 238 ms after 60 days, accuracy is 454 ms in other words, if the server is running for 2 months, and you cast down to float, then the time will jump in 0.4s intervals. | Improve this Doc View Source TimeSd standard deviation of time. The higher the variance, the less accurate the time is Declaration public double TimeSd { get; } Property Value Type Description Double | Improve this Doc View Source TimeVar Measurement of the variance of time. The higher the variance, the less accurate the time is Declaration public double TimeVar { get; } Property Value Type Description Double Methods | Improve this Doc View Source Reset() Declaration public void Reset()"
  },
  "api/Mirage.NetworkTransform.html": {
    "href": "api/Mirage.NetworkTransform.html",
    "title": "Class NetworkTransform",
    "keywords": "Class NetworkTransform Inheritance Object Object Component Behaviour MonoBehaviour NetworkBehaviour NetworkTransformBase NetworkTransform Inherited Members NetworkTransformBase.ClientAuthority NetworkTransformBase.LocalPositionSensitivity NetworkTransformBase.LocalRotationSensitivity NetworkTransformBase.LocalScaleSensitivity NetworkTransformBase.SerializeIntoWriter(NetworkWriter, Vector3, Quaternion, Vector3) NetworkTransformBase.OnSerialize(NetworkWriter, Boolean) NetworkTransformBase.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.IsServer NetworkBehaviour.IsClient NetworkBehaviour.IsLocalClient NetworkBehaviour.IsLocalPlayer NetworkBehaviour.IsServerOnly NetworkBehaviour.IsClientOnly NetworkBehaviour.HasAuthority NetworkBehaviour.NetId NetworkBehaviour.Server NetworkBehaviour.ServerObjectManager NetworkBehaviour.Client NetworkBehaviour.ClientObjectManager NetworkBehaviour.Owner NetworkBehaviour.World NetworkBehaviour.NetworkTime NetworkBehaviour.SyncVarDirtyBits NetworkBehaviour.GetSyncVarHookGuard(UInt64) NetworkBehaviour.SetSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.Identity NetworkBehaviour.COMPONENT_INDEX_NOT_FOUND NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(ISyncObject) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.StillDirty() NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.GetRpcCount() NetworkBehaviour.remoteCallCollection MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.Components.dll Syntax [DisallowMultipleComponent] [AddComponentMenu(\"Network/NetworkTransform\")] [HelpURL(\"https://miragenet.github.io/Mirage/Articles/Components/NetworkTransform.html\")] public class NetworkTransform : NetworkTransformBase Properties | Improve this Doc View Source TargetComponent Declaration protected override Transform TargetComponent { get; } Property Value Type Description Transform Overrides NetworkTransformBase.TargetComponent"
  },
  "api/Mirage.NetworkTransformBase.DataPoint.html": {
    "href": "api/Mirage.NetworkTransformBase.DataPoint.html",
    "title": "Class NetworkTransformBase.DataPoint",
    "keywords": "Class NetworkTransformBase.DataPoint Inheritance Object NetworkTransformBase.DataPoint Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage Assembly : Mirage.Components.dll Syntax public class DataPoint Fields | Improve this Doc View Source LocalPosition Declaration public Vector3 LocalPosition Field Value Type Description Vector3 | Improve this Doc View Source LocalRotation Declaration public Quaternion LocalRotation Field Value Type Description Quaternion | Improve this Doc View Source LocalScale Declaration public Vector3 LocalScale Field Value Type Description Vector3 | Improve this Doc View Source MovementSpeed Declaration public float MovementSpeed Field Value Type Description Single | Improve this Doc View Source TimeStamp Declaration public float TimeStamp Field Value Type Description Single"
  },
  "api/Mirage.NetworkTransformBase.html": {
    "href": "api/Mirage.NetworkTransformBase.html",
    "title": "Class NetworkTransformBase",
    "keywords": "Class NetworkTransformBase Inheritance Object Object Component Behaviour MonoBehaviour NetworkBehaviour NetworkTransformBase NetworkTransform NetworkTransformChild Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.IsServer NetworkBehaviour.IsClient NetworkBehaviour.IsLocalClient NetworkBehaviour.IsLocalPlayer NetworkBehaviour.IsServerOnly NetworkBehaviour.IsClientOnly NetworkBehaviour.HasAuthority NetworkBehaviour.NetId NetworkBehaviour.Server NetworkBehaviour.ServerObjectManager NetworkBehaviour.Client NetworkBehaviour.ClientObjectManager NetworkBehaviour.Owner NetworkBehaviour.World NetworkBehaviour.NetworkTime NetworkBehaviour.SyncVarDirtyBits NetworkBehaviour.GetSyncVarHookGuard(UInt64) NetworkBehaviour.SetSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.Identity NetworkBehaviour.COMPONENT_INDEX_NOT_FOUND NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(ISyncObject) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.StillDirty() NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.GetRpcCount() NetworkBehaviour.remoteCallCollection MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.Components.dll Syntax public abstract class NetworkTransformBase : NetworkBehaviour Fields | Improve this Doc View Source ClientAuthority Declaration [Header(\"Authority\")] [Tooltip(\"Set to true if moves come from owner client, set to false if moves always come from server\")] public bool ClientAuthority Field Value Type Description Boolean | Improve this Doc View Source LocalPositionSensitivity Declaration [Header(\"Sensitivity\")] [Tooltip(\"Changes to the transform must exceed these values to be transmitted on the network.\")] public float LocalPositionSensitivity Field Value Type Description Single | Improve this Doc View Source LocalRotationSensitivity Declaration [Tooltip(\"If rotation exceeds this angle, it will be transmitted on the network\")] public float LocalRotationSensitivity Field Value Type Description Single | Improve this Doc View Source LocalScaleSensitivity Declaration [Tooltip(\"Changes to the transform must exceed these values to be transmitted on the network.\")] public float LocalScaleSensitivity Field Value Type Description Single Properties | Improve this Doc View Source TargetComponent Declaration protected abstract Transform TargetComponent { get; } Property Value Type Description Transform Methods | Improve this Doc View Source OnDeserialize(NetworkReader, Boolean) Declaration public override void OnDeserialize(NetworkReader reader, bool initialState) Parameters Type Name Description NetworkReader reader Boolean initialState Overrides NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) | Improve this Doc View Source OnSerialize(NetworkWriter, Boolean) Declaration public override bool OnSerialize(NetworkWriter writer, bool initialState) Parameters Type Name Description NetworkWriter writer Boolean initialState Returns Type Description Boolean Overrides NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) | Improve this Doc View Source SerializeIntoWriter(NetworkWriter, Vector3, Quaternion, Vector3) Declaration public static void SerializeIntoWriter(NetworkWriter writer, Vector3 position, Quaternion rotation, Vector3 scale) Parameters Type Name Description NetworkWriter writer Vector3 position Quaternion rotation Vector3 scale"
  },
  "api/Mirage.NetworkTransformChild.html": {
    "href": "api/Mirage.NetworkTransformChild.html",
    "title": "Class NetworkTransformChild",
    "keywords": "Class NetworkTransformChild A component to synchronize the position of child transforms of networked objects. There must be a NetworkTransform on the root object of the hierarchy. There can be multiple NetworkTransformChild components on an object. This does not use physics for synchronization, it simply synchronizes the localPosition and localRotation of the child transform and lerps towards the received values. Inheritance Object Object Component Behaviour MonoBehaviour NetworkBehaviour NetworkTransformBase NetworkTransformChild Inherited Members NetworkTransformBase.ClientAuthority NetworkTransformBase.LocalPositionSensitivity NetworkTransformBase.LocalRotationSensitivity NetworkTransformBase.LocalScaleSensitivity NetworkTransformBase.SerializeIntoWriter(NetworkWriter, Vector3, Quaternion, Vector3) NetworkTransformBase.OnSerialize(NetworkWriter, Boolean) NetworkTransformBase.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.IsServer NetworkBehaviour.IsClient NetworkBehaviour.IsLocalClient NetworkBehaviour.IsLocalPlayer NetworkBehaviour.IsServerOnly NetworkBehaviour.IsClientOnly NetworkBehaviour.HasAuthority NetworkBehaviour.NetId NetworkBehaviour.Server NetworkBehaviour.ServerObjectManager NetworkBehaviour.Client NetworkBehaviour.ClientObjectManager NetworkBehaviour.Owner NetworkBehaviour.World NetworkBehaviour.NetworkTime NetworkBehaviour.SyncVarDirtyBits NetworkBehaviour.GetSyncVarHookGuard(UInt64) NetworkBehaviour.SetSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.Identity NetworkBehaviour.COMPONENT_INDEX_NOT_FOUND NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(ISyncObject) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.StillDirty() NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.GetRpcCount() NetworkBehaviour.remoteCallCollection MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.Components.dll Syntax [AddComponentMenu(\"Network/NetworkTransformChild\")] [HelpURL(\"https://miragenet.github.io/Mirage/Articles/Components/NetworkTransformChild.html\")] public class NetworkTransformChild : NetworkTransformBase Fields | Improve this Doc View Source Target Declaration [Header(\"Target\")] public Transform Target Field Value Type Description Transform Properties | Improve this Doc View Source TargetComponent Declaration protected override Transform TargetComponent { get; } Property Value Type Description Transform Overrides NetworkTransformBase.TargetComponent"
  },
  "api/Mirage.NetworkVisibility.html": {
    "href": "api/Mirage.NetworkVisibility.html",
    "title": "Class NetworkVisibility",
    "keywords": "Class NetworkVisibility Inheritance Object Object Component Behaviour MonoBehaviour NetworkBehaviour NetworkVisibility NetworkMatchChecker NetworkProximityChecker NetworkSceneChecker SceneVisibilityChecker Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.IsServer NetworkBehaviour.IsClient NetworkBehaviour.IsLocalClient NetworkBehaviour.IsLocalPlayer NetworkBehaviour.IsServerOnly NetworkBehaviour.IsClientOnly NetworkBehaviour.HasAuthority NetworkBehaviour.NetId NetworkBehaviour.Server NetworkBehaviour.ServerObjectManager NetworkBehaviour.Client NetworkBehaviour.ClientObjectManager NetworkBehaviour.Owner NetworkBehaviour.World NetworkBehaviour.NetworkTime NetworkBehaviour.SyncVarDirtyBits NetworkBehaviour.GetSyncVarHookGuard(UInt64) NetworkBehaviour.SetSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.Identity NetworkBehaviour.COMPONENT_INDEX_NOT_FOUND NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(ISyncObject) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.StillDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.GetRpcCount() NetworkBehaviour.remoteCallCollection MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax [DisallowMultipleComponent] public abstract class NetworkVisibility : NetworkBehaviour Methods | Improve this Doc View Source OnCheckObserver(INetworkPlayer) Callback used by the visibility system to determine if an observer (player) can see this object. If this function returns true, the network connection will be added as an observer. Declaration public abstract bool OnCheckObserver(INetworkPlayer player) Parameters Type Name Description INetworkPlayer player Network connection of a player. Returns Type Description Boolean True if the player can see this object. | Improve this Doc View Source OnRebuildObservers(HashSet<INetworkPlayer>, Boolean) Callback used by the visibility system to (re)construct the set of observers that can see this object. Implementations of this callback should add network connections of players that can see this object to the observers set. NOTE: override this function if you want to optimize this loop in your visibility, for example if you need to call GetComponent on this object you can call it once at the start of the loop Declaration public virtual void OnRebuildObservers(HashSet<INetworkPlayer> observers, bool initialize) Parameters Type Name Description HashSet < INetworkPlayer > observers The new set of observers for this object. Boolean initialize True if the set of observers is being built for the first time."
  },
  "api/Mirage.NetworkWorld.html": {
    "href": "api/Mirage.NetworkWorld.html",
    "title": "Class NetworkWorld",
    "keywords": "Class NetworkWorld Holds collection of spawned network objects This class works on both server and client Inheritance Object NetworkWorld Implements IObjectLocator Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage Assembly : Mirage.dll Syntax public class NetworkWorld : IObjectLocator Constructors | Improve this Doc View Source NetworkWorld() Declaration public NetworkWorld() Properties | Improve this Doc View Source SpawnedIdentities Declaration public IReadOnlyCollection<NetworkIdentity> SpawnedIdentities { get; } Property Value Type Description IReadOnlyCollection < NetworkIdentity > | Improve this Doc View Source Time Time kept in this world Declaration public NetworkTime Time { get; } Property Value Type Description NetworkTime Methods | Improve this Doc View Source TryGetIdentity(UInt32, out NetworkIdentity) Declaration public bool TryGetIdentity(uint netId, out NetworkIdentity identity) Parameters Type Name Description UInt32 netId NetworkIdentity identity Returns Type Description Boolean Events | Improve this Doc View Source onSpawn Raised when object is spawned Declaration public event Action<NetworkIdentity> onSpawn Event Type Type Description Action < NetworkIdentity > | Improve this Doc View Source onUnspawn Raised when object is unspawned or destroyed Declaration public event Action<NetworkIdentity> onUnspawn Event Type Type Description Action < NetworkIdentity > Implements IObjectLocator"
  },
  "api/Mirage.ObjectDestroyMessage.html": {
    "href": "api/Mirage.ObjectDestroyMessage.html",
    "title": "Struct ObjectDestroyMessage",
    "keywords": "Struct ObjectDestroyMessage Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax public struct ObjectDestroyMessage Fields | Improve this Doc View Source netId Declaration public uint netId Field Value Type Description UInt32"
  },
  "api/Mirage.ObjectHideMessage.html": {
    "href": "api/Mirage.ObjectHideMessage.html",
    "title": "Struct ObjectHideMessage",
    "keywords": "Struct ObjectHideMessage Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax public struct ObjectHideMessage Fields | Improve this Doc View Source netId Declaration public uint netId Field Value Type Description UInt32"
  },
  "api/Mirage.ObjectReady.html": {
    "href": "api/Mirage.ObjectReady.html",
    "title": "Class ObjectReady",
    "keywords": "Class ObjectReady Inheritance Object Object Component Behaviour MonoBehaviour NetworkBehaviour ObjectReady Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.IsServer NetworkBehaviour.IsClient NetworkBehaviour.IsLocalClient NetworkBehaviour.IsLocalPlayer NetworkBehaviour.IsServerOnly NetworkBehaviour.IsClientOnly NetworkBehaviour.HasAuthority NetworkBehaviour.NetId NetworkBehaviour.Server NetworkBehaviour.ServerObjectManager NetworkBehaviour.Client NetworkBehaviour.ClientObjectManager NetworkBehaviour.Owner NetworkBehaviour.World NetworkBehaviour.NetworkTime NetworkBehaviour.SyncVarDirtyBits NetworkBehaviour.GetSyncVarHookGuard(UInt64) NetworkBehaviour.SetSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.Identity NetworkBehaviour.COMPONENT_INDEX_NOT_FOUND NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(ISyncObject) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.StillDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.GetRpcCount() NetworkBehaviour.remoteCallCollection MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.Components.dll Syntax public class ObjectReady : NetworkBehaviour Fields | Improve this Doc View Source IsReady Declaration public bool IsReady Field Value Type Description Boolean Methods | Improve this Doc View Source Ready() Declaration public void Ready() | Improve this Doc View Source SetClientNotReady() Declaration public void SetClientNotReady() | Improve this Doc View Source SetClientReady() Declaration public void SetClientReady()"
  },
  "api/Mirage.OnlineOfflineScene.html": {
    "href": "api/Mirage.OnlineOfflineScene.html",
    "title": "Class OnlineOfflineScene",
    "keywords": "Class OnlineOfflineScene Inheritance Object Object Component Behaviour MonoBehaviour OnlineOfflineScene Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.Components.dll Syntax public class OnlineOfflineScene : MonoBehaviour Fields | Improve this Doc View Source NetworkSceneManager Declaration public NetworkSceneManager NetworkSceneManager Field Value Type Description NetworkSceneManager | Improve this Doc View Source OfflineScene Declaration [Tooltip(\"Assign the OfflineScene to load for this zone\")] public string OfflineScene Field Value Type Description String | Improve this Doc View Source OnlineScene Declaration [Tooltip(\"Assign the OnlineScene to load for this zone\")] public string OnlineScene Field Value Type Description String | Improve this Doc View Source Server Declaration [FormerlySerializedAs(\"server\")] public NetworkServer Server Field Value Type Description NetworkServer"
  },
  "api/Mirage.PipePeerConnection.html": {
    "href": "api/Mirage.PipePeerConnection.html",
    "title": "Class PipePeerConnection",
    "keywords": "Class PipePeerConnection A IConnection that is directly sends data to a IDataHandler Inheritance Object PipePeerConnection Implements IConnection Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax public class PipePeerConnection : IConnection Properties | Improve this Doc View Source State Declaration public ConnectionState State { get; } Property Value Type Description ConnectionState Methods | Improve this Doc View Source Create(IDataHandler, IDataHandler, Action, Action) Declaration public static (IConnection clientConn, IConnection serverConn) Create(IDataHandler clientHandler, IDataHandler serverHandler, Action ClientOnDisconnect, Action ServerOnDisconnect) Parameters Type Name Description IDataHandler clientHandler IDataHandler serverHandler Action ClientOnDisconnect Action ServerOnDisconnect Returns Type Description ValueTuple < IConnection , IConnection > | Improve this Doc View Source SendNotify(ArraySegment<Byte>) Declaration public INotifyToken SendNotify(ArraySegment<byte> packet) Parameters Type Name Description ArraySegment < Byte > packet Returns Type Description INotifyToken | Improve this Doc View Source SendNotify(ArraySegment<Byte>, INotifyCallBack) Declaration public void SendNotify(ArraySegment<byte> packet, INotifyCallBack callBacks) Parameters Type Name Description ArraySegment < Byte > packet INotifyCallBack callBacks | Improve this Doc View Source SendNotify(Byte[]) Declaration public INotifyToken SendNotify(byte[] packet) Parameters Type Name Description Byte [] packet Returns Type Description INotifyToken | Improve this Doc View Source SendNotify(Byte[], INotifyCallBack) Declaration public void SendNotify(byte[] packet, INotifyCallBack callBacks) Parameters Type Name Description Byte [] packet INotifyCallBack callBacks | Improve this Doc View Source SendNotify(Byte[], Int32, Int32) Declaration public INotifyToken SendNotify(byte[] packet, int offset, int length) Parameters Type Name Description Byte [] packet Int32 offset Int32 length Returns Type Description INotifyToken | Improve this Doc View Source SendNotify(Byte[], Int32, Int32, INotifyCallBack) Declaration public void SendNotify(byte[] packet, int offset, int length, INotifyCallBack callBacks) Parameters Type Name Description Byte [] packet Int32 offset Int32 length INotifyCallBack callBacks | Improve this Doc View Source SendReliable(ArraySegment<Byte>) Declaration public void SendReliable(ArraySegment<byte> packet) Parameters Type Name Description ArraySegment < Byte > packet | Improve this Doc View Source SendReliable(Byte[]) Declaration public void SendReliable(byte[] packet) Parameters Type Name Description Byte [] packet | Improve this Doc View Source SendReliable(Byte[], Int32, Int32) Declaration public void SendReliable(byte[] message, int offset, int length) Parameters Type Name Description Byte [] message Int32 offset Int32 length | Improve this Doc View Source SendUnreliable(ArraySegment<Byte>) Declaration public void SendUnreliable(ArraySegment<byte> packet) Parameters Type Name Description ArraySegment < Byte > packet | Improve this Doc View Source SendUnreliable(Byte[]) Declaration public void SendUnreliable(byte[] packet) Parameters Type Name Description Byte [] packet | Improve this Doc View Source SendUnreliable(Byte[], Int32, Int32) Declaration public void SendUnreliable(byte[] packet, int offset, int length) Parameters Type Name Description Byte [] packet Int32 offset Int32 length | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Explicit Interface Implementations | Improve this Doc View Source IConnection.Disconnect() Declaration void IConnection.Disconnect() | Improve this Doc View Source IConnection.EndPoint Declaration IEndPoint IConnection.EndPoint { get; } Returns Type Description IEndPoint Implements IConnection"
  },
  "api/Mirage.PipePeerConnection.PipeEndPoint.html": {
    "href": "api/Mirage.PipePeerConnection.PipeEndPoint.html",
    "title": "Class PipePeerConnection.PipeEndPoint",
    "keywords": "Class PipePeerConnection.PipeEndPoint Inheritance Object PipePeerConnection.PipeEndPoint Implements IEndPoint Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage Assembly : Mirage.dll Syntax public class PipeEndPoint : IEndPoint Explicit Interface Implementations | Improve this Doc View Source IEndPoint.CreateCopy() Declaration IEndPoint IEndPoint.CreateCopy() Returns Type Description IEndPoint Implements IEndPoint"
  },
  "api/Mirage.PipePeerConnection.PipeNotifyToken.html": {
    "href": "api/Mirage.PipePeerConnection.PipeNotifyToken.html",
    "title": "Struct PipePeerConnection.PipeNotifyToken",
    "keywords": "Struct PipePeerConnection.PipeNotifyToken Token that invokes Delivered immediately Implements INotifyToken Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax public struct PipeNotifyToken : INotifyToken Events | Improve this Doc View Source Delivered Declaration public event Action Delivered Event Type Type Description Action | Improve this Doc View Source Lost Declaration public event Action Lost Event Type Type Description Action Implements INotifyToken"
  },
  "api/Mirage.PlayerSceneChangeEvent.html": {
    "href": "api/Mirage.PlayerSceneChangeEvent.html",
    "title": "Class PlayerSceneChangeEvent",
    "keywords": "Class PlayerSceneChangeEvent Inheritance Object UnityEventBase UnityEvent < INetworkPlayer > PlayerSceneChangeEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<INetworkPlayer>.AddListener(UnityAction<INetworkPlayer>) UnityEvent<INetworkPlayer>.RemoveListener(UnityAction<INetworkPlayer>) UnityEngine.Events.UnityEvent<Mirage.INetworkPlayer>.FindMethod_Impl(System.String, System.Type) UnityEvent<INetworkPlayer>.Invoke(INetworkPlayer) UnityEventBase.ISerializationCallbackReceiver.OnBeforeSerialize() UnityEventBase.ISerializationCallbackReceiver.OnAfterDeserialize() UnityEventBase.FindMethod_Impl(String, Object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(Int32) UnityEventBase.GetPersistentMethodName(Int32) UnityEventBase.SetPersistentListenerState(Int32, UnityEventCallState) UnityEventBase.AddListener(Object, MethodInfo) UnityEventBase.RemoveListener(Object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(Object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(Object, String, Type[]) UnityEngine.Events.UnityEventBase.GetValidMethodInfo(System.Type, System.String, System.Type[]) UnityEventBase.ValidateRegistration(MethodInfo, Object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, Object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(Int32, Object, MethodInfo) UnityEngine.Events.UnityEventBase.RegisterPersistentListener(System.Int32, System.Object, System.Type, System.Reflection.MethodInfo) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax [Serializable] public class PlayerSceneChangeEvent : UnityEvent<INetworkPlayer>, ISerializationCallbackReceiver Implements ISerializationCallbackReceiver"
  },
  "api/Mirage.ReadOnlyInspectorAttribute.html": {
    "href": "api/Mirage.ReadOnlyInspectorAttribute.html",
    "title": "Class ReadOnlyInspectorAttribute",
    "keywords": "Class ReadOnlyInspectorAttribute Draws UnityEvent as a foldout Inheritance Object Attribute PropertyAttribute ReadOnlyInspectorAttribute Inherited Members PropertyAttribute.order Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage Assembly : Mirage.dll Syntax [AttributeUsage(AttributeTargets.Field)] public sealed class ReadOnlyInspectorAttribute : PropertyAttribute"
  },
  "api/Mirage.RemoteCalls.ClientRpcSender.html": {
    "href": "api/Mirage.RemoteCalls.ClientRpcSender.html",
    "title": "Class ClientRpcSender",
    "keywords": "Class ClientRpcSender Inheritance Object ClientRpcSender Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.RemoteCalls Assembly : Mirage.dll Syntax public static class ClientRpcSender Methods | Improve this Doc View Source Send(NetworkBehaviour, Int32, NetworkWriter, Int32, Boolean) Declaration public static void Send(NetworkBehaviour behaviour, int index, NetworkWriter writer, int channelId, bool excludeOwner) Parameters Type Name Description NetworkBehaviour behaviour Int32 index NetworkWriter writer Int32 channelId Boolean excludeOwner | Improve this Doc View Source SendTarget(NetworkBehaviour, Int32, NetworkWriter, Int32, INetworkPlayer) Declaration public static void SendTarget(NetworkBehaviour behaviour, int index, NetworkWriter writer, int channelId, INetworkPlayer player) Parameters Type Name Description NetworkBehaviour behaviour Int32 index NetworkWriter writer Int32 channelId INetworkPlayer player"
  },
  "api/Mirage.RemoteCalls.html": {
    "href": "api/Mirage.RemoteCalls.html",
    "title": "Namespace Mirage.RemoteCalls",
    "keywords": "Namespace Mirage.RemoteCalls Classes ClientRpcSender RemoteCall Used for invoking a RPC methods RemoteCallCollection ServerRpcSender Methods used by weaver to send RPCs Enums RpcInvokeType Delegates RequestDelegate<T> RpcDelegate Delegate for ServerRpc functions."
  },
  "api/Mirage.RemoteCalls.RemoteCall.html": {
    "href": "api/Mirage.RemoteCalls.RemoteCall.html",
    "title": "Class RemoteCall",
    "keywords": "Class RemoteCall Used for invoking a RPC methods Inheritance Object RemoteCall Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage.RemoteCalls Assembly : Mirage.dll Syntax public class RemoteCall Constructors | Improve this Doc View Source RemoteCall(Type, RpcInvokeType, RpcDelegate, Boolean, String) Declaration public RemoteCall(Type declaringType, RpcInvokeType invokeType, RpcDelegate function, bool requireAuthority, string name) Parameters Type Name Description Type declaringType RpcInvokeType invokeType RpcDelegate function Boolean requireAuthority String name Fields | Improve this Doc View Source DeclaringType Type that rpc was declared in Declaration public readonly Type DeclaringType Field Value Type Description Type | Improve this Doc View Source function Function to be invoked when receiving message Declaration public readonly RpcDelegate function Field Value Type Description RpcDelegate | Improve this Doc View Source InvokeType Server rpc or client rpc Declaration public readonly RpcInvokeType InvokeType Field Value Type Description RpcInvokeType | Improve this Doc View Source name User friendly name Declaration public readonly string name Field Value Type Description String | Improve this Doc View Source RequireAuthority Used by ServerRpc Declaration public readonly bool RequireAuthority Field Value Type Description Boolean Methods | Improve this Doc View Source AreEqual(Type, RpcInvokeType, RpcDelegate) Declaration public bool AreEqual(Type declaringType, RpcInvokeType invokeType, RpcDelegate function) Parameters Type Name Description Type declaringType RpcInvokeType invokeType RpcDelegate function Returns Type Description Boolean | Improve this Doc View Source ToString() User friendly name used for debug/error messages Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Mirage.RemoteCalls.RemoteCallCollection.html": {
    "href": "api/Mirage.RemoteCalls.RemoteCallCollection.html",
    "title": "Class RemoteCallCollection",
    "keywords": "Class RemoteCallCollection Inheritance Object RemoteCallCollection Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.RemoteCalls Assembly : Mirage.dll Syntax public class RemoteCallCollection Constructors | Improve this Doc View Source RemoteCallCollection(NetworkBehaviour) Declaration public RemoteCallCollection(NetworkBehaviour behaviour) Parameters Type Name Description NetworkBehaviour behaviour Fields | Improve this Doc View Source remoteCalls Declaration public RemoteCall[] remoteCalls Field Value Type Description RemoteCall [] Methods | Improve this Doc View Source Get(Int32) Declaration public RemoteCall Get(int index) Parameters Type Name Description Int32 index Returns Type Description RemoteCall | Improve this Doc View Source Register(Int32, Type, String, RpcInvokeType, RpcDelegate, Boolean) Declaration public void Register(int index, Type invokeClass, string name, RpcInvokeType invokerType, RpcDelegate func, bool cmdRequireAuthority) Parameters Type Name Description Int32 index Type invokeClass String name RpcInvokeType invokerType RpcDelegate func Boolean cmdRequireAuthority | Improve this Doc View Source RegisterRequest<T>(Int32, Type, String, RequestDelegate<T>, Boolean) Declaration public void RegisterRequest<T>(int index, Type invokeClass, string name, RequestDelegate<T> func, bool cmdRequireAuthority) Parameters Type Name Description Int32 index Type invokeClass String name RequestDelegate <T> func Boolean cmdRequireAuthority Type Parameters Name Description T"
  },
  "api/Mirage.RemoteCalls.RequestDelegate-1.html": {
    "href": "api/Mirage.RemoteCalls.RequestDelegate-1.html",
    "title": "Delegate RequestDelegate<T>",
    "keywords": "Delegate RequestDelegate<T> Namespace : Mirage.RemoteCalls Assembly : Mirage.dll Syntax public delegate UniTask<T> RequestDelegate<T>(NetworkBehaviour obj, NetworkReader reader, INetworkPlayer senderPlayer, int replyId); Parameters Type Name Description NetworkBehaviour obj NetworkReader reader INetworkPlayer senderPlayer Int32 replyId Returns Type Description Cysharp.Threading.Tasks.UniTask <T> Type Parameters Name Description T"
  },
  "api/Mirage.RemoteCalls.RpcDelegate.html": {
    "href": "api/Mirage.RemoteCalls.RpcDelegate.html",
    "title": "Delegate RpcDelegate",
    "keywords": "Delegate RpcDelegate Delegate for ServerRpc functions. Namespace : Mirage.RemoteCalls Assembly : Mirage.dll Syntax public delegate void RpcDelegate(NetworkBehaviour obj, NetworkReader reader, INetworkPlayer senderPlayer, int replyId); Parameters Type Name Description NetworkBehaviour obj NetworkReader reader INetworkPlayer senderPlayer Int32 replyId"
  },
  "api/Mirage.RemoteCalls.RpcInvokeType.html": {
    "href": "api/Mirage.RemoteCalls.RpcInvokeType.html",
    "title": "Enum RpcInvokeType",
    "keywords": "Enum RpcInvokeType Namespace : Mirage.RemoteCalls Assembly : Mirage.dll Syntax public enum RpcInvokeType Fields Name Description ClientRpc ServerRpc"
  },
  "api/Mirage.RemoteCalls.ServerRpcSender.html": {
    "href": "api/Mirage.RemoteCalls.ServerRpcSender.html",
    "title": "Class ServerRpcSender",
    "keywords": "Class ServerRpcSender Methods used by weaver to send RPCs Inheritance Object ServerRpcSender Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.RemoteCalls Assembly : Mirage.dll Syntax public static class ServerRpcSender Methods | Improve this Doc View Source Send(NetworkBehaviour, Int32, NetworkWriter, Int32, Boolean) Declaration public static void Send(NetworkBehaviour behaviour, int index, NetworkWriter writer, int channelId, bool requireAuthority) Parameters Type Name Description NetworkBehaviour behaviour Int32 index NetworkWriter writer Int32 channelId Boolean requireAuthority | Improve this Doc View Source SendWithReturn<T>(NetworkBehaviour, Int32, NetworkWriter, Int32, Boolean) Declaration public static UniTask<T> SendWithReturn<T>(NetworkBehaviour behaviour, int index, NetworkWriter writer, int channelId, bool requireAuthority) Parameters Type Name Description NetworkBehaviour behaviour Int32 index NetworkWriter writer Int32 channelId Boolean requireAuthority Returns Type Description Cysharp.Threading.Tasks.UniTask <T> Type Parameters Name Description T"
  },
  "api/Mirage.RemoveAuthorityMessage.html": {
    "href": "api/Mirage.RemoveAuthorityMessage.html",
    "title": "Struct RemoveAuthorityMessage",
    "keywords": "Struct RemoveAuthorityMessage Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax public struct RemoveAuthorityMessage Fields | Improve this Doc View Source netId Declaration public uint netId Field Value Type Description UInt32"
  },
  "api/Mirage.RemoveCharacterMessage.html": {
    "href": "api/Mirage.RemoveCharacterMessage.html",
    "title": "Struct RemoveCharacterMessage",
    "keywords": "Struct RemoveCharacterMessage Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax public struct RemoveCharacterMessage Fields | Improve this Doc View Source keepAuthority Declaration public bool keepAuthority Field Value Type Description Boolean"
  },
  "api/Mirage.RpcMessage.html": {
    "href": "api/Mirage.RpcMessage.html",
    "title": "Struct RpcMessage",
    "keywords": "Struct RpcMessage Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax public struct RpcMessage Fields | Improve this Doc View Source componentIndex Declaration public int componentIndex Field Value Type Description Int32 | Improve this Doc View Source functionIndex Declaration public int functionIndex Field Value Type Description Int32 | Improve this Doc View Source netId Declaration public uint netId Field Value Type Description UInt32 | Improve this Doc View Source payload Declaration public ArraySegment<byte> payload Field Value Type Description ArraySegment < Byte >"
  },
  "api/Mirage.RpcTarget.html": {
    "href": "api/Mirage.RpcTarget.html",
    "title": "Enum RpcTarget",
    "keywords": "Enum RpcTarget Used by ClientRpc to tell mirage who to send remote call to Namespace : Mirage Assembly : Mirage.dll Syntax public enum RpcTarget Fields Name Description Observers Sends to all NetworkPlayer that can see the object Owner Sends to the NetworkPlayer that owns the object Player Sends to the NetworkPlayer that is given as an argument in the RPC function (requires target to be an observer)"
  },
  "api/Mirage.SceneAttribute.html": {
    "href": "api/Mirage.SceneAttribute.html",
    "title": "Class SceneAttribute",
    "keywords": "Class SceneAttribute Converts a string property into a Scene property in the inspector Inheritance Object Attribute PropertyAttribute SceneAttribute Inherited Members PropertyAttribute.order Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage Assembly : Mirage.dll Syntax public sealed class SceneAttribute : PropertyAttribute"
  },
  "api/Mirage.SceneChangeFinishedEvent.html": {
    "href": "api/Mirage.SceneChangeFinishedEvent.html",
    "title": "Class SceneChangeFinishedEvent",
    "keywords": "Class SceneChangeFinishedEvent Event fires from INetworkSceneManager when a scene change finishes on either Server or Client. Scene - Loaded scene SceneOperation - Scene change type (Normal, Additive Load, Additive Unload). Inheritance Object UnityEventBase UnityEvent < Scene , SceneOperation > SceneChangeFinishedEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<Scene, SceneOperation>.AddListener(UnityAction<Scene, SceneOperation>) UnityEvent<Scene, SceneOperation>.RemoveListener(UnityAction<Scene, SceneOperation>) UnityEngine.Events.UnityEvent<UnityEngine.SceneManagement.Scene, Mirage.SceneOperation>.FindMethod_Impl(System.String, System.Type) UnityEvent<Scene, SceneOperation>.Invoke(Scene, SceneOperation) UnityEventBase.ISerializationCallbackReceiver.OnBeforeSerialize() UnityEventBase.ISerializationCallbackReceiver.OnAfterDeserialize() UnityEventBase.FindMethod_Impl(String, Object) UnityEngine.Events.UnityEventBase.FindMethod_Impl(System.String, System.Type) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(Int32) UnityEventBase.GetPersistentMethodName(Int32) UnityEventBase.SetPersistentListenerState(Int32, UnityEventCallState) UnityEventBase.AddListener(Object, MethodInfo) UnityEventBase.RemoveListener(Object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(Object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(Object, String, Type[]) UnityEngine.Events.UnityEventBase.GetValidMethodInfo(System.Type, System.String, System.Type[]) UnityEventBase.ValidateRegistration(MethodInfo, Object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, Object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(Int32, Object, MethodInfo) UnityEngine.Events.UnityEventBase.RegisterPersistentListener(System.Int32, System.Object, System.Type, System.Reflection.MethodInfo) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax [Serializable] public class SceneChangeFinishedEvent : UnityEvent<Scene, SceneOperation>, ISerializationCallbackReceiver Implements ISerializationCallbackReceiver"
  },
  "api/Mirage.SceneChangeStartedEvent.html": {
    "href": "api/Mirage.SceneChangeStartedEvent.html",
    "title": "Class SceneChangeStartedEvent",
    "keywords": "Class SceneChangeStartedEvent Event fires from INetworkSceneManager when a scene change begins on either Server or Client. Scene - Name or path of the scene that's about to be loaded SceneOperation - Scene change type (Normal, Additive Load, Additive Unload). Inheritance Object UnityEventBase UnityEvent < String , SceneOperation > SceneChangeStartedEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<String, SceneOperation>.AddListener(UnityAction<String, SceneOperation>) UnityEvent<String, SceneOperation>.RemoveListener(UnityAction<String, SceneOperation>) UnityEngine.Events.UnityEvent<System.String, Mirage.SceneOperation>.FindMethod_Impl(System.String, System.Type) UnityEvent<String, SceneOperation>.Invoke(String, SceneOperation) UnityEventBase.ISerializationCallbackReceiver.OnBeforeSerialize() UnityEventBase.ISerializationCallbackReceiver.OnAfterDeserialize() UnityEventBase.FindMethod_Impl(String, Object) UnityEngine.Events.UnityEventBase.FindMethod_Impl(System.String, System.Type) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(Int32) UnityEventBase.GetPersistentMethodName(Int32) UnityEventBase.SetPersistentListenerState(Int32, UnityEventCallState) UnityEventBase.AddListener(Object, MethodInfo) UnityEventBase.RemoveListener(Object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(Object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(Object, String, Type[]) UnityEngine.Events.UnityEventBase.GetValidMethodInfo(System.Type, System.String, System.Type[]) UnityEventBase.ValidateRegistration(MethodInfo, Object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, Object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(Int32, Object, MethodInfo) UnityEngine.Events.UnityEventBase.RegisterPersistentListener(System.Int32, System.Object, System.Type, System.Reflection.MethodInfo) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax [Serializable] public class SceneChangeStartedEvent : UnityEvent<string, SceneOperation>, ISerializationCallbackReceiver Implements ISerializationCallbackReceiver"
  },
  "api/Mirage.SceneMessage.html": {
    "href": "api/Mirage.SceneMessage.html",
    "title": "Struct SceneMessage",
    "keywords": "Struct SceneMessage Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax public struct SceneMessage Fields | Improve this Doc View Source AdditiveScenes Declaration public List<string> AdditiveScenes Field Value Type Description List < String > | Improve this Doc View Source MainActivateScene Declaration public string MainActivateScene Field Value Type Description String | Improve this Doc View Source SceneOperation Declaration public SceneOperation SceneOperation Field Value Type Description SceneOperation"
  },
  "api/Mirage.SceneNotReadyMessage.html": {
    "href": "api/Mirage.SceneNotReadyMessage.html",
    "title": "Struct SceneNotReadyMessage",
    "keywords": "Struct SceneNotReadyMessage Sent to client to mark their scene as not ready Client can sent SceneReadyMessage once its scene is ready again Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax public struct SceneNotReadyMessage"
  },
  "api/Mirage.SceneOperation.html": {
    "href": "api/Mirage.SceneOperation.html",
    "title": "Enum SceneOperation",
    "keywords": "Enum SceneOperation Namespace : Mirage Assembly : Mirage.dll Syntax public enum SceneOperation : byte Fields Name Description LoadAdditive Normal UnloadAdditive"
  },
  "api/Mirage.SceneReadyMessage.html": {
    "href": "api/Mirage.SceneReadyMessage.html",
    "title": "Struct SceneReadyMessage",
    "keywords": "Struct SceneReadyMessage Sent to indicate the scene is finished loading Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax public struct SceneReadyMessage"
  },
  "api/Mirage.SceneVisibilityChecker.html": {
    "href": "api/Mirage.SceneVisibilityChecker.html",
    "title": "Class SceneVisibilityChecker",
    "keywords": "Class SceneVisibilityChecker Inheritance Object Object Component Behaviour MonoBehaviour NetworkBehaviour NetworkVisibility SceneVisibilityChecker Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.IsServer NetworkBehaviour.IsClient NetworkBehaviour.IsLocalClient NetworkBehaviour.IsLocalPlayer NetworkBehaviour.IsServerOnly NetworkBehaviour.IsClientOnly NetworkBehaviour.HasAuthority NetworkBehaviour.NetId NetworkBehaviour.Server NetworkBehaviour.ServerObjectManager NetworkBehaviour.Client NetworkBehaviour.ClientObjectManager NetworkBehaviour.Owner NetworkBehaviour.World NetworkBehaviour.NetworkTime NetworkBehaviour.SyncVarDirtyBits NetworkBehaviour.GetSyncVarHookGuard(UInt64) NetworkBehaviour.SetSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.Identity NetworkBehaviour.COMPONENT_INDEX_NOT_FOUND NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(ISyncObject) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.StillDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.GetRpcCount() NetworkBehaviour.remoteCallCollection MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.Components.dll Syntax public class SceneVisibilityChecker : NetworkVisibility Methods | Improve this Doc View Source MoveToScene(Scene) Call this function on an object to move it to a new scene and rebuild its observers Declaration public void MoveToScene(Scene scene) Parameters Type Name Description Scene scene | Improve this Doc View Source OnCheckObserver(INetworkPlayer) Declaration public override bool OnCheckObserver(INetworkPlayer player) Parameters Type Name Description INetworkPlayer player Returns Type Description Boolean Overrides NetworkVisibility.OnCheckObserver(INetworkPlayer) | Improve this Doc View Source OnRebuildObservers(HashSet<INetworkPlayer>, Boolean) Declaration public override void OnRebuildObservers(HashSet<INetworkPlayer> observers, bool initialize) Parameters Type Name Description HashSet < INetworkPlayer > observers Boolean initialize Overrides NetworkVisibility.OnRebuildObservers(HashSet<INetworkPlayer>, Boolean)"
  },
  "api/Mirage.Serialization.BitCountAttribute.html": {
    "href": "api/Mirage.Serialization.BitCountAttribute.html",
    "title": "Class BitCountAttribute",
    "keywords": "Class BitCountAttribute Tells weaver how many bits to sue for field Only works with interager fields (byte, int, ulong, enums etc) NOTE: bits are truncated when using this, so signed values will lose their sign. Use ZigZagEncodeAttribute as well if value might be negative Also See: Bit Packing Documentation Inheritance Object Attribute BitCountAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter)] public class BitCountAttribute : Attribute Constructors | Improve this Doc View Source BitCountAttribute(Int32) Declaration public BitCountAttribute(int bitCount) Parameters Type Name Description Int32 bitCount Value should be between 1 and 64"
  },
  "api/Mirage.Serialization.BitCountFromRangeAttribute.html": {
    "href": "api/Mirage.Serialization.BitCountFromRangeAttribute.html",
    "title": "Class BitCountFromRangeAttribute",
    "keywords": "Class BitCountFromRangeAttribute Calculates bitcount from then given min/max values and then packs using BitCountAttribute Also See: Bit Packing Documentation Inheritance Object Attribute BitCountFromRangeAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter)] public class BitCountFromRangeAttribute : Attribute Constructors | Improve this Doc View Source BitCountFromRangeAttribute(Int32, Int32) Declaration public BitCountFromRangeAttribute(int min, int max) Parameters Type Name Description Int32 min minimum possible int value Int32 max minimum possible max value"
  },
  "api/Mirage.Serialization.BitHelper.html": {
    "href": "api/Mirage.Serialization.BitHelper.html",
    "title": "Class BitHelper",
    "keywords": "Class BitHelper Inheritance Object BitHelper Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax public static class BitHelper Methods | Improve this Doc View Source BitCount(Single, Single) Gets the number of bits need for precision in range negative to positive max WARNING: these methods are not fast, dont use in hotpath Declaration public static int BitCount(float max, float precision) Parameters Type Name Description Single max Single precision lowest precision required, bit count will round up so real precision might be higher Returns Type Description Int32 | Improve this Doc View Source BitCount(UInt64) Gets the number of bits need for max WARNING: these methods are not fast, dont use in hotpath Declaration public static int BitCount(ulong max) Parameters Type Name Description UInt64 max Returns Type Description Int32"
  },
  "api/Mirage.Serialization.BitMask.html": {
    "href": "api/Mirage.Serialization.BitMask.html",
    "title": "Class BitMask",
    "keywords": "Class BitMask Inheritance Object BitMask Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax public static class BitMask Methods | Improve this Doc View Source Mask(Int32) Creates mask for bits (showing 32 bits for simplify, result is 64 bit) Example bits = 4 => mask = 00000000_00000000_00000000_00001111 Example bits = 10 => mask = 00000000_00000000_00000011_11111111 Declaration public static ulong Mask(int bits) Parameters Type Name Description Int32 bits Returns Type Description UInt64 | Improve this Doc View Source OuterMask(Int32, Int32) Creates Mask either side of start and end Note this mask is only valid for start [0..63] and end [0..64] Declaration public static ulong OuterMask(int start, int end) Parameters Type Name Description Int32 start Int32 end Returns Type Description UInt64"
  },
  "api/Mirage.Serialization.CollectionExtensions.html": {
    "href": "api/Mirage.Serialization.CollectionExtensions.html",
    "title": "Class CollectionExtensions",
    "keywords": "Class CollectionExtensions Inheritance Object CollectionExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax public static class CollectionExtensions Methods | Improve this Doc View Source ReadArray<T>(NetworkReader) Declaration public static T[] ReadArray<T>(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source ReadArraySegment<T>(NetworkReader) Declaration public static ArraySegment<T> ReadArraySegment<T>(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description ArraySegment <T> Type Parameters Name Description T | Improve this Doc View Source ReadBytes(NetworkReader, Int32) Declaration public static byte[] ReadBytes(this NetworkReader reader, int count) Parameters Type Name Description NetworkReader reader Int32 count Returns Type Description Byte [] | Improve this Doc View Source ReadBytesAndSize(NetworkReader) Declaration public static byte[] ReadBytesAndSize(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Byte [] array or null | Improve this Doc View Source ReadBytesAndSizeSegment(NetworkReader) Declaration public static ArraySegment<byte> ReadBytesAndSizeSegment(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description ArraySegment < Byte > | Improve this Doc View Source ReadList<T>(NetworkReader) Declaration public static List<T> ReadList<T>(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description List <T> Type Parameters Name Description T | Improve this Doc View Source WriteArray<T>(NetworkWriter, T[]) Declaration public static void WriteArray<T>(this NetworkWriter writer, T[] array) Parameters Type Name Description NetworkWriter writer T[] array Type Parameters Name Description T | Improve this Doc View Source WriteArraySegment<T>(NetworkWriter, ArraySegment<T>) Declaration public static void WriteArraySegment<T>(this NetworkWriter writer, ArraySegment<T> segment) Parameters Type Name Description NetworkWriter writer ArraySegment <T> segment Type Parameters Name Description T | Improve this Doc View Source WriteBytesAndSize(NetworkWriter, Byte[]) Write method for weaver to use Declaration public static void WriteBytesAndSize(this NetworkWriter writer, byte[] buffer) Parameters Type Name Description NetworkWriter writer Byte [] buffer array or null | Improve this Doc View Source WriteBytesAndSize(NetworkWriter, Byte[], Int32, Int32) For byte arrays with dynamic size, where the reader doesn't know how many will come Declaration public static void WriteBytesAndSize(this NetworkWriter writer, byte[] buffer, int offset, int count) Parameters Type Name Description NetworkWriter writer Byte [] buffer array or null Int32 offset Int32 count | Improve this Doc View Source WriteBytesAndSizeSegment(NetworkWriter, ArraySegment<Byte>) Declaration public static void WriteBytesAndSizeSegment(this NetworkWriter writer, ArraySegment<byte> buffer) Parameters Type Name Description NetworkWriter writer ArraySegment < Byte > buffer | Improve this Doc View Source WriteList<T>(NetworkWriter, List<T>) Declaration public static void WriteList<T>(this NetworkWriter writer, List<T> list) Parameters Type Name Description NetworkWriter writer List <T> list Type Parameters Name Description T"
  },
  "api/Mirage.Serialization.CompressedExtensions.html": {
    "href": "api/Mirage.Serialization.CompressedExtensions.html",
    "title": "Class CompressedExtensions",
    "keywords": "Class CompressedExtensions Inheritance Object CompressedExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax public static class CompressedExtensions Methods | Improve this Doc View Source ReadQuaternion(NetworkReader) Unpacks Quaternion using Default9 Declaration public static Quaternion ReadQuaternion(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Quaternion | Improve this Doc View Source WriteQuaternion(NetworkWriter, Quaternion) Packs Quaternion using Default9 Declaration public static void WriteQuaternion(this NetworkWriter writer, Quaternion rotation) Parameters Type Name Description NetworkWriter writer Quaternion rotation"
  },
  "api/Mirage.Serialization.FloatPackAttribute.html": {
    "href": "api/Mirage.Serialization.FloatPackAttribute.html",
    "title": "Class FloatPackAttribute",
    "keywords": "Class FloatPackAttribute Packs a float field, clamped from -max to +max, with Also See: Bit Packing Documentation Inheritance Object Attribute FloatPackAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter)] public class FloatPackAttribute : Attribute Constructors | Improve this Doc View Source FloatPackAttribute(Single, Int32) Declaration public FloatPackAttribute(float max, int bitCount) Parameters Type Name Description Single max Max value of the float Int32 bitCount number of bits to pack the field into | Improve this Doc View Source FloatPackAttribute(Single, Single) Declaration public FloatPackAttribute(float max, float precision) Parameters Type Name Description Single max Max value of the float Single precision Smallest possible value of the field. Real precision woll be caculated using bitcount but will always be lower than this parameter"
  },
  "api/Mirage.Serialization.FloatPacker.html": {
    "href": "api/Mirage.Serialization.FloatPacker.html",
    "title": "Class FloatPacker",
    "keywords": "Class FloatPacker Helps compresses a float into a reduced number of bits Inheritance Object FloatPacker Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax public sealed class FloatPacker Constructors | Improve this Doc View Source FloatPacker(Single, Int32) Declaration public FloatPacker(float max, int bitCount) Parameters Type Name Description Single max Int32 bitCount | Improve this Doc View Source FloatPacker(Single, Single) Declaration public FloatPacker(float max, float lowestPrecision) Parameters Type Name Description Single max Single lowestPrecision lowest precision, actual precision will be caculated from number of bits used Methods | Improve this Doc View Source Pack(NetworkWriter, Single) Packs and Writes a float value Clamps the value within min/max range Declaration public void Pack(NetworkWriter writer, float value) Parameters Type Name Description NetworkWriter writer Single value | Improve this Doc View Source Pack(Single) Packs a float value into a uint Clamps the value within min/max range Declaration public uint Pack(float value) Parameters Type Name Description Single value Returns Type Description UInt32 | Improve this Doc View Source PackNoClamp(NetworkWriter, Single) Declaration public void PackNoClamp(NetworkWriter writer, float value) Parameters Type Name Description NetworkWriter writer Single value | Improve this Doc View Source PackNoClamp(Single) Packs a float value into a uint without clamping it in range WARNING: only use this method if value is always in range. Out of range values may not be unpacked correctly Declaration public uint PackNoClamp(float value) Parameters Type Name Description Single value Returns Type Description UInt32 | Improve this Doc View Source Unpack(NetworkReader) Reads and unpacks float value Declaration public float Unpack(NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Single | Improve this Doc View Source Unpack(UInt32) Unpacks uint value to float Declaration public float Unpack(uint value) Parameters Type Name Description UInt32 value Returns Type Description Single Remarks Positive and Negative values need to be unpacked differnely so that they both keep same precision Example 10 bits (max uint = 1023): p = precision Positive values have uint range 0 to 511 Unpacked: 0 to max Negative values have uint range 512 to 1023 Unpacked using same as positive: max+p to max*2+p but we want range -max to -p so we need to subtrack -1024 so range is -512 to -1 then scale to unpack to -max to -p"
  },
  "api/Mirage.Serialization.FromBitCount.html": {
    "href": "api/Mirage.Serialization.FromBitCount.html",
    "title": "Class FromBitCount",
    "keywords": "Class FromBitCount The max value for N number of bits Inheritance Object FromBitCount Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax public static class FromBitCount Examples Using FromBitCount with VarIntAttribute because it uses max value not bit count [VarInt(FromBitCount.b3, FromBitCount.b7, FromBitCount.b10, true)] public int componentIndex; Fields | Improve this Doc View Source b1 Declaration public const ulong b1 = 1UL Field Value Type Description UInt64 | Improve this Doc View Source b10 Declaration public const ulong b10 = 1023UL Field Value Type Description UInt64 | Improve this Doc View Source b11 Declaration public const ulong b11 = 2047UL Field Value Type Description UInt64 | Improve this Doc View Source b12 Declaration public const ulong b12 = 4095UL Field Value Type Description UInt64 | Improve this Doc View Source b13 Declaration public const ulong b13 = 8191UL Field Value Type Description UInt64 | Improve this Doc View Source b14 Declaration public const ulong b14 = 16383UL Field Value Type Description UInt64 | Improve this Doc View Source b15 Declaration public const ulong b15 = 32767UL Field Value Type Description UInt64 | Improve this Doc View Source b16 Declaration public const ulong b16 = 65535UL Field Value Type Description UInt64 | Improve this Doc View Source b17 Declaration public const ulong b17 = 131071UL Field Value Type Description UInt64 | Improve this Doc View Source b18 Declaration public const ulong b18 = 262143UL Field Value Type Description UInt64 | Improve this Doc View Source b19 Declaration public const ulong b19 = 524287UL Field Value Type Description UInt64 | Improve this Doc View Source b2 Declaration public const ulong b2 = 3UL Field Value Type Description UInt64 | Improve this Doc View Source b20 Declaration public const ulong b20 = 1048575UL Field Value Type Description UInt64 | Improve this Doc View Source b21 Declaration public const ulong b21 = 2097151UL Field Value Type Description UInt64 | Improve this Doc View Source b22 Declaration public const ulong b22 = 4194303UL Field Value Type Description UInt64 | Improve this Doc View Source b23 Declaration public const ulong b23 = 8388607UL Field Value Type Description UInt64 | Improve this Doc View Source b24 Declaration public const ulong b24 = 16777215UL Field Value Type Description UInt64 | Improve this Doc View Source b25 Declaration public const ulong b25 = 33554431UL Field Value Type Description UInt64 | Improve this Doc View Source b26 Declaration public const ulong b26 = 67108863UL Field Value Type Description UInt64 | Improve this Doc View Source b27 Declaration public const ulong b27 = 134217727UL Field Value Type Description UInt64 | Improve this Doc View Source b28 Declaration public const ulong b28 = 268435455UL Field Value Type Description UInt64 | Improve this Doc View Source b29 Declaration public const ulong b29 = 536870911UL Field Value Type Description UInt64 | Improve this Doc View Source b3 Declaration public const ulong b3 = 7UL Field Value Type Description UInt64 | Improve this Doc View Source b30 Declaration public const ulong b30 = 1073741823UL Field Value Type Description UInt64 | Improve this Doc View Source b31 Declaration public const ulong b31 = 2147483647UL Field Value Type Description UInt64 | Improve this Doc View Source b32 Declaration public const ulong b32 = 4294967295UL Field Value Type Description UInt64 | Improve this Doc View Source b33 Declaration public const ulong b33 = 8589934591UL Field Value Type Description UInt64 | Improve this Doc View Source b34 Declaration public const ulong b34 = 17179869183UL Field Value Type Description UInt64 | Improve this Doc View Source b35 Declaration public const ulong b35 = 34359738367UL Field Value Type Description UInt64 | Improve this Doc View Source b36 Declaration public const ulong b36 = 68719476735UL Field Value Type Description UInt64 | Improve this Doc View Source b37 Declaration public const ulong b37 = 137438953471UL Field Value Type Description UInt64 | Improve this Doc View Source b38 Declaration public const ulong b38 = 274877906943UL Field Value Type Description UInt64 | Improve this Doc View Source b39 Declaration public const ulong b39 = 549755813887UL Field Value Type Description UInt64 | Improve this Doc View Source b4 Declaration public const ulong b4 = 15UL Field Value Type Description UInt64 | Improve this Doc View Source b40 Declaration public const ulong b40 = 1099511627775UL Field Value Type Description UInt64 | Improve this Doc View Source b41 Declaration public const ulong b41 = 2199023255551UL Field Value Type Description UInt64 | Improve this Doc View Source b42 Declaration public const ulong b42 = 4398046511103UL Field Value Type Description UInt64 | Improve this Doc View Source b43 Declaration public const ulong b43 = 8796093022207UL Field Value Type Description UInt64 | Improve this Doc View Source b44 Declaration public const ulong b44 = 17592186044415UL Field Value Type Description UInt64 | Improve this Doc View Source b45 Declaration public const ulong b45 = 35184372088831UL Field Value Type Description UInt64 | Improve this Doc View Source b46 Declaration public const ulong b46 = 70368744177663UL Field Value Type Description UInt64 | Improve this Doc View Source b47 Declaration public const ulong b47 = 140737488355327UL Field Value Type Description UInt64 | Improve this Doc View Source b48 Declaration public const ulong b48 = 281474976710655UL Field Value Type Description UInt64 | Improve this Doc View Source b49 Declaration public const ulong b49 = 562949953421311UL Field Value Type Description UInt64 | Improve this Doc View Source b5 Declaration public const ulong b5 = 31UL Field Value Type Description UInt64 | Improve this Doc View Source b50 Declaration public const ulong b50 = 1125899906842623UL Field Value Type Description UInt64 | Improve this Doc View Source b51 Declaration public const ulong b51 = 2251799813685247UL Field Value Type Description UInt64 | Improve this Doc View Source b52 Declaration public const ulong b52 = 4503599627370495UL Field Value Type Description UInt64 | Improve this Doc View Source b53 Declaration public const ulong b53 = 9007199254740991UL Field Value Type Description UInt64 | Improve this Doc View Source b54 Declaration public const ulong b54 = 18014398509481983UL Field Value Type Description UInt64 | Improve this Doc View Source b55 Declaration public const ulong b55 = 36028797018963967UL Field Value Type Description UInt64 | Improve this Doc View Source b56 Declaration public const ulong b56 = 72057594037927935UL Field Value Type Description UInt64 | Improve this Doc View Source b57 Declaration public const ulong b57 = 144115188075855871UL Field Value Type Description UInt64 | Improve this Doc View Source b58 Declaration public const ulong b58 = 288230376151711743UL Field Value Type Description UInt64 | Improve this Doc View Source b59 Declaration public const ulong b59 = 576460752303423487UL Field Value Type Description UInt64 | Improve this Doc View Source b6 Declaration public const ulong b6 = 63UL Field Value Type Description UInt64 | Improve this Doc View Source b60 Declaration public const ulong b60 = 1152921504606846975UL Field Value Type Description UInt64 | Improve this Doc View Source b61 Declaration public const ulong b61 = 2305843009213693951UL Field Value Type Description UInt64 | Improve this Doc View Source b62 Declaration public const ulong b62 = 4611686018427387903UL Field Value Type Description UInt64 | Improve this Doc View Source b63 Declaration public const ulong b63 = 9223372036854775807UL Field Value Type Description UInt64 | Improve this Doc View Source b64 Declaration public const ulong b64 = 18446744073709551615UL Field Value Type Description UInt64 | Improve this Doc View Source b7 Declaration public const ulong b7 = 127UL Field Value Type Description UInt64 | Improve this Doc View Source b8 Declaration public const ulong b8 = 255UL Field Value Type Description UInt64 | Improve this Doc View Source b9 Declaration public const ulong b9 = 511UL Field Value Type Description UInt64"
  },
  "api/Mirage.Serialization.GenericTypesSerializationExtensions.html": {
    "href": "api/Mirage.Serialization.GenericTypesSerializationExtensions.html",
    "title": "Class GenericTypesSerializationExtensions",
    "keywords": "Class GenericTypesSerializationExtensions Inheritance Object GenericTypesSerializationExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax public static class GenericTypesSerializationExtensions Methods | Improve this Doc View Source Read<T>(NetworkReader) Reads any data type that mirage supports Declaration public static T Read<T>(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Write<T>(NetworkWriter, T) Writes any type that mirage supports Declaration public static void Write<T>(this NetworkWriter writer, T value) Parameters Type Name Description NetworkWriter writer T value Type Parameters Name Description T"
  },
  "api/Mirage.Serialization.html": {
    "href": "api/Mirage.Serialization.html",
    "title": "Namespace Mirage.Serialization",
    "keywords": "Namespace Mirage.Serialization Classes BitCountAttribute Tells weaver how many bits to sue for field Only works with interager fields (byte, int, ulong, enums etc) NOTE: bits are truncated when using this, so signed values will lose their sign. Use ZigZagEncodeAttribute as well if value might be negative Also See: Bit Packing Documentation BitCountFromRangeAttribute Calculates bitcount from then given min/max values and then packs using BitCountAttribute Also See: Bit Packing Documentation BitHelper BitMask CollectionExtensions CompressedExtensions FloatPackAttribute Packs a float field, clamped from -max to +max, with Also See: Bit Packing Documentation FloatPacker Helps compresses a float into a reduced number of bits FromBitCount The max value for N number of bits GenericTypesSerializationExtensions MessagePacker MirageTypesExtensions NetworkReader Bit writer, writes values to a buffer on a bit level Use GetReader(ArraySegment<Byte>) to reduce memory allocation NetworkReaderPool Holds static reference to Pool<T> of PooledNetworkReader NetworkWriter Bit writer, writes values to a buffer on a bit level Use GetWriter() to reduce memory allocation NetworkWriterPool PackedExtensions PooledNetworkReader NetworkReader to be used with NetworkReaderPool PooledNetworkWriter NetworkWriter to be used with NetworkWriterPool QuaternionPackAttribute QuaternionPacker Reader<T> a class that holds readers for the different types Note that c# creates a different static variable for each type This will be populated by the weaver StringExtensions SystemTypesExtensions UnityTypesExtensions VarFloatPacker Packs a float using ZigZag and VarIntBlocksPacker VarIntAttribute Tells weaver the max range for small, medium and large values. Allows small values to be sent using less bits Only works with interager fields (byte, int, ulong, enums etc) VarIntBlocksAttribute Tells weaver the block size to use for packing int values Allows small values to be sent using less bits Only works with interager fields (byte, int, ulong, enums etc) VarIntBlocksPacker VarIntPacker VarVector3Packer Packs a vector3 using ZigZag and VarIntBlocksPacker Vector2PackAttribute Vector2Packer Vector3PackAttribute Vector3Packer WeaverIgnoreAttribute Tells Weaver to ignore an Extension method Writer<T> a class that holds writers for the different types Note that c# creates a different static variable for each type This will be populated by the weaver ZigZag See zigzag encoding ZigZagEncodeAttribute Used along size BitCountAttribute to encodes a interager value using ZigZag so that both positive and negative values can be sent Also See: Bit Packing Documentation"
  },
  "api/Mirage.Serialization.MessagePacker.html": {
    "href": "api/Mirage.Serialization.MessagePacker.html",
    "title": "Class MessagePacker",
    "keywords": "Class MessagePacker Inheritance Object MessagePacker Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax public static class MessagePacker Properties | Improve this Doc View Source MessageTypes Map of Message Id => Type When we receive a message, we can lookup here to find out what type it was. This is populated by the weaver. Declaration public static IReadOnlyDictionary<int, Type> MessageTypes { get; } Property Value Type Description IReadOnlyDictionary < Int32 , Type > Methods | Improve this Doc View Source GetId(Type) Declaration public static int GetId(Type type) Parameters Type Name Description Type type Returns Type Description Int32 | Improve this Doc View Source GetId<T>() Declaration public static int GetId<T>() Returns Type Description Int32 Type Parameters Name Description T | Improve this Doc View Source Pack<T>(T) Declaration public static byte[] Pack<T>(T message) Parameters Type Name Description T message Returns Type Description Byte [] Type Parameters Name Description T | Improve this Doc View Source Pack<T>(T, NetworkWriter) Declaration public static void Pack<T>(T message, NetworkWriter writer) Parameters Type Name Description T message NetworkWriter writer Type Parameters Name Description T | Improve this Doc View Source RegisterMessage<T>() Registers a message with its ID, Useful for debugging if a message handler is missing Used by weaver Declaration public static void RegisterMessage<T>() Type Parameters Name Description T | Improve this Doc View Source Unpack<T>(Byte[]) Declaration public static T Unpack<T>(byte[] data) Parameters Type Name Description Byte [] data Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source UnpackId(NetworkReader) Declaration public static int UnpackId(NetworkReader messageReader) Parameters Type Name Description NetworkReader messageReader Returns Type Description Int32"
  },
  "api/Mirage.Serialization.MirageTypesExtensions.html": {
    "href": "api/Mirage.Serialization.MirageTypesExtensions.html",
    "title": "Class MirageTypesExtensions",
    "keywords": "Class MirageTypesExtensions Inheritance Object MirageTypesExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax public static class MirageTypesExtensions Methods | Improve this Doc View Source ReadGameObject(NetworkReader) Declaration public static GameObject ReadGameObject(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description GameObject | Improve this Doc View Source ReadNetworkBehaviour(NetworkReader) Declaration public static NetworkBehaviour ReadNetworkBehaviour(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description NetworkBehaviour | Improve this Doc View Source ReadNetworkBehaviour<T>(NetworkReader) Declaration public static T ReadNetworkBehaviour<T>(this NetworkReader reader) where T : NetworkBehaviour Parameters Type Name Description NetworkReader reader Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ReadNetworkIdentity(NetworkReader) Declaration public static NetworkIdentity ReadNetworkIdentity(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description NetworkIdentity | Improve this Doc View Source WriteGameObject(NetworkWriter, GameObject) Declaration public static void WriteGameObject(this NetworkWriter writer, GameObject value) Parameters Type Name Description NetworkWriter writer GameObject value | Improve this Doc View Source WriteNetworkBehaviour(NetworkWriter, NetworkBehaviour) Declaration public static void WriteNetworkBehaviour(this NetworkWriter writer, NetworkBehaviour value) Parameters Type Name Description NetworkWriter writer NetworkBehaviour value | Improve this Doc View Source WriteNetworkIdentity(NetworkWriter, NetworkIdentity) Declaration public static void WriteNetworkIdentity(this NetworkWriter writer, NetworkIdentity value) Parameters Type Name Description NetworkWriter writer NetworkIdentity value"
  },
  "api/Mirage.Serialization.NetworkReader.html": {
    "href": "api/Mirage.Serialization.NetworkReader.html",
    "title": "Class NetworkReader",
    "keywords": "Class NetworkReader Bit writer, writes values to a buffer on a bit level Use GetReader(ArraySegment<Byte>) to reduce memory allocation Inheritance Object NetworkReader PooledNetworkReader Implements IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax public class NetworkReader : IDisposable Constructors | Improve this Doc View Source NetworkReader() Declaration public NetworkReader() Properties | Improve this Doc View Source BitLength Size of buffer that is being read from Declaration public int BitLength { get; } Property Value Type Description Int32 | Improve this Doc View Source BitPosition Current bit position for reading from buffer Declaration public int BitPosition { get; } Property Value Type Description Int32 | Improve this Doc View Source BytePosition Current BitPosition rounded up to nearest multiple of 8 Declaration public int BytePosition { get; } Property Value Type Description Int32 | Improve this Doc View Source ObjectLocator some service object that can find objects by net id Declaration public IObjectLocator ObjectLocator { get; set; } Property Value Type Description IObjectLocator Methods | Improve this Doc View Source CanRead() Can read atleast 1 bit Declaration public bool CanRead() Returns Type Description Boolean | Improve this Doc View Source CanReadBits(Int32) Can atleast readCount bits Declaration public bool CanReadBits(int readCount) Parameters Type Name Description Int32 readCount Returns Type Description Boolean | Improve this Doc View Source CanReadBytes(Int32) Can atleast readCount bytes Declaration public bool CanReadBytes(int readCount) Parameters Type Name Description Int32 readCount Returns Type Description Boolean | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true if called from IDisposable | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source MoveBitPosition(Int32) Moves the internal bit position For most usecases it is safer to use ReadAtPosition(Int32, Int32) WARNING: When reading from earlier position make sure to move position back to end of buffer after reading Declaration public void MoveBitPosition(int newPosition) Parameters Type Name Description Int32 newPosition Exceptions Type Condition ArgumentOutOfRangeException throws when newPosition is less than Mirage.Serialization.NetworkReader.bitOffset | Improve this Doc View Source PadAndCopy<T>(out T) Moves position to nearest byte then copies struct from that position Declaration public void PadAndCopy<T>(out T value) where T : struct Parameters Type Name Description T value Type Parameters Name Description T | Improve this Doc View Source Read(Int32) Declaration public ulong Read(int bits) Parameters Type Name Description Int32 bits Returns Type Description UInt64 | Improve this Doc View Source ReadAtPosition(Int32, Int32) Reads n bits from buffer at bitPosition Declaration public ulong ReadAtPosition(int bits, int bitPosition) Parameters Type Name Description Int32 bits number of bits in value to write Int32 bitPosition where to write bits Returns Type Description UInt64 | Improve this Doc View Source ReadBoolean() Declaration public bool ReadBoolean() Returns Type Description Boolean | Improve this Doc View Source ReadBooleanAsUlong() Writes first bit of value to buffer Declaration public ulong ReadBooleanAsUlong() Returns Type Description UInt64 | Improve this Doc View Source ReadByte() Declaration public byte ReadByte() Returns Type Description Byte | Improve this Doc View Source ReadBytes(Byte[], Int32, Int32) Moves position to nearest byte then copies bytes from that position Declaration public void ReadBytes(byte[] array, int offset, int length) Parameters Type Name Description Byte [] array Int32 offset Int32 length | Improve this Doc View Source ReadBytesSegment(Int32) Declaration public ArraySegment<byte> ReadBytesSegment(int count) Parameters Type Name Description Int32 count Returns Type Description ArraySegment < Byte > | Improve this Doc View Source ReadDouble() Declaration public double ReadDouble() Returns Type Description Double | Improve this Doc View Source ReadInt16() Declaration public short ReadInt16() Returns Type Description Int16 | Improve this Doc View Source ReadInt32() Declaration public int ReadInt32() Returns Type Description Int32 | Improve this Doc View Source ReadInt64() Declaration public long ReadInt64() Returns Type Description Int64 | Improve this Doc View Source ReadSByte() Declaration public sbyte ReadSByte() Returns Type Description SByte | Improve this Doc View Source ReadSingle() Declaration public float ReadSingle() Returns Type Description Single | Improve this Doc View Source ReadUInt16() Declaration public ushort ReadUInt16() Returns Type Description UInt16 | Improve this Doc View Source ReadUInt32() Declaration public uint ReadUInt32() Returns Type Description UInt32 | Improve this Doc View Source ReadUInt64() Declaration public ulong ReadUInt64() Returns Type Description UInt64 | Improve this Doc View Source Reset(ArraySegment<Byte>) Declaration public void Reset(ArraySegment<byte> segment) Parameters Type Name Description ArraySegment < Byte > segment | Improve this Doc View Source Reset(Byte[]) Declaration public void Reset(byte[] array) Parameters Type Name Description Byte [] array | Improve this Doc View Source Reset(Byte[], Int32, Int32) Declaration public void Reset(byte[] array, int position, int length) Parameters Type Name Description Byte [] array Int32 position Int32 length Implements System.IDisposable Extension Methods NetworkIdentitySerializers.ReadNetworkIdentitySyncVar(NetworkReader) GameObjectSerializers.ReadGameObjectSyncVar(NetworkReader) NetworkBehaviorSerializers.ReadNetworkBehaviourSyncVar(NetworkReader) SystemTypesExtensions.ReadByteExtension(NetworkReader) SystemTypesExtensions.ReadSByteExtension(NetworkReader) SystemTypesExtensions.ReadChar(NetworkReader) SystemTypesExtensions.ReadBooleanExtension(NetworkReader) SystemTypesExtensions.ReadInt16Extension(NetworkReader) SystemTypesExtensions.ReadUInt16Extension(NetworkReader) SystemTypesExtensions.ReadSingleConverter(NetworkReader) SystemTypesExtensions.ReadDoubleConverter(NetworkReader) SystemTypesExtensions.ReadDecimalConverter(NetworkReader) SystemTypesExtensions.ReadGuid(NetworkReader) SystemTypesExtensions.ReadNullable<T>(NetworkReader) StringExtensions.ReadString(NetworkReader) MirageTypesExtensions.ReadNetworkIdentity(NetworkReader) MirageTypesExtensions.ReadNetworkBehaviour(NetworkReader) MirageTypesExtensions.ReadNetworkBehaviour<T>(NetworkReader) MirageTypesExtensions.ReadGameObject(NetworkReader) UnityTypesExtensions.ReadVector2(NetworkReader) UnityTypesExtensions.ReadVector3(NetworkReader) UnityTypesExtensions.ReadVector4(NetworkReader) UnityTypesExtensions.ReadVector2Int(NetworkReader) UnityTypesExtensions.ReadVector3Int(NetworkReader) UnityTypesExtensions.ReadColor(NetworkReader) UnityTypesExtensions.ReadColor32(NetworkReader) UnityTypesExtensions.ReadRect(NetworkReader) UnityTypesExtensions.ReadPlane(NetworkReader) UnityTypesExtensions.ReadRay(NetworkReader) UnityTypesExtensions.ReadMatrix4x4(NetworkReader) PackedExtensions.ReadPackedInt32(NetworkReader) PackedExtensions.ReadPackedUInt32(NetworkReader) PackedExtensions.ReadPackedInt64(NetworkReader) PackedExtensions.ReadPackedUInt64(NetworkReader) CompressedExtensions.ReadQuaternion(NetworkReader) CollectionExtensions.ReadBytesAndSize(NetworkReader) CollectionExtensions.ReadBytesAndSizeSegment(NetworkReader) CollectionExtensions.ReadBytes(NetworkReader, Int32) CollectionExtensions.ReadList<T>(NetworkReader) CollectionExtensions.ReadArray<T>(NetworkReader) CollectionExtensions.ReadArraySegment<T>(NetworkReader) GenericTypesSerializationExtensions.Read<T>(NetworkReader)"
  },
  "api/Mirage.Serialization.NetworkReaderPool.html": {
    "href": "api/Mirage.Serialization.NetworkReaderPool.html",
    "title": "Class NetworkReaderPool",
    "keywords": "Class NetworkReaderPool Holds static reference to Pool<T> of PooledNetworkReader Inheritance Object NetworkReaderPool Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax public static class NetworkReaderPool Methods | Improve this Doc View Source Configure(Int32, Int32) Declaration public static void Configure(int startPoolSize = 5, int maxPoolSize = 100) Parameters Type Name Description Int32 startPoolSize Int32 maxPoolSize | Improve this Doc View Source GetReader(ArraySegment<Byte>) Declaration public static PooledNetworkReader GetReader(ArraySegment<byte> packet) Parameters Type Name Description ArraySegment < Byte > packet Returns Type Description PooledNetworkReader | Improve this Doc View Source GetReader(Byte[]) Declaration public static PooledNetworkReader GetReader(byte[] array) Parameters Type Name Description Byte [] array Returns Type Description PooledNetworkReader | Improve this Doc View Source GetReader(Byte[], Int32, Int32) Declaration public static PooledNetworkReader GetReader(byte[] array, int offset, int length) Parameters Type Name Description Byte [] array Int32 offset Int32 length Returns Type Description PooledNetworkReader"
  },
  "api/Mirage.Serialization.NetworkWriter.html": {
    "href": "api/Mirage.Serialization.NetworkWriter.html",
    "title": "Class NetworkWriter",
    "keywords": "Class NetworkWriter Bit writer, writes values to a buffer on a bit level Use GetWriter() to reduce memory allocation Inheritance Object NetworkWriter PooledNetworkWriter Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax public class NetworkWriter Constructors | Improve this Doc View Source NetworkWriter(Int32) Declaration public NetworkWriter(int minByteCapacity) Parameters Type Name Description Int32 minByteCapacity | Improve this Doc View Source NetworkWriter(Int32, Boolean) Declaration public NetworkWriter(int minByteCapacity, bool allowResize) Parameters Type Name Description Int32 minByteCapacity Boolean allowResize Properties | Improve this Doc View Source BitPosition Current bit position for writing to buffer To set bit position use MoveBitPosition(Int32) Declaration public int BitPosition { get; } Property Value Type Description Int32 | Improve this Doc View Source ByteCapacity Size limit of buffer Declaration public int ByteCapacity { get; } Property Value Type Description Int32 | Improve this Doc View Source ByteLength Current BitPosition rounded up to nearest multiple of 8 To set byte position use MoveBitPosition(Int32) multiple by 8 Declaration public int ByteLength { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source CopyFromWriter(NetworkWriter) Copies all data from other Declaration public void CopyFromWriter(NetworkWriter other) Parameters Type Name Description NetworkWriter other | Improve this Doc View Source CopyFromWriter(NetworkWriter, Int32, Int32) Copies bitLength bits from other starting at otherBitPosition Declaration public void CopyFromWriter(NetworkWriter other, int otherBitPosition, int bitLength) Parameters Type Name Description NetworkWriter other Int32 otherBitPosition Int32 bitLength | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source MoveBitPosition(Int32) Moves the internal bit position For most usecases it is safer to use WriteAtPosition(UInt64, Int32, Int32) WARNING: When writing to earlier position make sure to move position back to end of buffer after writing because position is also used as length Declaration public void MoveBitPosition(int newPosition) Parameters Type Name Description Int32 newPosition | Improve this Doc View Source PadAndCopy<T>(T) Moves position to nearest byte then copies struct to that position Declaration public void PadAndCopy<T>(in T value) where T : struct Parameters Type Name Description T value Type Parameters Name Description T | Improve this Doc View Source Reset() Declaration public void Reset() | Improve this Doc View Source ToArray() Copies internal buffer to new Array To reduce Allocations use ToArraySegment() instead Declaration public byte[] ToArray() Returns Type Description Byte [] | Improve this Doc View Source ToArraySegment() Declaration public ArraySegment<byte> ToArraySegment() Returns Type Description ArraySegment < Byte > | Improve this Doc View Source Write(UInt64, Int32) Declaration public void Write(ulong value, int bits) Parameters Type Name Description UInt64 value Int32 bits | Improve this Doc View Source WriteAtBytePosition(UInt64, Int32, Int32) Same as WriteAtPosition(UInt64, Int32, Int32) expect position given is in bytes instead of bits WARNING: When writing to bytes instead of bits make sure you are able to read at the right position when deserializing as it might cause data to be misaligned Declaration public void WriteAtBytePosition(ulong value, int bits, int bytePosition) Parameters Type Name Description UInt64 value Int32 bits Int32 bytePosition | Improve this Doc View Source WriteAtPosition(UInt64, Int32, Int32) Writes n bits from value to bitPosition This methods can be used to go back to a previous position to write length or other flags to the buffer after other data has been written WARNING: This method does not change the internal position so will not change the overall length if writing past internal position Declaration public void WriteAtPosition(ulong value, int bits, int bitPosition) Parameters Type Name Description UInt64 value value to write Int32 bits number of bits in value to write Int32 bitPosition where to write bits | Improve this Doc View Source WriteBoolean(Boolean) Declaration public void WriteBoolean(bool value) Parameters Type Name Description Boolean value | Improve this Doc View Source WriteBoolean(UInt64) Writes first bit of value to buffer Declaration public void WriteBoolean(ulong value) Parameters Type Name Description UInt64 value | Improve this Doc View Source WriteByte(Byte) Declaration public void WriteByte(byte value) Parameters Type Name Description Byte value | Improve this Doc View Source WriteBytes(Byte[], Int32, Int32) Moves position to nearest byte then writes bytes to that position Declaration public void WriteBytes(byte[] array, int offset, int length) Parameters Type Name Description Byte [] array Int32 offset Int32 length | Improve this Doc View Source WriteDouble(Double) Declaration public void WriteDouble(double value) Parameters Type Name Description Double value | Improve this Doc View Source WriteInt16(Int16) Declaration public void WriteInt16(short value) Parameters Type Name Description Int16 value | Improve this Doc View Source WriteInt32(Int32) Declaration public void WriteInt32(int value) Parameters Type Name Description Int32 value | Improve this Doc View Source WriteInt64(Int64) Declaration public void WriteInt64(long value) Parameters Type Name Description Int64 value | Improve this Doc View Source WriteSByte(SByte) Declaration public void WriteSByte(sbyte value) Parameters Type Name Description SByte value | Improve this Doc View Source WriteSingle(Single) Declaration public void WriteSingle(float value) Parameters Type Name Description Single value | Improve this Doc View Source WriteUInt16(UInt16) Declaration public void WriteUInt16(ushort value) Parameters Type Name Description UInt16 value | Improve this Doc View Source WriteUInt32(UInt32) Declaration public void WriteUInt32(uint value) Parameters Type Name Description UInt32 value | Improve this Doc View Source WriteUInt64(UInt64) Declaration public void WriteUInt64(ulong value) Parameters Type Name Description UInt64 value Extension Methods NetworkIdentitySerializers.WriteNetworkIdentitySyncVar(NetworkWriter, NetworkIdentitySyncvar) GameObjectSerializers.WriteGameObjectSyncVar(NetworkWriter, GameObjectSyncvar) NetworkBehaviorSerializers.WriteNetworkBehaviorSyncVar(NetworkWriter, NetworkBehaviorSyncvar) SystemTypesExtensions.WriteByteExtension(NetworkWriter, Byte) SystemTypesExtensions.WriteSByteExtension(NetworkWriter, SByte) SystemTypesExtensions.WriteChar(NetworkWriter, Char) SystemTypesExtensions.WriteBooleanExtension(NetworkWriter, Boolean) SystemTypesExtensions.WriteUInt16Extension(NetworkWriter, UInt16) SystemTypesExtensions.WriteInt16Extension(NetworkWriter, Int16) SystemTypesExtensions.WriteSingleConverter(NetworkWriter, Single) SystemTypesExtensions.WriteDoubleConverter(NetworkWriter, Double) SystemTypesExtensions.WriteDecimalConverter(NetworkWriter, Decimal) SystemTypesExtensions.WriteGuid(NetworkWriter, Guid) SystemTypesExtensions.WriteNullable<T>(NetworkWriter, Nullable<T>) StringExtensions.WriteString(NetworkWriter, String) MirageTypesExtensions.WriteNetworkIdentity(NetworkWriter, NetworkIdentity) MirageTypesExtensions.WriteNetworkBehaviour(NetworkWriter, NetworkBehaviour) MirageTypesExtensions.WriteGameObject(NetworkWriter, GameObject) UnityTypesExtensions.WriteVector2(NetworkWriter, Vector2) UnityTypesExtensions.WriteVector3(NetworkWriter, Vector3) UnityTypesExtensions.WriteVector4(NetworkWriter, Vector4) UnityTypesExtensions.WriteVector2Int(NetworkWriter, Vector2Int) UnityTypesExtensions.WriteVector3Int(NetworkWriter, Vector3Int) UnityTypesExtensions.WriteColor(NetworkWriter, Color) UnityTypesExtensions.WriteColor32(NetworkWriter, Color32) UnityTypesExtensions.WriteRect(NetworkWriter, Rect) UnityTypesExtensions.WritePlane(NetworkWriter, Plane) UnityTypesExtensions.WriteRay(NetworkWriter, Ray) UnityTypesExtensions.WriteMatrix4X4(NetworkWriter, Matrix4x4) PackedExtensions.WritePackedInt32(NetworkWriter, Int32) PackedExtensions.WritePackedUInt32(NetworkWriter, UInt32) PackedExtensions.WritePackedInt64(NetworkWriter, Int64) PackedExtensions.WritePackedUInt64(NetworkWriter, UInt64) CompressedExtensions.WriteQuaternion(NetworkWriter, Quaternion) CollectionExtensions.WriteBytesAndSize(NetworkWriter, Byte[], Int32, Int32) CollectionExtensions.WriteBytesAndSize(NetworkWriter, Byte[]) CollectionExtensions.WriteBytesAndSizeSegment(NetworkWriter, ArraySegment<Byte>) CollectionExtensions.WriteList<T>(NetworkWriter, List<T>) CollectionExtensions.WriteArray<T>(NetworkWriter, T[]) CollectionExtensions.WriteArraySegment<T>(NetworkWriter, ArraySegment<T>) GenericTypesSerializationExtensions.Write<T>(NetworkWriter, T)"
  },
  "api/Mirage.Serialization.NetworkWriterPool.html": {
    "href": "api/Mirage.Serialization.NetworkWriterPool.html",
    "title": "Class NetworkWriterPool",
    "keywords": "Class NetworkWriterPool Inheritance Object NetworkWriterPool Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax public static class NetworkWriterPool Properties | Improve this Doc View Source BufferSize Current Size of buffers, or null before Configure has been called Declaration public static int? BufferSize { get; } Property Value Type Description Nullable < Int32 > Methods | Improve this Doc View Source Configure(Int32, Int32, Int32) Configures an exist pool or creates a new one Does not create a new pool if bufferSize is less that current BufferSize Declaration public static void Configure(int bufferSize, int startPoolSize = 5, int maxPoolSize = 100) Parameters Type Name Description Int32 bufferSize starting capacity of buffer Int32 startPoolSize Int32 maxPoolSize | Improve this Doc View Source GetWriter() Declaration public static PooledNetworkWriter GetWriter() Returns Type Description PooledNetworkWriter"
  },
  "api/Mirage.Serialization.PackedExtensions.html": {
    "href": "api/Mirage.Serialization.PackedExtensions.html",
    "title": "Class PackedExtensions",
    "keywords": "Class PackedExtensions Inheritance Object PackedExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax public static class PackedExtensions Remarks zigzag encoding Variable-Length Integers Methods | Improve this Doc View Source ReadPackedInt32(NetworkReader) Declaration public static int ReadPackedInt32(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Int32 | Improve this Doc View Source ReadPackedInt64(NetworkReader) Declaration public static long ReadPackedInt64(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Int64 | Improve this Doc View Source ReadPackedUInt32(NetworkReader) Declaration public static uint ReadPackedUInt32(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description UInt32 Exceptions Type Condition OverflowException throws if values overflows uint | Improve this Doc View Source ReadPackedUInt64(NetworkReader) Declaration public static ulong ReadPackedUInt64(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description UInt64 | Improve this Doc View Source WritePackedInt32(NetworkWriter, Int32) Declaration public static void WritePackedInt32(this NetworkWriter writer, int i) Parameters Type Name Description NetworkWriter writer Int32 i | Improve this Doc View Source WritePackedInt64(NetworkWriter, Int64) Declaration public static void WritePackedInt64(this NetworkWriter writer, long i) Parameters Type Name Description NetworkWriter writer Int64 i | Improve this Doc View Source WritePackedUInt32(NetworkWriter, UInt32) Declaration public static void WritePackedUInt32(this NetworkWriter writer, uint value) Parameters Type Name Description NetworkWriter writer UInt32 value | Improve this Doc View Source WritePackedUInt64(NetworkWriter, UInt64) Declaration public static void WritePackedUInt64(this NetworkWriter writer, ulong value) Parameters Type Name Description NetworkWriter writer UInt64 value"
  },
  "api/Mirage.Serialization.PooledNetworkReader.html": {
    "href": "api/Mirage.Serialization.PooledNetworkReader.html",
    "title": "Class PooledNetworkReader",
    "keywords": "Class PooledNetworkReader NetworkReader to be used with NetworkReaderPool Inheritance Object NetworkReader PooledNetworkReader Implements IDisposable Inherited Members NetworkReader.BitLength NetworkReader.BitPosition NetworkReader.BytePosition NetworkReader.ObjectLocator NetworkReader.Dispose() NetworkReader.Reset(ArraySegment<Byte>) NetworkReader.Reset(Byte[]) NetworkReader.Reset(Byte[], Int32, Int32) NetworkReader.CanRead() NetworkReader.CanReadBits(Int32) NetworkReader.CanReadBytes(Int32) NetworkReader.ReadBoolean() NetworkReader.ReadBooleanAsUlong() NetworkReader.ReadSByte() NetworkReader.ReadByte() NetworkReader.ReadInt16() NetworkReader.ReadUInt16() NetworkReader.ReadInt32() NetworkReader.ReadUInt32() NetworkReader.ReadInt64() NetworkReader.ReadUInt64() NetworkReader.ReadSingle() NetworkReader.ReadDouble() NetworkReader.Read(Int32) NetworkReader.ReadAtPosition(Int32, Int32) NetworkReader.MoveBitPosition(Int32) NetworkReader.PadAndCopy<T>(T) NetworkReader.ReadBytes(Byte[], Int32, Int32) NetworkReader.ReadBytesSegment(Int32) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax public sealed class PooledNetworkReader : NetworkReader, IDisposable Methods | Improve this Doc View Source CreateNew(Int32, Pool<PooledNetworkReader>) Declaration public static PooledNetworkReader CreateNew(int _, Pool<PooledNetworkReader> pool) Parameters Type Name Description Int32 _ Pool < PooledNetworkReader > pool Returns Type Description PooledNetworkReader | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Overrides NetworkReader.Dispose(Boolean) | Improve this Doc View Source Release() Puts object back in Pool Declaration public void Release() Explicit Interface Implementations | Improve this Doc View Source IDisposable.Dispose() Declaration void IDisposable.Dispose() Implements System.IDisposable Extension Methods NetworkIdentitySerializers.ReadNetworkIdentitySyncVar(NetworkReader) GameObjectSerializers.ReadGameObjectSyncVar(NetworkReader) NetworkBehaviorSerializers.ReadNetworkBehaviourSyncVar(NetworkReader) SystemTypesExtensions.ReadByteExtension(NetworkReader) SystemTypesExtensions.ReadSByteExtension(NetworkReader) SystemTypesExtensions.ReadChar(NetworkReader) SystemTypesExtensions.ReadBooleanExtension(NetworkReader) SystemTypesExtensions.ReadInt16Extension(NetworkReader) SystemTypesExtensions.ReadUInt16Extension(NetworkReader) SystemTypesExtensions.ReadSingleConverter(NetworkReader) SystemTypesExtensions.ReadDoubleConverter(NetworkReader) SystemTypesExtensions.ReadDecimalConverter(NetworkReader) SystemTypesExtensions.ReadGuid(NetworkReader) SystemTypesExtensions.ReadNullable<T>(NetworkReader) StringExtensions.ReadString(NetworkReader) MirageTypesExtensions.ReadNetworkIdentity(NetworkReader) MirageTypesExtensions.ReadNetworkBehaviour(NetworkReader) MirageTypesExtensions.ReadNetworkBehaviour<T>(NetworkReader) MirageTypesExtensions.ReadGameObject(NetworkReader) UnityTypesExtensions.ReadVector2(NetworkReader) UnityTypesExtensions.ReadVector3(NetworkReader) UnityTypesExtensions.ReadVector4(NetworkReader) UnityTypesExtensions.ReadVector2Int(NetworkReader) UnityTypesExtensions.ReadVector3Int(NetworkReader) UnityTypesExtensions.ReadColor(NetworkReader) UnityTypesExtensions.ReadColor32(NetworkReader) UnityTypesExtensions.ReadRect(NetworkReader) UnityTypesExtensions.ReadPlane(NetworkReader) UnityTypesExtensions.ReadRay(NetworkReader) UnityTypesExtensions.ReadMatrix4x4(NetworkReader) PackedExtensions.ReadPackedInt32(NetworkReader) PackedExtensions.ReadPackedUInt32(NetworkReader) PackedExtensions.ReadPackedInt64(NetworkReader) PackedExtensions.ReadPackedUInt64(NetworkReader) CompressedExtensions.ReadQuaternion(NetworkReader) CollectionExtensions.ReadBytesAndSize(NetworkReader) CollectionExtensions.ReadBytesAndSizeSegment(NetworkReader) CollectionExtensions.ReadBytes(NetworkReader, Int32) CollectionExtensions.ReadList<T>(NetworkReader) CollectionExtensions.ReadArray<T>(NetworkReader) CollectionExtensions.ReadArraySegment<T>(NetworkReader) GenericTypesSerializationExtensions.Read<T>(NetworkReader)"
  },
  "api/Mirage.Serialization.PooledNetworkWriter.html": {
    "href": "api/Mirage.Serialization.PooledNetworkWriter.html",
    "title": "Class PooledNetworkWriter",
    "keywords": "Class PooledNetworkWriter NetworkWriter to be used with NetworkWriterPool Inheritance Object NetworkWriter PooledNetworkWriter Implements IDisposable Inherited Members NetworkWriter.ByteCapacity NetworkWriter.ByteLength NetworkWriter.BitPosition NetworkWriter.Reset() NetworkWriter.ToArray() NetworkWriter.ToArraySegment() NetworkWriter.WriteBoolean(Boolean) NetworkWriter.WriteBoolean(UInt64) NetworkWriter.WriteSByte(SByte) NetworkWriter.WriteByte(Byte) NetworkWriter.WriteInt16(Int16) NetworkWriter.WriteUInt16(UInt16) NetworkWriter.WriteInt32(Int32) NetworkWriter.WriteUInt32(UInt32) NetworkWriter.WriteInt64(Int64) NetworkWriter.WriteUInt64(UInt64) NetworkWriter.WriteSingle(Single) NetworkWriter.WriteDouble(Double) NetworkWriter.Write(UInt64, Int32) NetworkWriter.WriteAtBytePosition(UInt64, Int32, Int32) NetworkWriter.WriteAtPosition(UInt64, Int32, Int32) NetworkWriter.MoveBitPosition(Int32) NetworkWriter.PadAndCopy<T>(T) NetworkWriter.WriteBytes(Byte[], Int32, Int32) NetworkWriter.CopyFromWriter(NetworkWriter) NetworkWriter.CopyFromWriter(NetworkWriter, Int32, Int32) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax public sealed class PooledNetworkWriter : NetworkWriter, IDisposable Methods | Improve this Doc View Source CreateNew(Int32, Pool<PooledNetworkWriter>) Declaration public static PooledNetworkWriter CreateNew(int bufferSize, Pool<PooledNetworkWriter> pool) Parameters Type Name Description Int32 bufferSize Pool < PooledNetworkWriter > pool Returns Type Description PooledNetworkWriter | Improve this Doc View Source Release() Puts object back in Pool Declaration public void Release() Explicit Interface Implementations | Improve this Doc View Source IDisposable.Dispose() Declaration void IDisposable.Dispose() Implements System.IDisposable Extension Methods NetworkIdentitySerializers.WriteNetworkIdentitySyncVar(NetworkWriter, NetworkIdentitySyncvar) GameObjectSerializers.WriteGameObjectSyncVar(NetworkWriter, GameObjectSyncvar) NetworkBehaviorSerializers.WriteNetworkBehaviorSyncVar(NetworkWriter, NetworkBehaviorSyncvar) SystemTypesExtensions.WriteByteExtension(NetworkWriter, Byte) SystemTypesExtensions.WriteSByteExtension(NetworkWriter, SByte) SystemTypesExtensions.WriteChar(NetworkWriter, Char) SystemTypesExtensions.WriteBooleanExtension(NetworkWriter, Boolean) SystemTypesExtensions.WriteUInt16Extension(NetworkWriter, UInt16) SystemTypesExtensions.WriteInt16Extension(NetworkWriter, Int16) SystemTypesExtensions.WriteSingleConverter(NetworkWriter, Single) SystemTypesExtensions.WriteDoubleConverter(NetworkWriter, Double) SystemTypesExtensions.WriteDecimalConverter(NetworkWriter, Decimal) SystemTypesExtensions.WriteGuid(NetworkWriter, Guid) SystemTypesExtensions.WriteNullable<T>(NetworkWriter, Nullable<T>) StringExtensions.WriteString(NetworkWriter, String) MirageTypesExtensions.WriteNetworkIdentity(NetworkWriter, NetworkIdentity) MirageTypesExtensions.WriteNetworkBehaviour(NetworkWriter, NetworkBehaviour) MirageTypesExtensions.WriteGameObject(NetworkWriter, GameObject) UnityTypesExtensions.WriteVector2(NetworkWriter, Vector2) UnityTypesExtensions.WriteVector3(NetworkWriter, Vector3) UnityTypesExtensions.WriteVector4(NetworkWriter, Vector4) UnityTypesExtensions.WriteVector2Int(NetworkWriter, Vector2Int) UnityTypesExtensions.WriteVector3Int(NetworkWriter, Vector3Int) UnityTypesExtensions.WriteColor(NetworkWriter, Color) UnityTypesExtensions.WriteColor32(NetworkWriter, Color32) UnityTypesExtensions.WriteRect(NetworkWriter, Rect) UnityTypesExtensions.WritePlane(NetworkWriter, Plane) UnityTypesExtensions.WriteRay(NetworkWriter, Ray) UnityTypesExtensions.WriteMatrix4X4(NetworkWriter, Matrix4x4) PackedExtensions.WritePackedInt32(NetworkWriter, Int32) PackedExtensions.WritePackedUInt32(NetworkWriter, UInt32) PackedExtensions.WritePackedInt64(NetworkWriter, Int64) PackedExtensions.WritePackedUInt64(NetworkWriter, UInt64) CompressedExtensions.WriteQuaternion(NetworkWriter, Quaternion) CollectionExtensions.WriteBytesAndSize(NetworkWriter, Byte[], Int32, Int32) CollectionExtensions.WriteBytesAndSize(NetworkWriter, Byte[]) CollectionExtensions.WriteBytesAndSizeSegment(NetworkWriter, ArraySegment<Byte>) CollectionExtensions.WriteList<T>(NetworkWriter, List<T>) CollectionExtensions.WriteArray<T>(NetworkWriter, T[]) CollectionExtensions.WriteArraySegment<T>(NetworkWriter, ArraySegment<T>) GenericTypesSerializationExtensions.Write<T>(NetworkWriter, T)"
  },
  "api/Mirage.Serialization.QuaternionPackAttribute.html": {
    "href": "api/Mirage.Serialization.QuaternionPackAttribute.html",
    "title": "Class QuaternionPackAttribute",
    "keywords": "Class QuaternionPackAttribute Inheritance Object Attribute QuaternionPackAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax public class QuaternionPackAttribute : Attribute Constructors | Improve this Doc View Source QuaternionPackAttribute(Int32) Declaration public QuaternionPackAttribute(int bitPerElement = 9) Parameters Type Name Description Int32 bitPerElement"
  },
  "api/Mirage.Serialization.QuaternionPacker.html": {
    "href": "api/Mirage.Serialization.QuaternionPacker.html",
    "title": "Class QuaternionPacker",
    "keywords": "Class QuaternionPacker Inheritance Object QuaternionPacker Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax public sealed class QuaternionPacker Constructors | Improve this Doc View Source QuaternionPacker(Int32) Declaration public QuaternionPacker(int quaternionBitLength = 10) Parameters Type Name Description Int32 quaternionBitLength 10 per \"smallest 3\" is good enough for most people Fields | Improve this Doc View Source Default10 Default packer using 10 bits per element, 32 bits total Declaration public static readonly QuaternionPacker Default10 Field Value Type Description QuaternionPacker | Improve this Doc View Source Default9 Default packer using 9 bits per element, 29 bits total Declaration public static readonly QuaternionPacker Default9 Field Value Type Description QuaternionPacker Methods | Improve this Doc View Source Pack(NetworkWriter, Quaternion) Declaration public void Pack(NetworkWriter writer, Quaternion _value) Parameters Type Name Description NetworkWriter writer Quaternion _value | Improve this Doc View Source Unpack(NetworkReader) Declaration public Quaternion Unpack(NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Quaternion"
  },
  "api/Mirage.Serialization.Reader-1.html": {
    "href": "api/Mirage.Serialization.Reader-1.html",
    "title": "Class Reader<T>",
    "keywords": "Class Reader<T> a class that holds readers for the different types Note that c# creates a different static variable for each type This will be populated by the weaver Inheritance Object Reader<T> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax public static class Reader<T> Type Parameters Name Description T Properties | Improve this Doc View Source Read Declaration public static Func<NetworkReader, T> Read { set; } Property Value Type Description Func < NetworkReader , T>"
  },
  "api/Mirage.Serialization.StringExtensions.html": {
    "href": "api/Mirage.Serialization.StringExtensions.html",
    "title": "Class StringExtensions",
    "keywords": "Class StringExtensions Inheritance Object StringExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax public static class StringExtensions Fields | Improve this Doc View Source MaxStringLength Defaults MTU, 1300 Can be changed by user if they need to Declaration public static int MaxStringLength Field Value Type Description Int32 Methods | Improve this Doc View Source ReadString(NetworkReader) Declaration public static string ReadString(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description String string or null Exceptions Type Condition ArgumentException Throws if invalid utf8 string is received | Improve this Doc View Source WriteString(NetworkWriter, String) Declaration public static void WriteString(this NetworkWriter writer, string value) Parameters Type Name Description NetworkWriter writer String value string or null"
  },
  "api/Mirage.Serialization.SystemTypesExtensions.html": {
    "href": "api/Mirage.Serialization.SystemTypesExtensions.html",
    "title": "Class SystemTypesExtensions",
    "keywords": "Class SystemTypesExtensions Inheritance Object SystemTypesExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax public static class SystemTypesExtensions Methods | Improve this Doc View Source ReadBooleanExtension(NetworkReader) Declaration public static bool ReadBooleanExtension(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Boolean | Improve this Doc View Source ReadByteExtension(NetworkReader) Declaration public static byte ReadByteExtension(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Byte | Improve this Doc View Source ReadChar(NetworkReader) Declaration public static char ReadChar(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Char | Improve this Doc View Source ReadDecimalConverter(NetworkReader) Declaration public static decimal ReadDecimalConverter(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Decimal | Improve this Doc View Source ReadDoubleConverter(NetworkReader) Declaration public static double ReadDoubleConverter(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Double | Improve this Doc View Source ReadGuid(NetworkReader) Declaration public static Guid ReadGuid(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Guid | Improve this Doc View Source ReadInt16Extension(NetworkReader) Declaration public static short ReadInt16Extension(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Int16 | Improve this Doc View Source ReadNullable<T>(NetworkReader) Declaration public static T? ReadNullable<T>(this NetworkReader reader) where T : struct Parameters Type Name Description NetworkReader reader Returns Type Description Nullable <T> Type Parameters Name Description T | Improve this Doc View Source ReadSByteExtension(NetworkReader) Declaration public static sbyte ReadSByteExtension(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description SByte | Improve this Doc View Source ReadSingleConverter(NetworkReader) Declaration public static float ReadSingleConverter(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Single | Improve this Doc View Source ReadUInt16Extension(NetworkReader) Declaration public static ushort ReadUInt16Extension(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description UInt16 | Improve this Doc View Source WriteBooleanExtension(NetworkWriter, Boolean) Declaration public static void WriteBooleanExtension(this NetworkWriter writer, bool value) Parameters Type Name Description NetworkWriter writer Boolean value | Improve this Doc View Source WriteByteExtension(NetworkWriter, Byte) Declaration public static void WriteByteExtension(this NetworkWriter writer, byte value) Parameters Type Name Description NetworkWriter writer Byte value | Improve this Doc View Source WriteChar(NetworkWriter, Char) Declaration public static void WriteChar(this NetworkWriter writer, char value) Parameters Type Name Description NetworkWriter writer Char value | Improve this Doc View Source WriteDecimalConverter(NetworkWriter, Decimal) Declaration public static void WriteDecimalConverter(this NetworkWriter writer, decimal value) Parameters Type Name Description NetworkWriter writer Decimal value | Improve this Doc View Source WriteDoubleConverter(NetworkWriter, Double) Declaration public static void WriteDoubleConverter(this NetworkWriter writer, double value) Parameters Type Name Description NetworkWriter writer Double value | Improve this Doc View Source WriteGuid(NetworkWriter, Guid) Declaration public static void WriteGuid(this NetworkWriter writer, Guid value) Parameters Type Name Description NetworkWriter writer Guid value | Improve this Doc View Source WriteInt16Extension(NetworkWriter, Int16) Declaration public static void WriteInt16Extension(this NetworkWriter writer, short value) Parameters Type Name Description NetworkWriter writer Int16 value | Improve this Doc View Source WriteNullable<T>(NetworkWriter, Nullable<T>) Declaration public static void WriteNullable<T>(this NetworkWriter writer, T? nullable) where T : struct Parameters Type Name Description NetworkWriter writer Nullable <T> nullable Type Parameters Name Description T | Improve this Doc View Source WriteSByteExtension(NetworkWriter, SByte) Declaration public static void WriteSByteExtension(this NetworkWriter writer, sbyte value) Parameters Type Name Description NetworkWriter writer SByte value | Improve this Doc View Source WriteSingleConverter(NetworkWriter, Single) Declaration public static void WriteSingleConverter(this NetworkWriter writer, float value) Parameters Type Name Description NetworkWriter writer Single value | Improve this Doc View Source WriteUInt16Extension(NetworkWriter, UInt16) Declaration public static void WriteUInt16Extension(this NetworkWriter writer, ushort value) Parameters Type Name Description NetworkWriter writer UInt16 value"
  },
  "api/Mirage.Serialization.UnityTypesExtensions.html": {
    "href": "api/Mirage.Serialization.UnityTypesExtensions.html",
    "title": "Class UnityTypesExtensions",
    "keywords": "Class UnityTypesExtensions Inheritance Object UnityTypesExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax public static class UnityTypesExtensions Methods | Improve this Doc View Source ReadColor(NetworkReader) Declaration public static Color ReadColor(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Color | Improve this Doc View Source ReadColor32(NetworkReader) Declaration public static Color32 ReadColor32(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Color32 | Improve this Doc View Source ReadMatrix4x4(NetworkReader) Declaration public static Matrix4x4 ReadMatrix4x4(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Matrix4x4 | Improve this Doc View Source ReadPlane(NetworkReader) Declaration public static Plane ReadPlane(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Plane | Improve this Doc View Source ReadRay(NetworkReader) Declaration public static Ray ReadRay(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Ray | Improve this Doc View Source ReadRect(NetworkReader) Declaration public static Rect ReadRect(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Rect | Improve this Doc View Source ReadVector2(NetworkReader) Declaration public static Vector2 ReadVector2(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Vector2 | Improve this Doc View Source ReadVector2Int(NetworkReader) Declaration public static Vector2Int ReadVector2Int(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Vector2Int | Improve this Doc View Source ReadVector3(NetworkReader) Declaration public static Vector3 ReadVector3(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Vector3 | Improve this Doc View Source ReadVector3Int(NetworkReader) Declaration public static Vector3Int ReadVector3Int(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Vector3Int | Improve this Doc View Source ReadVector4(NetworkReader) Declaration public static Vector4 ReadVector4(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Vector4 | Improve this Doc View Source WriteColor(NetworkWriter, Color) Declaration public static void WriteColor(this NetworkWriter writer, Color value) Parameters Type Name Description NetworkWriter writer Color value | Improve this Doc View Source WriteColor32(NetworkWriter, Color32) Declaration public static void WriteColor32(this NetworkWriter writer, Color32 value) Parameters Type Name Description NetworkWriter writer Color32 value | Improve this Doc View Source WriteMatrix4X4(NetworkWriter, Matrix4x4) Declaration public static void WriteMatrix4X4(this NetworkWriter writer, Matrix4x4 value) Parameters Type Name Description NetworkWriter writer Matrix4x4 value | Improve this Doc View Source WritePlane(NetworkWriter, Plane) Declaration public static void WritePlane(this NetworkWriter writer, Plane value) Parameters Type Name Description NetworkWriter writer Plane value | Improve this Doc View Source WriteRay(NetworkWriter, Ray) Declaration public static void WriteRay(this NetworkWriter writer, Ray value) Parameters Type Name Description NetworkWriter writer Ray value | Improve this Doc View Source WriteRect(NetworkWriter, Rect) Declaration public static void WriteRect(this NetworkWriter writer, Rect value) Parameters Type Name Description NetworkWriter writer Rect value | Improve this Doc View Source WriteVector2(NetworkWriter, Vector2) Declaration public static void WriteVector2(this NetworkWriter writer, Vector2 value) Parameters Type Name Description NetworkWriter writer Vector2 value | Improve this Doc View Source WriteVector2Int(NetworkWriter, Vector2Int) Declaration public static void WriteVector2Int(this NetworkWriter writer, Vector2Int value) Parameters Type Name Description NetworkWriter writer Vector2Int value | Improve this Doc View Source WriteVector3(NetworkWriter, Vector3) Declaration public static void WriteVector3(this NetworkWriter writer, Vector3 value) Parameters Type Name Description NetworkWriter writer Vector3 value | Improve this Doc View Source WriteVector3Int(NetworkWriter, Vector3Int) Declaration public static void WriteVector3Int(this NetworkWriter writer, Vector3Int value) Parameters Type Name Description NetworkWriter writer Vector3Int value | Improve this Doc View Source WriteVector4(NetworkWriter, Vector4) Declaration public static void WriteVector4(this NetworkWriter writer, Vector4 value) Parameters Type Name Description NetworkWriter writer Vector4 value"
  },
  "api/Mirage.Serialization.VarFloatPacker.html": {
    "href": "api/Mirage.Serialization.VarFloatPacker.html",
    "title": "Class VarFloatPacker",
    "keywords": "Class VarFloatPacker Packs a float using ZigZag and VarIntBlocksPacker Inheritance Object VarFloatPacker Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax public sealed class VarFloatPacker Constructors | Improve this Doc View Source VarFloatPacker(Single, Int32) Declaration public VarFloatPacker(float precision, int blockSize) Parameters Type Name Description Single precision Int32 blockSize Methods | Improve this Doc View Source Pack(NetworkWriter, Single) Declaration public void Pack(NetworkWriter writer, float value) Parameters Type Name Description NetworkWriter writer Single value | Improve this Doc View Source Unpack(NetworkReader) Declaration public float Unpack(NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Single"
  },
  "api/Mirage.Serialization.VarIntAttribute.html": {
    "href": "api/Mirage.Serialization.VarIntAttribute.html",
    "title": "Class VarIntAttribute",
    "keywords": "Class VarIntAttribute Tells weaver the max range for small, medium and large values. Allows small values to be sent using less bits Only works with interager fields (byte, int, ulong, enums etc) Inheritance Object Attribute VarIntAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter)] public class VarIntAttribute : Attribute Constructors | Improve this Doc View Source VarIntAttribute(UInt64, UInt64) Declaration public VarIntAttribute(ulong smallMax, ulong mediumMax) Parameters Type Name Description UInt64 smallMax UInt64 mediumMax | Improve this Doc View Source VarIntAttribute(UInt64, UInt64, UInt64, Boolean) Declaration public VarIntAttribute(ulong smallMax, ulong mediumMax, ulong largeMax, bool throwIfOverLarge = true) Parameters Type Name Description UInt64 smallMax UInt64 mediumMax UInt64 largeMax Boolean throwIfOverLarge"
  },
  "api/Mirage.Serialization.VarIntBlocksAttribute.html": {
    "href": "api/Mirage.Serialization.VarIntBlocksAttribute.html",
    "title": "Class VarIntBlocksAttribute",
    "keywords": "Class VarIntBlocksAttribute Tells weaver the block size to use for packing int values Allows small values to be sent using less bits Only works with interager fields (byte, int, ulong, enums etc) Inheritance Object Attribute VarIntBlocksAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter)] public class VarIntBlocksAttribute : Attribute Constructors | Improve this Doc View Source VarIntBlocksAttribute(Int32) Bit size of each block how many bits per size bits, eg if size = 6 then values under 2^6 will be sent at 7 bits, values under 2^12 sent as 14 bits, etc Declaration public VarIntBlocksAttribute(int blockSize) Parameters Type Name Description Int32 blockSize Value should be between 1 and 64"
  },
  "api/Mirage.Serialization.VarIntBlocksPacker.html": {
    "href": "api/Mirage.Serialization.VarIntBlocksPacker.html",
    "title": "Class VarIntBlocksPacker",
    "keywords": "Class VarIntBlocksPacker Inheritance Object VarIntBlocksPacker Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax public static class VarIntBlocksPacker Methods | Improve this Doc View Source Pack(NetworkWriter, UInt64, Int32) Declaration public static void Pack(NetworkWriter writer, ulong value, int blockSize) Parameters Type Name Description NetworkWriter writer UInt64 value Int32 blockSize | Improve this Doc View Source Unpack(NetworkReader, Int32) Declaration public static ulong Unpack(NetworkReader reader, int blockSize) Parameters Type Name Description NetworkReader reader Int32 blockSize Returns Type Description UInt64"
  },
  "api/Mirage.Serialization.VarIntPacker.html": {
    "href": "api/Mirage.Serialization.VarIntPacker.html",
    "title": "Class VarIntPacker",
    "keywords": "Class VarIntPacker Inheritance Object VarIntPacker Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax public sealed class VarIntPacker Constructors | Improve this Doc View Source VarIntPacker(UInt64, UInt64) Declaration public VarIntPacker(ulong smallValue, ulong mediumValue) Parameters Type Name Description UInt64 smallValue UInt64 mediumValue | Improve this Doc View Source VarIntPacker(UInt64, UInt64, UInt64, Boolean) Declaration public VarIntPacker(ulong smallValue, ulong mediumValue, ulong largeValue, bool throwIfOverLarge = true) Parameters Type Name Description UInt64 smallValue UInt64 mediumValue UInt64 largeValue Boolean throwIfOverLarge Methods | Improve this Doc View Source FromBitCount(Int32, Int32) Declaration public static VarIntPacker FromBitCount(int smallBits, int mediumBits) Parameters Type Name Description Int32 smallBits Int32 mediumBits Returns Type Description VarIntPacker | Improve this Doc View Source FromBitCount(Int32, Int32, Int32, Boolean) Declaration public static VarIntPacker FromBitCount(int smallBits, int mediumBits, int largeBits, bool throwIfOverLarge = true) Parameters Type Name Description Int32 smallBits Int32 mediumBits Int32 largeBits Boolean throwIfOverLarge Returns Type Description VarIntPacker | Improve this Doc View Source PackUint(NetworkWriter, UInt32) Declaration public void PackUint(NetworkWriter writer, uint value) Parameters Type Name Description NetworkWriter writer UInt32 value | Improve this Doc View Source PackUlong(NetworkWriter, UInt64) Declaration public void PackUlong(NetworkWriter writer, ulong value) Parameters Type Name Description NetworkWriter writer UInt64 value | Improve this Doc View Source PackUshort(NetworkWriter, UInt16) Declaration public void PackUshort(NetworkWriter writer, ushort value) Parameters Type Name Description NetworkWriter writer UInt16 value | Improve this Doc View Source UnpackUint(NetworkReader) Declaration public uint UnpackUint(NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description UInt32 | Improve this Doc View Source UnpackUlong(NetworkReader) Declaration public ulong UnpackUlong(NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description UInt64 | Improve this Doc View Source UnpackUshort(NetworkReader) Declaration public ushort UnpackUshort(NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description UInt16"
  },
  "api/Mirage.Serialization.VarVector3Packer.html": {
    "href": "api/Mirage.Serialization.VarVector3Packer.html",
    "title": "Class VarVector3Packer",
    "keywords": "Class VarVector3Packer Packs a vector3 using ZigZag and VarIntBlocksPacker Inheritance Object VarVector3Packer Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax public sealed class VarVector3Packer Constructors | Improve this Doc View Source VarVector3Packer(Vector3, Int32) Declaration public VarVector3Packer(Vector3 precision, int blocksize) Parameters Type Name Description Vector3 precision Int32 blocksize Methods | Improve this Doc View Source Pack(NetworkWriter, Vector3) Declaration public void Pack(NetworkWriter writer, Vector3 position) Parameters Type Name Description NetworkWriter writer Vector3 position | Improve this Doc View Source Unpack(NetworkReader) Declaration public Vector3 Unpack(NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Vector3"
  },
  "api/Mirage.Serialization.Vector2PackAttribute.html": {
    "href": "api/Mirage.Serialization.Vector2PackAttribute.html",
    "title": "Class Vector2PackAttribute",
    "keywords": "Class Vector2PackAttribute Inheritance Object Attribute Vector2PackAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax public class Vector2PackAttribute : Attribute Constructors | Improve this Doc View Source Vector2PackAttribute(Single, Single, Int32) Declaration public Vector2PackAttribute(float xMax, float yMax, int bitCount) Parameters Type Name Description Single xMax Single yMax Int32 bitCount | Improve this Doc View Source Vector2PackAttribute(Single, Single, Int32, Int32) Declaration public Vector2PackAttribute(float xMax, float yMax, int xBitCount, int yBitCount) Parameters Type Name Description Single xMax Single yMax Int32 xBitCount Int32 yBitCount | Improve this Doc View Source Vector2PackAttribute(Single, Single, Single) Declaration public Vector2PackAttribute(float xMax, float yMax, float precision) Parameters Type Name Description Single xMax Single yMax Single precision | Improve this Doc View Source Vector2PackAttribute(Single, Single, Single, Single) Declaration public Vector2PackAttribute(float xMax, float yMax, float xPrecision, float yPrecision) Parameters Type Name Description Single xMax Single yMax Single xPrecision Single yPrecision"
  },
  "api/Mirage.Serialization.Vector2Packer.html": {
    "href": "api/Mirage.Serialization.Vector2Packer.html",
    "title": "Class Vector2Packer",
    "keywords": "Class Vector2Packer Inheritance Object Vector2Packer Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax public sealed class Vector2Packer Constructors | Improve this Doc View Source Vector2Packer(Single, Single, Int32, Int32) Declaration public Vector2Packer(float xMax, float yMax, int xBitCount, int yBitCount) Parameters Type Name Description Single xMax Single yMax Int32 xBitCount Int32 yBitCount | Improve this Doc View Source Vector2Packer(Single, Single, Single, Single) Declaration public Vector2Packer(float xMax, float yMax, float xPrecision, float yPrecision) Parameters Type Name Description Single xMax Single yMax Single xPrecision Single yPrecision | Improve this Doc View Source Vector2Packer(Vector2, Vector2) Declaration public Vector2Packer(Vector2 max, Vector2 precision) Parameters Type Name Description Vector2 max Vector2 precision Methods | Improve this Doc View Source Pack(NetworkWriter, Vector2) Declaration public void Pack(NetworkWriter writer, Vector2 value) Parameters Type Name Description NetworkWriter writer Vector2 value | Improve this Doc View Source Unpack(NetworkReader) Declaration public Vector2 Unpack(NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Vector2"
  },
  "api/Mirage.Serialization.Vector3PackAttribute.html": {
    "href": "api/Mirage.Serialization.Vector3PackAttribute.html",
    "title": "Class Vector3PackAttribute",
    "keywords": "Class Vector3PackAttribute Inheritance Object Attribute Vector3PackAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax public class Vector3PackAttribute : Attribute Constructors | Improve this Doc View Source Vector3PackAttribute(Single, Single, Single, Int32) Declaration public Vector3PackAttribute(float xMax, float yMax, float zMax, int bitCount) Parameters Type Name Description Single xMax Single yMax Single zMax Int32 bitCount | Improve this Doc View Source Vector3PackAttribute(Single, Single, Single, Int32, Int32, Int32) Declaration public Vector3PackAttribute(float xMax, float yMax, float zMax, int xBitCount, int yBitCount, int ZBitCount) Parameters Type Name Description Single xMax Single yMax Single zMax Int32 xBitCount Int32 yBitCount Int32 ZBitCount | Improve this Doc View Source Vector3PackAttribute(Single, Single, Single, Single) Declaration public Vector3PackAttribute(float xMax, float yMax, float zMax, float precision) Parameters Type Name Description Single xMax Single yMax Single zMax Single precision | Improve this Doc View Source Vector3PackAttribute(Single, Single, Single, Single, Single, Single) Declaration public Vector3PackAttribute(float xMax, float yMax, float zMax, float xPrecision, float yPrecision, float zPrecision) Parameters Type Name Description Single xMax Single yMax Single zMax Single xPrecision Single yPrecision Single zPrecision"
  },
  "api/Mirage.Serialization.Vector3Packer.html": {
    "href": "api/Mirage.Serialization.Vector3Packer.html",
    "title": "Class Vector3Packer",
    "keywords": "Class Vector3Packer Inheritance Object Vector3Packer Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax public sealed class Vector3Packer Constructors | Improve this Doc View Source Vector3Packer(Single, Single, Single, Int32, Int32, Int32) Declaration public Vector3Packer(float xMax, float yMax, float zMax, int xBitCount, int yBitCount, int zBitCount) Parameters Type Name Description Single xMax Single yMax Single zMax Int32 xBitCount Int32 yBitCount Int32 zBitCount | Improve this Doc View Source Vector3Packer(Single, Single, Single, Single, Single, Single) Declaration public Vector3Packer(float xMax, float yMax, float zMax, float xPrecision, float yPrecision, float zPrecision) Parameters Type Name Description Single xMax Single yMax Single zMax Single xPrecision Single yPrecision Single zPrecision | Improve this Doc View Source Vector3Packer(Vector3, Vector3) Declaration public Vector3Packer(Vector3 max, Vector3 precision) Parameters Type Name Description Vector3 max Vector3 precision Methods | Improve this Doc View Source Pack(NetworkWriter, Vector3) Declaration public void Pack(NetworkWriter writer, Vector3 value) Parameters Type Name Description NetworkWriter writer Vector3 value | Improve this Doc View Source Unpack(NetworkReader) Declaration public Vector3 Unpack(NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Vector3"
  },
  "api/Mirage.Serialization.WeaverIgnoreAttribute.html": {
    "href": "api/Mirage.Serialization.WeaverIgnoreAttribute.html",
    "title": "Class WeaverIgnoreAttribute",
    "keywords": "Class WeaverIgnoreAttribute Tells Weaver to ignore an Extension method Inheritance Object Attribute WeaverIgnoreAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax [AttributeUsage(AttributeTargets.Method)] public sealed class WeaverIgnoreAttribute : Attribute"
  },
  "api/Mirage.Serialization.Writer-1.html": {
    "href": "api/Mirage.Serialization.Writer-1.html",
    "title": "Class Writer<T>",
    "keywords": "Class Writer<T> a class that holds writers for the different types Note that c# creates a different static variable for each type This will be populated by the weaver Inheritance Object Writer<T> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax public static class Writer<T> Type Parameters Name Description T Properties | Improve this Doc View Source Write Declaration public static Action<NetworkWriter, T> Write { set; } Property Value Type Description Action < NetworkWriter , T>"
  },
  "api/Mirage.Serialization.ZigZag.html": {
    "href": "api/Mirage.Serialization.ZigZag.html",
    "title": "Class ZigZag",
    "keywords": "Class ZigZag See zigzag encoding Inheritance Object ZigZag Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax public static class ZigZag Methods | Improve this Doc View Source Decode(UInt32) Declaration public static int Decode(uint v) Parameters Type Name Description UInt32 v Returns Type Description Int32 | Improve this Doc View Source Decode(UInt64) Declaration public static long Decode(ulong v) Parameters Type Name Description UInt64 v Returns Type Description Int64 | Improve this Doc View Source Encode(Int32) Declaration public static uint Encode(int v) Parameters Type Name Description Int32 v Returns Type Description UInt32 | Improve this Doc View Source Encode(Int64) Declaration public static ulong Encode(long v) Parameters Type Name Description Int64 v Returns Type Description UInt64"
  },
  "api/Mirage.Serialization.ZigZagEncodeAttribute.html": {
    "href": "api/Mirage.Serialization.ZigZagEncodeAttribute.html",
    "title": "Class ZigZagEncodeAttribute",
    "keywords": "Class ZigZagEncodeAttribute Used along size BitCountAttribute to encodes a interager value using ZigZag so that both positive and negative values can be sent Also See: Bit Packing Documentation Inheritance Object Attribute ZigZagEncodeAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Serialization Assembly : Mirage.dll Syntax [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter)] public class ZigZagEncodeAttribute : Attribute Constructors | Improve this Doc View Source ZigZagEncodeAttribute() Declaration public ZigZagEncodeAttribute()"
  },
  "api/Mirage.ServerAttribute.html": {
    "href": "api/Mirage.ServerAttribute.html",
    "title": "Class ServerAttribute",
    "keywords": "Class ServerAttribute Prevents a method from running if server is not active. Can only be used inside a NetworkBehaviour Inheritance Object Attribute ServerAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage Assembly : Mirage.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class ServerAttribute : Attribute Fields | Improve this Doc View Source error If true, when the method is called from a client, it throws an error If false, no error is thrown, but the method won't execute useful for unity built in methods such as Await, Update, Start, etc. Declaration public bool error Field Value Type Description Boolean"
  },
  "api/Mirage.ServerObjectManager.html": {
    "href": "api/Mirage.ServerObjectManager.html",
    "title": "Class ServerObjectManager",
    "keywords": "Class ServerObjectManager The ServerObjectManager. Inheritance Object Object Component Behaviour MonoBehaviour ServerObjectManager Implements IServerObjectManager Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax [AddComponentMenu(\"Network/ServerObjectManager\")] [DisallowMultipleComponent] public class ServerObjectManager : MonoBehaviour, IServerObjectManager Remarks The set of networked objects that have been spawned is managed by ServerObjectManager. Objects are spawned with ServerObjectManager.Spawn() which adds them to this set, and makes them be created on clients. Spawned objects are removed automatically when they are destroyed, or than they can be removed from the spawned set by calling ServerObjectManager.UnSpawn() - this does not destroy the object. Fields | Improve this Doc View Source NetIdGenerator Declaration public INetIdGenerator NetIdGenerator Field Value Type Description INetIdGenerator | Improve this Doc View Source NetworkSceneManager Declaration [FormerlySerializedAs(\"networkSceneManager\")] public NetworkSceneManager NetworkSceneManager Field Value Type Description NetworkSceneManager | Improve this Doc View Source Server Declaration [FormerlySerializedAs(\"server\")] public NetworkServer Server Field Value Type Description NetworkServer Methods | Improve this Doc View Source AddCharacter(INetworkPlayer, NetworkIdentity) When an AddCharacterMessage message handler has received a request from a player, the server calls this to associate the player object with the connection. When a player is added for a connection, the client for that connection is made ready automatically. The player object is automatically spawned, so you do not need to call NetworkServer.Spawn for that object. This function is used for \"adding\" a player, not for \"replacing\" the player on a connection. If there is already a player on this playerControllerId for this connection, this will fail. Declaration public void AddCharacter(INetworkPlayer player, NetworkIdentity identity) Parameters Type Name Description INetworkPlayer player Connection which is adding the player. NetworkIdentity identity Player object spawned for the player. Exceptions Type Condition ArgumentException NetworkIdentity must not be null. | Improve this Doc View Source AddCharacter(INetworkPlayer, NetworkIdentity, Int32) When an AddCharacterMessage message handler has received a request from a player, the server calls this to associate the player object with the connection. When a player is added for a connection, the client for that connection is made ready automatically. The player object is automatically spawned, so you do not need to call NetworkServer.Spawn for that object. This function is used for \"adding\" a player, not for \"replacing\" the player on a connection. If there is already a player on this playerControllerId for this connection, this will fail. Declaration public void AddCharacter(INetworkPlayer player, NetworkIdentity character, int prefabHash) Parameters Type Name Description INetworkPlayer player Connection which is adding the player. NetworkIdentity character Player object spawned for the player. Int32 prefabHash | Improve this Doc View Source AddCharacter(INetworkPlayer, GameObject) When an AddCharacterMessage message handler has received a request from a player, the server calls this to associate the player object with the connection. When a player is added for a connection, the client for that connection is made ready automatically. The player object is automatically spawned, so you do not need to call NetworkServer.Spawn for that object. This function is used for \"adding\" a player, not for \"replacing\" the player on a connection. If there is already a player on this playerControllerId for this connection, this will fail. Declaration public void AddCharacter(INetworkPlayer player, GameObject character) Parameters Type Name Description INetworkPlayer player Connection which is adding the player. GameObject character Player object spawned for the player. Exceptions Type Condition ArgumentException NetworkIdentity must not be null. | Improve this Doc View Source AddCharacter(INetworkPlayer, GameObject, Int32) When an AddCharacterMessage message handler has received a request from a player, the server calls this to associate the player object with the connection. When a player is added for a connection, the client for that connection is made ready automatically. The player object is automatically spawned, so you do not need to call NetworkServer.Spawn for that object. This function is used for \"adding\" a player, not for \"replacing\" the player on a connection. If there is already a player on this playerControllerId for this connection, this will fail. Declaration public void AddCharacter(INetworkPlayer player, GameObject character, int prefabHash) Parameters Type Name Description INetworkPlayer player Connection which is adding the player. GameObject character Player object spawned for the player. Int32 prefabHash | Improve this Doc View Source Destroy(NetworkIdentity, Boolean) Destroys this object and corresponding objects on all clients. Game object to destroy. Sets if server object will also be destroyed Declaration public void Destroy(NetworkIdentity identity, bool destroyServerObject = true) Parameters Type Name Description NetworkIdentity identity Boolean destroyServerObject | Improve this Doc View Source Destroy(GameObject, Boolean) Destroys this object and corresponding objects on all clients. Game object to destroy. Sets if server object will also be destroyed Declaration public void Destroy(GameObject gameObject, bool destroyServerObject = true) Parameters Type Name Description GameObject gameObject Boolean destroyServerObject | Improve this Doc View Source DestroyCharacter(INetworkPlayer, Boolean) Removes and destroys the character from a player Declaration public void DestroyCharacter(INetworkPlayer player, bool destroyServerObject = true) Parameters Type Name Description INetworkPlayer player Boolean destroyServerObject Exceptions Type Condition InvalidOperationException Throws when player does not have a character | Improve this Doc View Source RemoveCharacter(INetworkPlayer, Boolean) Removes the character from a player, with the option to keep the player as the owner of the object Declaration public void RemoveCharacter(INetworkPlayer player, bool keepAuthority = false) Parameters Type Name Description INetworkPlayer player Boolean keepAuthority Exceptions Type Condition InvalidOperationException Throws when player does not have a character | Improve this Doc View Source ReplaceCharacter(INetworkPlayer, NetworkIdentity, Boolean) This replaces the player object for a connection with a different player object. The old player object is not destroyed. If a connection already has a player object, this can be used to replace that object with a different player object. This does NOT change the ready state of the connection, so it can safely be used while changing scenes. Declaration public void ReplaceCharacter(INetworkPlayer player, NetworkIdentity identity, bool keepAuthority = false) Parameters Type Name Description INetworkPlayer player Connection which is adding the player. NetworkIdentity identity Player object spawned for the player. Boolean keepAuthority Does the previous player remain attached to this connection? | Improve this Doc View Source ReplaceCharacter(INetworkPlayer, NetworkIdentity, Int32, Boolean) This replaces the player object for a connection with a different player object. The old player object is not destroyed. If a connection already has a player object, this can be used to replace that object with a different player object. This does NOT change the ready state of the connection, so it can safely be used while changing scenes. Declaration public void ReplaceCharacter(INetworkPlayer player, NetworkIdentity character, int prefabHash, bool keepAuthority = false) Parameters Type Name Description INetworkPlayer player Connection which is adding the player. NetworkIdentity character Player object spawned for the player. Int32 prefabHash Boolean keepAuthority Does the previous player remain attached to this connection? | Improve this Doc View Source ReplaceCharacter(INetworkPlayer, GameObject, Boolean) This replaces the player object for a connection with a different player object. The old player object is not destroyed. If a connection already has a player object, this can be used to replace that object with a different player object. This does NOT change the ready state of the connection, so it can safely be used while changing scenes. Declaration public void ReplaceCharacter(INetworkPlayer player, GameObject character, bool keepAuthority = false) Parameters Type Name Description INetworkPlayer player Connection which is adding the player. GameObject character Player object spawned for the player. Boolean keepAuthority Does the previous player remain attached to this connection? | Improve this Doc View Source ReplaceCharacter(INetworkPlayer, GameObject, Int32, Boolean) This replaces the player object for a connection with a different player object. The old player object is not destroyed. If a connection already has a player object, this can be used to replace that object with a different player object. This does NOT change the ready state of the connection, so it can safely be used while changing scenes. Declaration public void ReplaceCharacter(INetworkPlayer player, GameObject character, int prefabHash, bool keepAuthority = false) Parameters Type Name Description INetworkPlayer player Connection which is adding the player. GameObject character Player object spawned for the player. Int32 prefabHash Boolean keepAuthority Does the previous player remain attached to this connection? | Improve this Doc View Source Spawn(NetworkIdentity) Spawns the identity and keeping owner as Owner Declaration public void Spawn(NetworkIdentity identity) Parameters Type Name Description NetworkIdentity identity | Improve this Doc View Source Spawn(NetworkIdentity, INetworkPlayer) Spawns the identity and assigns owner to be it's owner Declaration public void Spawn(NetworkIdentity identity, INetworkPlayer owner) Parameters Type Name Description NetworkIdentity identity INetworkPlayer owner | Improve this Doc View Source Spawn(GameObject, INetworkPlayer) Spawns the identity and settings its owner to owner Declaration public void Spawn(GameObject obj, INetworkPlayer owner = null) Parameters Type Name Description GameObject obj INetworkPlayer owner | Improve this Doc View Source Spawn(GameObject, Int32, INetworkPlayer) Assigns prefabHash to the obj and then it with owner PrefabHash can only be set on an identity if the current value is Empty This method is useful if you are creating network objects at runtime and both server and client know what Guid to set on an object Declaration public void Spawn(GameObject obj, int prefabHash, INetworkPlayer owner = null) Parameters Type Name Description GameObject obj The object to spawn. Int32 prefabHash The prefabHash of the object to spawn. Used for custom spawn handlers. INetworkPlayer owner The connection that has authority over the object | Improve this Doc View Source Spawn(GameObject, GameObject) Spawns the identity and settings its owner to the player that owns ownerObject Declaration public void Spawn(GameObject obj, GameObject ownerObject) Parameters Type Name Description GameObject obj GameObject ownerObject An object owned by a player | Improve this Doc View Source SpawnObjects() This causes NetworkIdentity objects in a scene to be spawned on a server. Calling SpawnObjects() causes all scene objects to be spawned. It is like calling NetworkServer.Spawn() for each of them. Declaration public void SpawnObjects() Exceptions Type Condition InvalidOperationException Thrown when server is not active | Improve this Doc View Source SpawnVisibleObjects(INetworkPlayer) Sends spawn message for scene objects and other visible objects to the given player if it has a character If there is a NetworkSceneManager then this will be called after the client finishes loading the scene and sends SceneReadyMessage Declaration public void SpawnVisibleObjects(INetworkPlayer player) Parameters Type Name Description INetworkPlayer player The player to spawn objects for | Improve this Doc View Source SpawnVisibleObjects(INetworkPlayer, Boolean) Sends spawn message for scene objects and other visible objects to the given player if it has a character Declaration public void SpawnVisibleObjects(INetworkPlayer player, bool ignoreHasCharacter) Parameters Type Name Description INetworkPlayer player The player to spawn objects for Boolean ignoreHasCharacter If true will spawn visibile objects even if player does not have a spawned character yet | Improve this Doc View Source Start() Declaration public void Start() Implements IServerObjectManager"
  },
  "api/Mirage.ServerRpcAttribute.html": {
    "href": "api/Mirage.ServerRpcAttribute.html",
    "title": "Class ServerRpcAttribute",
    "keywords": "Class ServerRpcAttribute Call this from a client to run this function on the server. Make sure to validate input etc. It's not possible to call this from a server. Inheritance Object Attribute ServerRpcAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage Assembly : Mirage.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class ServerRpcAttribute : Attribute Fields | Improve this Doc View Source channel Declaration public int channel Field Value Type Description Int32 | Improve this Doc View Source requireAuthority Declaration public bool requireAuthority Field Value Type Description Boolean"
  },
  "api/Mirage.ServerRpcMessage.html": {
    "href": "api/Mirage.ServerRpcMessage.html",
    "title": "Struct ServerRpcMessage",
    "keywords": "Struct ServerRpcMessage Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax public struct ServerRpcMessage Fields | Improve this Doc View Source componentIndex Declaration public int componentIndex Field Value Type Description Int32 | Improve this Doc View Source functionIndex Declaration public int functionIndex Field Value Type Description Int32 | Improve this Doc View Source netId Declaration public uint netId Field Value Type Description UInt32 | Improve this Doc View Source payload Declaration public ArraySegment<byte> payload Field Value Type Description ArraySegment < Byte >"
  },
  "api/Mirage.ServerRpcReply.html": {
    "href": "api/Mirage.ServerRpcReply.html",
    "title": "Struct ServerRpcReply",
    "keywords": "Struct ServerRpcReply Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax public struct ServerRpcReply Fields | Improve this Doc View Source payload Declaration public ArraySegment<byte> payload Field Value Type Description ArraySegment < Byte > | Improve this Doc View Source replyId Declaration public int replyId Field Value Type Description Int32"
  },
  "api/Mirage.ServerRpcWithReplyMessage.html": {
    "href": "api/Mirage.ServerRpcWithReplyMessage.html",
    "title": "Struct ServerRpcWithReplyMessage",
    "keywords": "Struct ServerRpcWithReplyMessage Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax public struct ServerRpcWithReplyMessage Fields | Improve this Doc View Source componentIndex Declaration public int componentIndex Field Value Type Description Int32 | Improve this Doc View Source functionIndex Declaration public int functionIndex Field Value Type Description Int32 | Improve this Doc View Source netId Declaration public uint netId Field Value Type Description UInt32 | Improve this Doc View Source payload Declaration public ArraySegment<byte> payload Field Value Type Description ArraySegment < Byte > | Improve this Doc View Source replyId Declaration public int replyId Field Value Type Description Int32"
  },
  "api/Mirage.ShowInInspectorAttribute.html": {
    "href": "api/Mirage.ShowInInspectorAttribute.html",
    "title": "Class ShowInInspectorAttribute",
    "keywords": "Class ShowInInspectorAttribute Used to show private SyncList in the inspector, Use instead of SerializeField for non Serializable types Inheritance Object Attribute ShowInInspectorAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage Assembly : Mirage.dll Syntax [AttributeUsage(AttributeTargets.Field)] public sealed class ShowInInspectorAttribute : Attribute"
  },
  "api/Mirage.SocketLayer.ByteBuffer.html": {
    "href": "api/Mirage.SocketLayer.ByteBuffer.html",
    "title": "Class ByteBuffer",
    "keywords": "Class ByteBuffer Warpper around a byte[] that belongs to a Pool<T> Inheritance Object ByteBuffer Implements IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.SocketLayer Assembly : Mirage.SocketLayer.dll Syntax public sealed class ByteBuffer : IDisposable Fields | Improve this Doc View Source array Declaration public readonly byte[] array Field Value Type Description Byte [] Methods | Improve this Doc View Source CreateNew(Int32, Pool<ByteBuffer>) Declaration public static ByteBuffer CreateNew(int bufferSize, Pool<ByteBuffer> pool) Parameters Type Name Description Int32 bufferSize Pool < ByteBuffer > pool Returns Type Description ByteBuffer | Improve this Doc View Source Release() Declaration public void Release() Explicit Interface Implementations | Improve this Doc View Source IDisposable.Dispose() Declaration void IDisposable.Dispose() Implements System.IDisposable"
  },
  "api/Mirage.SocketLayer.ByteUtils.html": {
    "href": "api/Mirage.SocketLayer.ByteUtils.html",
    "title": "Class ByteUtils",
    "keywords": "Class ByteUtils Inheritance Object ByteUtils Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.SocketLayer Assembly : Mirage.SocketLayer.dll Syntax public static class ByteUtils Methods | Improve this Doc View Source ReadByte(Byte[], ref Int32) Declaration public static byte ReadByte(byte[] buffer, ref int offset) Parameters Type Name Description Byte [] buffer Int32 offset Returns Type Description Byte | Improve this Doc View Source ReadUInt(Byte[], ref Int32) Declaration public static uint ReadUInt(byte[] buffer, ref int offset) Parameters Type Name Description Byte [] buffer Int32 offset Returns Type Description UInt32 | Improve this Doc View Source ReadULong(Byte[], ref Int32) Declaration public static ulong ReadULong(byte[] buffer, ref int offset) Parameters Type Name Description Byte [] buffer Int32 offset Returns Type Description UInt64 | Improve this Doc View Source ReadUShort(Byte[], ref Int32) Declaration public static ushort ReadUShort(byte[] buffer, ref int offset) Parameters Type Name Description Byte [] buffer Int32 offset Returns Type Description UInt16 | Improve this Doc View Source WriteByte(Byte[], ref Int32, Byte) Declaration public static void WriteByte(byte[] buffer, ref int offset, byte value) Parameters Type Name Description Byte [] buffer Int32 offset Byte value | Improve this Doc View Source WriteUInt(Byte[], ref Int32, UInt32) Declaration public static void WriteUInt(byte[] buffer, ref int offset, uint value) Parameters Type Name Description Byte [] buffer Int32 offset UInt32 value | Improve this Doc View Source WriteULong(Byte[], ref Int32, UInt64) Declaration public static void WriteULong(byte[] buffer, ref int offset, ulong value) Parameters Type Name Description Byte [] buffer Int32 offset UInt64 value | Improve this Doc View Source WriteUShort(Byte[], ref Int32, UInt16) Declaration public static void WriteUShort(byte[] buffer, ref int offset, ushort value) Parameters Type Name Description Byte [] buffer Int32 offset UInt16 value"
  },
  "api/Mirage.SocketLayer.Commands.html": {
    "href": "api/Mirage.SocketLayer.Commands.html",
    "title": "Enum Commands",
    "keywords": "Enum Commands Small message used to control a connection PacketType and Commands uses their own byte/enum to split up the flow and add struture to the code. Namespace : Mirage.SocketLayer Assembly : Mirage.SocketLayer.dll Syntax public enum Commands Fields Name Description ConnectionAccepted Sent when Server accepts client ConnectionRejected Sent when server rejects client ConnectRequest Sent from client to request to connect to server Disconnect Sent from client or server to close connection"
  },
  "api/Mirage.SocketLayer.Config.html": {
    "href": "api/Mirage.SocketLayer.Config.html",
    "title": "Class Config",
    "keywords": "Class Config Inheritance Object Config Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.SocketLayer Assembly : Mirage.SocketLayer.dll Syntax public class Config Fields | Improve this Doc View Source BufferPoolMaxSize max number of buffers allowed to be stored in pool buffers over this limit will be left for GC Declaration public int BufferPoolMaxSize Field Value Type Description Int32 | Improve this Doc View Source BufferPoolStartSize How many buffers to create at start Declaration public int BufferPoolStartSize Field Value Type Description Int32 | Improve this Doc View Source ConnectAttemptInterval How often connect attempt message will be re-sent if server does not reply Declaration public float ConnectAttemptInterval Field Value Type Description Single | Improve this Doc View Source DisconnectDuration How long after disconnect before connection is fully removed from Peer Declaration public float DisconnectDuration Field Value Type Description Single | Improve this Doc View Source EmptyAckLimit How many empty acks to send via TimeBeforeEmptyAck Send enough acks that there is a high chances that 1 of them reaches other size Empty Ack count resets after receives new message Declaration public int EmptyAckLimit Field Value Type Description Int32 | Improve this Doc View Source KeepAliveInterval how long after previous send before sending keep alive message Keep alive is to stop connection from timing out keep alive is sent over unreliable so this interval should be low enough so that TimeoutDuration does not timeout if some unreliable packets are missed Declaration public float KeepAliveInterval Field Value Type Description Single | Improve this Doc View Source key Key sent with connection message (defaults to Major version of assmebly) Used to validate that server and client are same application/version NOTE: key will be ASCII encoded Declaration public string key Field Value Type Description String | Improve this Doc View Source MaxConnectAttempts How many times attempt to connect before giving up Declaration public int MaxConnectAttempts Field Value Type Description Int32 | Improve this Doc View Source MaxConnections Max concurrent connections server will accept Declaration public int MaxConnections Field Value Type Description Int32 | Improve this Doc View Source MaxReliableFragments How many fragments large reliable message can be split into if set to 0 then messages over MaxPacketSize will not be allowed to be sent max value is 255 Declaration public int MaxReliableFragments Field Value Type Description Int32 | Improve this Doc View Source MaxReliablePacketsInSendBufferPerConnection How many packets can exist it ring buffers for Ack and Reliable system This value wont count null packets so can be set lower than SequenceSize 's value to limit actual number of packets waiting to be acked Example: (max=2000) * (MTU=1200) * (connections=100) => 240MB Declaration public int MaxReliablePacketsInSendBufferPerConnection Field Value Type Description Int32 | Improve this Doc View Source ReceivesBeforeEmptyAck How many receives before sending an empty ack this is so that acks are still sent even if receives many message before replying Declaration public int ReceivesBeforeEmptyAck Field Value Type Description Int32 | Improve this Doc View Source SequenceSize Bit size of sequence used for AckSystem this value also determines the size of ring buffers for Ack and Reliable system Max of 16 Declaration public int SequenceSize Field Value Type Description Int32 | Improve this Doc View Source TimeBeforeEmptyAck how long after last send to send ack without a message Declaration public float TimeBeforeEmptyAck Field Value Type Description Single | Improve this Doc View Source TimeoutDuration how long without a message before disconnecting connection Declaration public float TimeoutDuration Field Value Type Description Single"
  },
  "api/Mirage.SocketLayer.ConnectionState.html": {
    "href": "api/Mirage.SocketLayer.ConnectionState.html",
    "title": "Enum ConnectionState",
    "keywords": "Enum ConnectionState Namespace : Mirage.SocketLayer Assembly : Mirage.SocketLayer.dll Syntax public enum ConnectionState Fields Name Description Connected Server as accepted connection Connecting Client is connecting to server Created Initial state Destroyed Removed from collection and all state cleaned up Disconnected Server or client has disconnected the connection and is waiting to be cleaned up Removing Marked to be removed from the connection collection"
  },
  "api/Mirage.SocketLayer.DisconnectReason.html": {
    "href": "api/Mirage.SocketLayer.DisconnectReason.html",
    "title": "Enum DisconnectReason",
    "keywords": "Enum DisconnectReason Reason why a connection was disconnected Namespace : Mirage.SocketLayer Assembly : Mirage.SocketLayer.dll Syntax public enum DisconnectReason Fields Name Description InvalidPacket Received packet was not allowed by config None No reason given RequestedByLocalPeer Disconnect called by higher level RequestedByRemotePeer Disconnect called by higher level Timeout No message Received in timeout window"
  },
  "api/Mirage.SocketLayer.html": {
    "href": "api/Mirage.SocketLayer.html",
    "title": "Namespace Mirage.SocketLayer",
    "keywords": "Namespace Mirage.SocketLayer Classes ByteBuffer Warpper around a byte[] that belongs to a Pool<T> ByteUtils Config INotifyCallBackExtensions Metrics NotifyToken Object returned from Mirage.SocketLayer.AckSystem.SendNotify(System.Byte[],System.Int32,System.Int32) with events for when packet is Lost or Delivered Peer Controls flow of data in/out of mirage, Uses ISocket Pool<T> Holds a collection of ByteBuffer so they can be re-used without allocations RingBuffer<T> Sequencer A sequence generator that can wrap. For example a 2 bit sequencer would generate the following numbers: 0,1,2,3,0,1,2,3,0,1,2,3... SocketFactory Creates an instance of ISocket Structs Metrics.Frame Interfaces IConnection Connection for Peer IDataHandler Handles data from SocketLayer A high level script should implement this interface give it to Peer when it is created IEndPoint Object that can be used as an endpoint for Peer and ISocket Implementation of this should override GetHashCode() and Equals(Object) so that 2 instance wil be equal if they have the same address internally When a new connection is received by Peer a copy of this endpoint will be created and given to that connection. On future received the incoming endpoint will be compared to active connections inside a dictionary IHasAddress Can be added to SocketFactory that have an Address Setting IHasPort Can be added to SocketFactory that have a Port Setting INotifyCallBack Can be passed into Mirage.SocketLayer.AckSystem.SendNotify(System.Byte[],System.Int32,System.Int32,Mirage.SocketLayer.INotifyCallBack) and methods will be invoked when notify is delivered or lost See the Notify Example on how to use this interface INotifyToken Object returned from Mirage.SocketLayer.AckSystem.SendNotify(System.Byte[],System.Int32,System.Int32) with events for when packet is Lost or Delivered IPeer ISocket Link between Mirage and the outside world ITime Enums Commands Small message used to control a connection PacketType and Commands uses their own byte/enum to split up the flow and add struture to the code. ConnectionState DisconnectReason Reason why a connection was disconnected PacketType RejectReason Reason for reject sent from server Delegates Pool<T>.CreateNewItem"
  },
  "api/Mirage.SocketLayer.IConnection.html": {
    "href": "api/Mirage.SocketLayer.IConnection.html",
    "title": "Interface IConnection",
    "keywords": "Interface IConnection Connection for Peer Namespace : Mirage.SocketLayer Assembly : Mirage.SocketLayer.dll Syntax public interface IConnection Properties | Improve this Doc View Source EndPoint Declaration IEndPoint EndPoint { get; } Property Value Type Description IEndPoint | Improve this Doc View Source State Declaration ConnectionState State { get; } Property Value Type Description ConnectionState Methods | Improve this Doc View Source Disconnect() Declaration void Disconnect() | Improve this Doc View Source SendNotify(ArraySegment<Byte>) Declaration INotifyToken SendNotify(ArraySegment<byte> packet) Parameters Type Name Description ArraySegment < Byte > packet Returns Type Description INotifyToken | Improve this Doc View Source SendNotify(ArraySegment<Byte>, INotifyCallBack) Declaration void SendNotify(ArraySegment<byte> packet, INotifyCallBack callBacks) Parameters Type Name Description ArraySegment < Byte > packet INotifyCallBack callBacks | Improve this Doc View Source SendNotify(Byte[]) Declaration INotifyToken SendNotify(byte[] packet) Parameters Type Name Description Byte [] packet Returns Type Description INotifyToken | Improve this Doc View Source SendNotify(Byte[], INotifyCallBack) Declaration void SendNotify(byte[] packet, INotifyCallBack callBacks) Parameters Type Name Description Byte [] packet INotifyCallBack callBacks | Improve this Doc View Source SendNotify(Byte[], Int32, Int32) Declaration INotifyToken SendNotify(byte[] packet, int offset, int length) Parameters Type Name Description Byte [] packet Int32 offset Int32 length Returns Type Description INotifyToken | Improve this Doc View Source SendNotify(Byte[], Int32, Int32, INotifyCallBack) Declaration void SendNotify(byte[] packet, int offset, int length, INotifyCallBack callBacks) Parameters Type Name Description Byte [] packet Int32 offset Int32 length INotifyCallBack callBacks | Improve this Doc View Source SendReliable(ArraySegment<Byte>) single message, batched by AckSystem Declaration void SendReliable(ArraySegment<byte> message) Parameters Type Name Description ArraySegment < Byte > message | Improve this Doc View Source SendReliable(Byte[]) single message, batched by AckSystem Declaration void SendReliable(byte[] message) Parameters Type Name Description Byte [] message | Improve this Doc View Source SendReliable(Byte[], Int32, Int32) single message, batched by AckSystem Declaration void SendReliable(byte[] message, int offset, int length) Parameters Type Name Description Byte [] message Int32 offset Int32 length | Improve this Doc View Source SendUnreliable(ArraySegment<Byte>) Declaration void SendUnreliable(ArraySegment<byte> packet) Parameters Type Name Description ArraySegment < Byte > packet | Improve this Doc View Source SendUnreliable(Byte[]) Declaration void SendUnreliable(byte[] packet) Parameters Type Name Description Byte [] packet | Improve this Doc View Source SendUnreliable(Byte[], Int32, Int32) Declaration void SendUnreliable(byte[] packet, int offset, int length) Parameters Type Name Description Byte [] packet Int32 offset Int32 length"
  },
  "api/Mirage.SocketLayer.IDataHandler.html": {
    "href": "api/Mirage.SocketLayer.IDataHandler.html",
    "title": "Interface IDataHandler",
    "keywords": "Interface IDataHandler Handles data from SocketLayer A high level script should implement this interface give it to Peer when it is created Namespace : Mirage.SocketLayer Assembly : Mirage.SocketLayer.dll Syntax public interface IDataHandler Methods | Improve this Doc View Source ReceiveMessage(IConnection, ArraySegment<Byte>) Receives a new Packet from low level Declaration void ReceiveMessage(IConnection connection, ArraySegment<byte> message) Parameters Type Name Description IConnection connection connection that sent data ArraySegment < Byte > message Single message received by peer"
  },
  "api/Mirage.SocketLayer.IEndPoint.html": {
    "href": "api/Mirage.SocketLayer.IEndPoint.html",
    "title": "Interface IEndPoint",
    "keywords": "Interface IEndPoint Object that can be used as an endpoint for Peer and ISocket Implementation of this should override GetHashCode() and Equals(Object) so that 2 instance wil be equal if they have the same address internally When a new connection is received by Peer a copy of this endpoint will be created and given to that connection. On future received the incoming endpoint will be compared to active connections inside a dictionary Namespace : Mirage.SocketLayer Assembly : Mirage.SocketLayer.dll Syntax public interface IEndPoint Methods | Improve this Doc View Source CreateCopy() Creates a new instance of IEndPoint with same connection data this is called when a new connection is created by Peer Declaration IEndPoint CreateCopy() Returns Type Description IEndPoint"
  },
  "api/Mirage.SocketLayer.IHasAddress.html": {
    "href": "api/Mirage.SocketLayer.IHasAddress.html",
    "title": "Interface IHasAddress",
    "keywords": "Interface IHasAddress Can be added to SocketFactory that have an Address Setting Namespace : Mirage.SocketLayer Assembly : Mirage.SocketLayer.dll Syntax public interface IHasAddress Properties | Improve this Doc View Source Address Declaration string Address { get; set; } Property Value Type Description String"
  },
  "api/Mirage.SocketLayer.IHasPort.html": {
    "href": "api/Mirage.SocketLayer.IHasPort.html",
    "title": "Interface IHasPort",
    "keywords": "Interface IHasPort Can be added to SocketFactory that have a Port Setting Namespace : Mirage.SocketLayer Assembly : Mirage.SocketLayer.dll Syntax public interface IHasPort Properties | Improve this Doc View Source Port Declaration int Port { get; set; } Property Value Type Description Int32"
  },
  "api/Mirage.SocketLayer.INotifyCallBack.html": {
    "href": "api/Mirage.SocketLayer.INotifyCallBack.html",
    "title": "Interface INotifyCallBack",
    "keywords": "Interface INotifyCallBack Can be passed into Mirage.SocketLayer.AckSystem.SendNotify(System.Byte[],System.Int32,System.Int32,Mirage.SocketLayer.INotifyCallBack) and methods will be invoked when notify is delivered or lost See the Notify Example on how to use this interface Namespace : Mirage.SocketLayer Assembly : Mirage.SocketLayer.dll Syntax public interface INotifyCallBack Methods | Improve this Doc View Source OnDelivered() Declaration void OnDelivered() | Improve this Doc View Source OnLost() Declaration void OnLost() Extension Methods INotifyCallBackExtensions.Notify(INotifyCallBack, Boolean)"
  },
  "api/Mirage.SocketLayer.INotifyCallBackExtensions.html": {
    "href": "api/Mirage.SocketLayer.INotifyCallBackExtensions.html",
    "title": "Class INotifyCallBackExtensions",
    "keywords": "Class INotifyCallBackExtensions Inheritance Object INotifyCallBackExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.SocketLayer Assembly : Mirage.SocketLayer.dll Syntax public static class INotifyCallBackExtensions Methods | Improve this Doc View Source Notify(INotifyCallBack, Boolean) Declaration public static void Notify(this INotifyCallBack callBack, bool delivered) Parameters Type Name Description INotifyCallBack callBack Boolean delivered"
  },
  "api/Mirage.SocketLayer.INotifyToken.html": {
    "href": "api/Mirage.SocketLayer.INotifyToken.html",
    "title": "Interface INotifyToken",
    "keywords": "Interface INotifyToken Object returned from Mirage.SocketLayer.AckSystem.SendNotify(System.Byte[],System.Int32,System.Int32) with events for when packet is Lost or Delivered Namespace : Mirage.SocketLayer Assembly : Mirage.SocketLayer.dll Syntax public interface INotifyToken Events | Improve this Doc View Source Delivered Declaration event Action Delivered Event Type Type Description Action | Improve this Doc View Source Lost Declaration event Action Lost Event Type Type Description Action"
  },
  "api/Mirage.SocketLayer.IPeer.html": {
    "href": "api/Mirage.SocketLayer.IPeer.html",
    "title": "Interface IPeer",
    "keywords": "Interface IPeer Namespace : Mirage.SocketLayer Assembly : Mirage.SocketLayer.dll Syntax public interface IPeer Methods | Improve this Doc View Source Bind(IEndPoint) Declaration void Bind(IEndPoint endPoint) Parameters Type Name Description IEndPoint endPoint | Improve this Doc View Source Close() Declaration void Close() | Improve this Doc View Source Connect(IEndPoint) Declaration IConnection Connect(IEndPoint endPoint) Parameters Type Name Description IEndPoint endPoint Returns Type Description IConnection | Improve this Doc View Source UpdateReceive() Call this at the start of the frame to receive new messages Declaration void UpdateReceive() | Improve this Doc View Source UpdateSent() Call this at end of frame to send new batches Declaration void UpdateSent() Events | Improve this Doc View Source OnConnected Declaration event Action<IConnection> OnConnected Event Type Type Description Action < IConnection > | Improve this Doc View Source OnConnectionFailed Declaration event Action<IConnection, RejectReason> OnConnectionFailed Event Type Type Description Action < IConnection , RejectReason > | Improve this Doc View Source OnDisconnected Declaration event Action<IConnection, DisconnectReason> OnDisconnected Event Type Type Description Action < IConnection , DisconnectReason >"
  },
  "api/Mirage.SocketLayer.ISocket.html": {
    "href": "api/Mirage.SocketLayer.ISocket.html",
    "title": "Interface ISocket",
    "keywords": "Interface ISocket Link between Mirage and the outside world Namespace : Mirage.SocketLayer Assembly : Mirage.SocketLayer.dll Syntax public interface ISocket Methods | Improve this Doc View Source Bind(IEndPoint) Starts listens for data on an endpoint Used by Server to allow clients to connect Declaration void Bind(IEndPoint endPoint) Parameters Type Name Description IEndPoint endPoint the endpoint to listen on | Improve this Doc View Source Close() Closes the socket, stops receiving messages from other peers Declaration void Close() | Improve this Doc View Source Connect(IEndPoint) Sets up Socket ready to send data to endpoint as a client Declaration void Connect(IEndPoint endPoint) Parameters Type Name Description IEndPoint endPoint | Improve this Doc View Source Poll() Checks if a packet is available Declaration bool Poll() Returns Type Description Boolean true if there is atleast 1 packet to read | Improve this Doc View Source Receive(Byte[], out IEndPoint) Gets next packet Should be called after Poll Implementation should check that incoming packet is within the size of buffer , and make sure not to return bytesReceived above that size Declaration int Receive(byte[] buffer, out IEndPoint endPoint) Parameters Type Name Description Byte [] buffer buffer to write recevived packet into IEndPoint endPoint where packet came from Returns Type Description Int32 length of packet, should not be above buffer length | Improve this Doc View Source Send(IEndPoint, Byte[], Int32) Sends a packet to an endpoint Implementation should use length because packet is a buffer than may contain data from previous packets Declaration void Send(IEndPoint endPoint, byte[] packet, int length) Parameters Type Name Description IEndPoint endPoint where packet is being sent to Byte [] packet buffer that contains the packet, starting at index 0 Int32 length length of the packet"
  },
  "api/Mirage.SocketLayer.ITime.html": {
    "href": "api/Mirage.SocketLayer.ITime.html",
    "title": "Interface ITime",
    "keywords": "Interface ITime Namespace : Mirage.SocketLayer Assembly : Mirage.SocketLayer.dll Syntax public interface ITime Properties | Improve this Doc View Source Now Declaration float Now { get; } Property Value Type Description Single"
  },
  "api/Mirage.SocketLayer.Metrics.Frame.html": {
    "href": "api/Mirage.SocketLayer.Metrics.Frame.html",
    "title": "Struct Metrics.Frame",
    "keywords": "Struct Metrics.Frame Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Mirage.SocketLayer Assembly : Mirage.SocketLayer.dll Syntax public struct Frame Fields | Improve this Doc View Source connectionCount Number of connections Declaration public int connectionCount Field Value Type Description Int32 | Improve this Doc View Source init Is this frame initialized (uninitialized frames can be excluded from averages) Declaration public bool init Field Value Type Description Boolean | Improve this Doc View Source receiveBytes Number of bytes received from connections Declaration public int receiveBytes Field Value Type Description Int32 | Improve this Doc View Source receiveCount Number of packets received from connections Declaration public int receiveCount Field Value Type Description Int32 | Improve this Doc View Source receiveMessagesNotifyBytes Number of Notify bytes received from connections (excludes packets headers, will just be the message sent by high level) Declaration public int receiveMessagesNotifyBytes Field Value Type Description Int32 | Improve this Doc View Source receiveMessagesNotifyCount Number of Notify message received from connections Declaration public int receiveMessagesNotifyCount Field Value Type Description Int32 | Improve this Doc View Source receiveMessagesReliableBytes Number of Reliable bytes received from connections (excludes packets headers, will just be the message sent by high level) Declaration public int receiveMessagesReliableBytes Field Value Type Description Int32 | Improve this Doc View Source receiveMessagesReliableCount Number of Reliable message received from connections Declaration public int receiveMessagesReliableCount Field Value Type Description Int32 | Improve this Doc View Source receiveMessagesUnreliableBytes Number of Unreliable bytes received from connections (excludes packets headers, will just be the message sent by high level) Declaration public int receiveMessagesUnreliableBytes Field Value Type Description Int32 | Improve this Doc View Source receiveMessagesUnreliableCount Number of Unreliable message received from connections Declaration public int receiveMessagesUnreliableCount Field Value Type Description Int32 | Improve this Doc View Source receiveUnconnectedBytes Number of packets received from unconnected addresses Declaration public int receiveUnconnectedBytes Field Value Type Description Int32 | Improve this Doc View Source receiveUnconnectedCount Number of bytes received from unconnected addresses Declaration public int receiveUnconnectedCount Field Value Type Description Int32 | Improve this Doc View Source resendBytes Number of bytes resent by reliable system Declaration public int resendBytes Field Value Type Description Int32 | Improve this Doc View Source resendCount Number of resend calls by reliable system Declaration public int resendCount Field Value Type Description Int32 | Improve this Doc View Source sendBytes Number of bytes sent to connections Declaration public int sendBytes Field Value Type Description Int32 | Improve this Doc View Source sendCount Number of send calls to connections Declaration public int sendCount Field Value Type Description Int32 | Improve this Doc View Source sendMessagesNotifyBytes Number of Notify bytes sent to connections (excludes packets headers, will just be the message sent by high level) Declaration public int sendMessagesNotifyBytes Field Value Type Description Int32 | Improve this Doc View Source sendMessagesNotifyCount Number of Notify message sent to connections Declaration public int sendMessagesNotifyCount Field Value Type Description Int32 | Improve this Doc View Source sendMessagesReliableBytes Number of Reliable bytes sent to connections (excludes packets headers, will just be the message sent by high level) Declaration public int sendMessagesReliableBytes Field Value Type Description Int32 | Improve this Doc View Source sendMessagesReliableCount Number of Reliable message sent to connections Declaration public int sendMessagesReliableCount Field Value Type Description Int32 | Improve this Doc View Source sendMessagesUnreliableBytes Number of Unreliable bytes sent to connections (excludes packets headers, will just be the message sent by high level) Declaration public int sendMessagesUnreliableBytes Field Value Type Description Int32 | Improve this Doc View Source sendMessagesUnreliableCount Number of Unreliable message sent to connections Declaration public int sendMessagesUnreliableCount Field Value Type Description Int32 | Improve this Doc View Source sendUnconnectedBytes Number of bytes sent to unconnected addresses Declaration public int sendUnconnectedBytes Field Value Type Description Int32 | Improve this Doc View Source sendUnconnectedCount Number of send calls to unconnected addresses Declaration public int sendUnconnectedCount Field Value Type Description Int32 Properties | Improve this Doc View Source receiveMessagesBytesTotal Number of bytes received from connections (excludes packets headers, will just be the message sent by high level) Declaration public int receiveMessagesBytesTotal { get; } Property Value Type Description Int32 | Improve this Doc View Source receiveMessagesCountTotal Number of message received from connections Declaration public int receiveMessagesCountTotal { get; } Property Value Type Description Int32 | Improve this Doc View Source sendMessagesBytesTotal Number of bytes sent to connections (excludes packets headers, will just be the message sent by high level) Declaration public int sendMessagesBytesTotal { get; } Property Value Type Description Int32 | Improve this Doc View Source sendMessagesCountTotal Number of message sent to connections Declaration public int sendMessagesCountTotal { get; } Property Value Type Description Int32"
  },
  "api/Mirage.SocketLayer.Metrics.html": {
    "href": "api/Mirage.SocketLayer.Metrics.html",
    "title": "Class Metrics",
    "keywords": "Class Metrics Inheritance Object Metrics Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.SocketLayer Assembly : Mirage.SocketLayer.dll Syntax public class Metrics Constructors | Improve this Doc View Source Metrics(Int32) Declaration public Metrics(int bitSize = 10) Parameters Type Name Description Int32 bitSize Fields | Improve this Doc View Source buffer Declaration public readonly Metrics.Frame[] buffer Field Value Type Description Metrics.Frame [] | Improve this Doc View Source Sequencer Declaration public readonly Sequencer Sequencer Field Value Type Description Sequencer | Improve this Doc View Source tick Declaration public uint tick Field Value Type Description UInt32 Properties | Improve this Doc View Source Current Declaration [Obsolete(\"Frame is now a struct, use buffer and tick instead if you need to set data\")] public Metrics.Frame Current { get; } Property Value Type Description Metrics.Frame Methods | Improve this Doc View Source OnReceive(Int32) Declaration public void OnReceive(int length) Parameters Type Name Description Int32 length | Improve this Doc View Source OnReceiveMessageNotify(Int32) Declaration public void OnReceiveMessageNotify(int length) Parameters Type Name Description Int32 length | Improve this Doc View Source OnReceiveMessageReliable(Int32) Declaration public void OnReceiveMessageReliable(int length) Parameters Type Name Description Int32 length | Improve this Doc View Source OnReceiveMessageUnreliable(Int32) Declaration public void OnReceiveMessageUnreliable(int length) Parameters Type Name Description Int32 length | Improve this Doc View Source OnReceiveUnconnected(Int32) Declaration public void OnReceiveUnconnected(int length) Parameters Type Name Description Int32 length | Improve this Doc View Source OnResend(Int32) Declaration public void OnResend(int length) Parameters Type Name Description Int32 length | Improve this Doc View Source OnSend(Int32) Declaration public void OnSend(int length) Parameters Type Name Description Int32 length | Improve this Doc View Source OnSendMessageNotify(Int32) Declaration public void OnSendMessageNotify(int length) Parameters Type Name Description Int32 length | Improve this Doc View Source OnSendMessageReliable(Int32) Declaration public void OnSendMessageReliable(int length) Parameters Type Name Description Int32 length | Improve this Doc View Source OnSendMessageUnreliable(Int32) Declaration public void OnSendMessageUnreliable(int length) Parameters Type Name Description Int32 length | Improve this Doc View Source OnTick(Int32) Declaration public void OnTick(int connectionCount) Parameters Type Name Description Int32 connectionCount"
  },
  "api/Mirage.SocketLayer.NotifyToken.html": {
    "href": "api/Mirage.SocketLayer.NotifyToken.html",
    "title": "Class NotifyToken",
    "keywords": "Class NotifyToken Object returned from Mirage.SocketLayer.AckSystem.SendNotify(System.Byte[],System.Int32,System.Int32) with events for when packet is Lost or Delivered Inheritance Object NotifyToken Implements INotifyToken INotifyCallBack Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.SocketLayer Assembly : Mirage.SocketLayer.dll Syntax public class NotifyToken : INotifyToken, INotifyCallBack Methods | Improve this Doc View Source OnDelivered() Declaration public void OnDelivered() | Improve this Doc View Source OnLost() Declaration public void OnLost() Events | Improve this Doc View Source Delivered Declaration public event Action Delivered Event Type Type Description Action | Improve this Doc View Source Lost Declaration public event Action Lost Event Type Type Description Action Implements INotifyToken INotifyCallBack Extension Methods INotifyCallBackExtensions.Notify(INotifyCallBack, Boolean)"
  },
  "api/Mirage.SocketLayer.PacketType.html": {
    "href": "api/Mirage.SocketLayer.PacketType.html",
    "title": "Enum PacketType",
    "keywords": "Enum PacketType Namespace : Mirage.SocketLayer Assembly : Mirage.SocketLayer.dll Syntax public enum PacketType Fields Name Description Ack packet with just acks Command see Commands KeepAlive Used to keep connection alive. Similar to ping/pong Notify data packet sent with ack header so sender knows if packet gets delivered or lost Reliable packet with just acks ReliableFragment packet with just acks Unreliable data packet sent with no guarantee for order or reliablity used for data that is fire and forget"
  },
  "api/Mirage.SocketLayer.Peer.html": {
    "href": "api/Mirage.SocketLayer.Peer.html",
    "title": "Class Peer",
    "keywords": "Class Peer Controls flow of data in/out of mirage, Uses ISocket Inheritance Object Peer Implements IPeer Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.SocketLayer Assembly : Mirage.SocketLayer.dll Syntax public sealed class Peer : IPeer Constructors | Improve this Doc View Source Peer(ISocket, Int32, IDataHandler, Config, ILogger, Metrics) Declaration public Peer(ISocket socket, int maxPacketSize, IDataHandler dataHandler, Config config = null, ILogger logger = null, Metrics metrics = null) Parameters Type Name Description ISocket socket Int32 maxPacketSize IDataHandler dataHandler Config config ILogger logger Metrics metrics Methods | Improve this Doc View Source Bind(IEndPoint) Declaration public void Bind(IEndPoint endPoint) Parameters Type Name Description IEndPoint endPoint | Improve this Doc View Source Close() Declaration public void Close() | Improve this Doc View Source Connect(IEndPoint) Declaration public IConnection Connect(IEndPoint endPoint) Parameters Type Name Description IEndPoint endPoint Returns Type Description IConnection | Improve this Doc View Source UpdateReceive() Call this at the start of the frame to receive new messages Declaration public void UpdateReceive() | Improve this Doc View Source UpdateSent() Call this at end of frame to send new batches Declaration public void UpdateSent() Events | Improve this Doc View Source OnConnected Declaration public event Action<IConnection> OnConnected Event Type Type Description Action < IConnection > | Improve this Doc View Source OnConnectionFailed Declaration public event Action<IConnection, RejectReason> OnConnectionFailed Event Type Type Description Action < IConnection , RejectReason > | Improve this Doc View Source OnDisconnected Declaration public event Action<IConnection, DisconnectReason> OnDisconnected Event Type Type Description Action < IConnection , DisconnectReason > Implements IPeer"
  },
  "api/Mirage.SocketLayer.Pool-1.CreateNewItem.html": {
    "href": "api/Mirage.SocketLayer.Pool-1.CreateNewItem.html",
    "title": "Delegate Pool<T>.CreateNewItem",
    "keywords": "Delegate Pool<T>.CreateNewItem Namespace : Mirage.SocketLayer Assembly : Mirage.SocketLayer.dll Syntax public delegate T CreateNewItem(int bufferSize, Pool<T> pool); Parameters Type Name Description Int32 bufferSize Pool <T> pool Returns Type Description T"
  },
  "api/Mirage.SocketLayer.Pool-1.html": {
    "href": "api/Mirage.SocketLayer.Pool-1.html",
    "title": "Class Pool<T>",
    "keywords": "Class Pool<T> Holds a collection of ByteBuffer so they can be re-used without allocations Inheritance Object Pool<T> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.SocketLayer Assembly : Mirage.SocketLayer.dll Syntax public class Pool<T> where T : class Type Parameters Name Description T Constructors | Improve this Doc View Source Pool(Pool<T>.CreateNewItem, Int32, Int32, Int32, ILogger) Declaration public Pool(Pool<T>.CreateNewItem createNew, int bufferSize, int startPoolSize, int maxPoolSize, ILogger logger = null) Parameters Type Name Description Pool.CreateNewItem <> createNew Int32 bufferSize size of each buffer Int32 startPoolSize how many buffers to create at start Int32 maxPoolSize max number of buffers in pool ILogger logger Methods | Improve this Doc View Source Configure(Int32, Int32) sets max pool size and then creates writers up to new start size Declaration public void Configure(int startPoolSize, int maxPoolSize) Parameters Type Name Description Int32 startPoolSize Int32 maxPoolSize | Improve this Doc View Source Put(T) Declaration public void Put(T buffer) Parameters Type Name Description T buffer | Improve this Doc View Source Take() Declaration public T Take() Returns Type Description T"
  },
  "api/Mirage.SocketLayer.RejectReason.html": {
    "href": "api/Mirage.SocketLayer.RejectReason.html",
    "title": "Enum RejectReason",
    "keywords": "Enum RejectReason Reason for reject sent from server Namespace : Mirage.SocketLayer Assembly : Mirage.SocketLayer.dll Syntax public enum RejectReason Fields Name Description ClosedByPeer Closed called locally before connect KeyInvalid Key given with first message did not match the value on the server None No reason given ServerFull Server is at max connections and will not accept a new connection until one disconnects Timeout Server did not reply to connection request"
  },
  "api/Mirage.SocketLayer.RingBuffer-1.html": {
    "href": "api/Mirage.SocketLayer.RingBuffer-1.html",
    "title": "Class RingBuffer<T>",
    "keywords": "Class RingBuffer<T> Inheritance Object RingBuffer<T> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.SocketLayer Assembly : Mirage.SocketLayer.dll Syntax public class RingBuffer<T> Type Parameters Name Description T Constructors | Improve this Doc View Source RingBuffer(Int32) Declaration public RingBuffer(int bitCount) Parameters Type Name Description Int32 bitCount | Improve this Doc View Source RingBuffer(Int32, IEqualityComparer<T>) Declaration public RingBuffer(int bitCount, IEqualityComparer<T> comparer) Parameters Type Name Description Int32 bitCount IEqualityComparer <T> comparer Fields | Improve this Doc View Source Sequencer Declaration public readonly Sequencer Sequencer Field Value Type Description Sequencer Properties | Improve this Doc View Source Count Number of non-null items in buffer NOTE: this is not distance from read to write Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source IsFull Declaration public bool IsFull { get; } Property Value Type Description Boolean | Improve this Doc View Source Item[Int32] Declaration public T this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description T | Improve this Doc View Source Item[UInt32] Declaration public T this[uint index] { get; } Parameters Type Name Description UInt32 index Property Value Type Description T | Improve this Doc View Source Read Declaration public uint Read { get; } Property Value Type Description UInt32 | Improve this Doc View Source Write Declaration public uint Write { get; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Dequeue() Removes next item and increments read index Assumes next items exists, best to use this with Exists(UInt32) Declaration public T Dequeue() Returns Type Description T | Improve this Doc View Source DistanceToRead(UInt32) Declaration public long DistanceToRead(uint from) Parameters Type Name Description UInt32 from Returns Type Description Int64 | Improve this Doc View Source Enqueue(T) Declaration public uint Enqueue(T item) Parameters Type Name Description T item Returns Type Description UInt32 sequance of written item | Improve this Doc View Source Exists(UInt32) Does item exist at index Index will be moved into bounds Declaration public bool Exists(uint index) Parameters Type Name Description UInt32 index Returns Type Description Boolean true if item exists, or false if it is missing | Improve this Doc View Source InsertAt(UInt32, T) Declaration public void InsertAt(uint index, T item) Parameters Type Name Description UInt32 index T item | Improve this Doc View Source MoveReadOne() Moves read 1 index Declaration public void MoveReadOne() | Improve this Doc View Source MoveReadToNextNonEmpty() Moves read index to next non empty position this is useful when removing items from buffer in random order. Will stop when write == read, or when next buffer item is not empty Declaration public void MoveReadToNextNonEmpty() | Improve this Doc View Source RemoveAt(UInt32) Declaration public void RemoveAt(uint index) Parameters Type Name Description UInt32 index | Improve this Doc View Source RemoveNext() Removes the item at read index and increments read index can be used after TryPeak(out T) to do the same as TryDequeue(out T) Declaration public void RemoveNext() | Improve this Doc View Source TryDequeue(out T) Tries to remove the item at read index Declaration public bool TryDequeue(out T item) Parameters Type Name Description T item Returns Type Description Boolean true if item exists, or false if it is missing | Improve this Doc View Source TryPeak(out T) Tries to read the item at read index same as TryDequeue(out T) but does not remove the item after reading it Declaration public bool TryPeak(out T item) Parameters Type Name Description T item Returns Type Description Boolean true if item exists, or false if it is missing"
  },
  "api/Mirage.SocketLayer.Sequencer.html": {
    "href": "api/Mirage.SocketLayer.Sequencer.html",
    "title": "Class Sequencer",
    "keywords": "Class Sequencer A sequence generator that can wrap. For example a 2 bit sequencer would generate the following numbers: 0,1,2,3,0,1,2,3,0,1,2,3... Inheritance Object Sequencer Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.SocketLayer Assembly : Mirage.SocketLayer.dll Syntax public class Sequencer Examples // create a 8 bit sequence generator Sequencer sequencer = new Sequencer(8); ulong zero = sequencer.Next(); ulong one = sequencer.Next(); ... ulong n = sequencer.Next(); // you can determine the distance between 2 sequences // as long as they are withing 1/2 of the sequence space // this is equivalent to a - b adjusted for wrapping int d = sequencer.Distance(a, b); Constructors | Improve this Doc View Source Sequencer(Int32) Declaration public Sequencer(int bits) Parameters Type Name Description Int32 bits amount of bits for the sequence Properties | Improve this Doc View Source Bits Number of bits used for the sequence generator up to 64 Declaration public int Bits { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Distance(UInt64, UInt64) Calculates the distance between 2 sequences, taking into account wrapping Declaration public long Distance(ulong from, ulong to) Parameters Type Name Description UInt64 from current sequence value UInt64 to previous sequence value Returns Type Description Int64 from - to, adjusted for wrapping | Improve this Doc View Source MoveInBounds(UInt64) returns a sequence value from the given value wraps if necessary Declaration public ulong MoveInBounds(ulong sequence) Parameters Type Name Description UInt64 sequence current sequence value Returns Type Description UInt64 the next sequence value | Improve this Doc View Source Next() Generates the next value in the sequence starts with 0 Declaration public ulong Next() Returns Type Description UInt64 0, 1, 2, ..., (2^n)-1, 0, 1, 2, ... | Improve this Doc View Source NextAfter(UInt64) Gets the next sequence value after a given sequence wraps if necessary Declaration public ulong NextAfter(ulong sequence) Parameters Type Name Description UInt64 sequence current sequence value Returns Type Description UInt64 the next sequence value"
  },
  "api/Mirage.SocketLayer.SocketFactory.html": {
    "href": "api/Mirage.SocketLayer.SocketFactory.html",
    "title": "Class SocketFactory",
    "keywords": "Class SocketFactory Creates an instance of ISocket Inheritance Object Object Component Behaviour MonoBehaviour SocketFactory UdpSocketFactory Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage.SocketLayer Assembly : Mirage.SocketLayer.dll Syntax public abstract class SocketFactory : MonoBehaviour Remarks SocketFactory as 2 jobs: To create an instance of ISocket that will be used by Peer to send/Receive data. Show config data to the user using the inspector, and give that data in the form of an EndPoint This is a MonoBehaviour so can be attached in the inspector Properties | Improve this Doc View Source MaxPacketSize Max size for packets sent to or received from Socket Called once when Sockets are created Declaration public abstract int MaxPacketSize { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source CreateClientSocket() Creates a ISocket to be used by Peer on the client Declaration public abstract ISocket CreateClientSocket() Returns Type Description ISocket Exceptions Type Condition NotSupportedException Throw when Client is not supported on current platform | Improve this Doc View Source CreateServerSocket() Creates a ISocket to be used by Peer on the server Declaration public abstract ISocket CreateServerSocket() Returns Type Description ISocket Exceptions Type Condition NotSupportedException Throw when Server is not supported on current platform | Improve this Doc View Source GetBindEndPoint() Creates the EndPoint that the Server Socket will bind to Declaration public abstract IEndPoint GetBindEndPoint() Returns Type Description IEndPoint Exceptions Type Condition NotSupportedException Throw when Client is not supported on current platform | Improve this Doc View Source GetConnectEndPoint(String, Nullable<UInt16>) Creates the EndPoint that the Client Socket will connect to using the parameter given Declaration public abstract IEndPoint GetConnectEndPoint(string address = null, ushort? port = default(ushort? )) Parameters Type Name Description String address Nullable < UInt16 > port Returns Type Description IEndPoint Exceptions Type Condition NotSupportedException Throw when Client is not supported on current platform"
  },
  "api/Mirage.Sockets.Udp.EndPointWrapper.html": {
    "href": "api/Mirage.Sockets.Udp.EndPointWrapper.html",
    "title": "Class EndPointWrapper",
    "keywords": "Class EndPointWrapper Inheritance Object EndPointWrapper Implements IEndPoint Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage.Sockets.Udp Assembly : Mirage.Sockets.Udp.dll Syntax public class EndPointWrapper : IEndPoint Constructors | Improve this Doc View Source EndPointWrapper(EndPoint) Declaration public EndPointWrapper(EndPoint endPoint) Parameters Type Name Description EndPoint endPoint Fields | Improve this Doc View Source inner Declaration public EndPoint inner Field Value Type Description EndPoint Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Explicit Interface Implementations | Improve this Doc View Source IEndPoint.CreateCopy() Declaration IEndPoint IEndPoint.CreateCopy() Returns Type Description IEndPoint Implements IEndPoint"
  },
  "api/Mirage.Sockets.Udp.html": {
    "href": "api/Mirage.Sockets.Udp.html",
    "title": "Namespace Mirage.Sockets.Udp",
    "keywords": "Namespace Mirage.Sockets.Udp Classes EndPointWrapper NanoEndPoint NanoSocket NanoSocketException UdpMTU UdpSocket UdpSocketFactory Enums SocketLib"
  },
  "api/Mirage.Sockets.Udp.NanoEndPoint.html": {
    "href": "api/Mirage.Sockets.Udp.NanoEndPoint.html",
    "title": "Class NanoEndPoint",
    "keywords": "Class NanoEndPoint Inheritance Object NanoEndPoint Implements IEndPoint IEquatable < NanoEndPoint > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage.Sockets.Udp Assembly : Mirage.Sockets.Udp.dll Syntax public sealed class NanoEndPoint : IEndPoint, IEquatable<NanoEndPoint> Constructors | Improve this Doc View Source NanoEndPoint(Address) Declaration public NanoEndPoint(Address address) Parameters Type Name Description Address address | Improve this Doc View Source NanoEndPoint(String, UInt16) Declaration public NanoEndPoint(string host, ushort port) Parameters Type Name Description String host UInt16 port Fields | Improve this Doc View Source address Declaration public Address address Field Value Type Description Address Methods | Improve this Doc View Source CreateCopy() Declaration public IEndPoint CreateCopy() Returns Type Description IEndPoint | Improve this Doc View Source Equals(NanoEndPoint) Declaration public bool Equals(NanoEndPoint other) Parameters Type Name Description NanoEndPoint other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Implements IEndPoint System.IEquatable<T>"
  },
  "api/Mirage.Sockets.Udp.NanoSocket.html": {
    "href": "api/Mirage.Sockets.Udp.NanoSocket.html",
    "title": "Class NanoSocket",
    "keywords": "Class NanoSocket Inheritance Object NanoSocket Implements ISocket IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Sockets.Udp Assembly : Mirage.Sockets.Udp.dll Syntax public sealed class NanoSocket : ISocket, IDisposable Constructors | Improve this Doc View Source NanoSocket(UdpSocketFactory) Declaration public NanoSocket(UdpSocketFactory factory) Parameters Type Name Description UdpSocketFactory factory Methods | Improve this Doc View Source Bind(IEndPoint) Declaration public void Bind(IEndPoint endPoint) Parameters Type Name Description IEndPoint endPoint | Improve this Doc View Source Close() Declaration public void Close() | Improve this Doc View Source Connect(IEndPoint) Declaration public void Connect(IEndPoint endPoint) Parameters Type Name Description IEndPoint endPoint | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source Poll() Declaration public bool Poll() Returns Type Description Boolean | Improve this Doc View Source Receive(Byte[], out IEndPoint) Declaration public int Receive(byte[] buffer, out IEndPoint endPoint) Parameters Type Name Description Byte [] buffer IEndPoint endPoint Returns Type Description Int32 | Improve this Doc View Source Send(IEndPoint, Byte[], Int32) Declaration public void Send(IEndPoint endPoint, byte[] packet, int length) Parameters Type Name Description IEndPoint endPoint Byte [] packet Int32 length Implements ISocket System.IDisposable"
  },
  "api/Mirage.Sockets.Udp.NanoSocketException.html": {
    "href": "api/Mirage.Sockets.Udp.NanoSocketException.html",
    "title": "Class NanoSocketException",
    "keywords": "Class NanoSocketException Inheritance Object Exception NanoSocketException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage.Sockets.Udp Assembly : Mirage.Sockets.Udp.dll Syntax public class NanoSocketException : Exception, ISerializable Constructors | Improve this Doc View Source NanoSocketException(String) Declaration public NanoSocketException(string message) Parameters Type Name Description String message Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Mirage.Sockets.Udp.SocketLib.html": {
    "href": "api/Mirage.Sockets.Udp.SocketLib.html",
    "title": "Enum SocketLib",
    "keywords": "Enum SocketLib Namespace : Mirage.Sockets.Udp Assembly : Mirage.Sockets.Udp.dll Syntax public enum SocketLib Fields Name Description Automatic Managed Native"
  },
  "api/Mirage.Sockets.Udp.UdpMTU.html": {
    "href": "api/Mirage.Sockets.Udp.UdpMTU.html",
    "title": "Class UdpMTU",
    "keywords": "Class UdpMTU Inheritance Object UdpMTU Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Sockets.Udp Assembly : Mirage.Sockets.Udp.dll Syntax public class UdpMTU Properties | Improve this Doc View Source MaxPacketSize Max size of array that will be sent to or can be received from ISocket This will also be the size of all buffers used by Peer This is not max message size because this size includes packets header added by Peer Declaration public static int MaxPacketSize { get; } Property Value Type Description Int32"
  },
  "api/Mirage.Sockets.Udp.UdpSocket.html": {
    "href": "api/Mirage.Sockets.Udp.UdpSocket.html",
    "title": "Class UdpSocket",
    "keywords": "Class UdpSocket Inheritance Object UdpSocket Implements ISocket Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage.Sockets.Udp Assembly : Mirage.Sockets.Udp.dll Syntax public class UdpSocket : ISocket Methods | Improve this Doc View Source Bind(IEndPoint) Declaration public void Bind(IEndPoint endPoint) Parameters Type Name Description IEndPoint endPoint | Improve this Doc View Source Close() Declaration public void Close() | Improve this Doc View Source Connect(IEndPoint) Declaration public void Connect(IEndPoint endPoint) Parameters Type Name Description IEndPoint endPoint | Improve this Doc View Source Poll() Is message avaliable Declaration public bool Poll() Returns Type Description Boolean true if data to read | Improve this Doc View Source Receive(Byte[], out IEndPoint) Declaration public int Receive(byte[] buffer, out IEndPoint endPoint) Parameters Type Name Description Byte [] buffer IEndPoint endPoint Returns Type Description Int32 | Improve this Doc View Source Send(IEndPoint, Byte[], Int32) Declaration public void Send(IEndPoint endPoint, byte[] packet, int length) Parameters Type Name Description IEndPoint endPoint Byte [] packet Int32 length Implements ISocket"
  },
  "api/Mirage.Sockets.Udp.UdpSocketFactory.html": {
    "href": "api/Mirage.Sockets.Udp.UdpSocketFactory.html",
    "title": "Class UdpSocketFactory",
    "keywords": "Class UdpSocketFactory Inheritance Object Object Component Behaviour MonoBehaviour SocketFactory UdpSocketFactory Implements IHasAddress IHasPort Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) Object.ToString() Object.name Object.hideFlags Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage.Sockets.Udp Assembly : Mirage.Sockets.Udp.dll Syntax public sealed class UdpSocketFactory : SocketFactory, IHasAddress, IHasPort Fields | Improve this Doc View Source Address Declaration public string Address Field Value Type Description String | Improve this Doc View Source BufferSize Declaration [Header(\"NanoSocket options\")] public int BufferSize Field Value Type Description Int32 | Improve this Doc View Source Port Declaration public ushort Port Field Value Type Description UInt16 | Improve this Doc View Source SocketLib Declaration [Tooltip(\"Allows you to set which Socket implementation you want to use.\\nAutomatic will use native (NanoSockets) on supported platforms (Windows, Mac & Linux).\")] public SocketLib SocketLib Field Value Type Description SocketLib Properties | Improve this Doc View Source MaxPacketSize Declaration public override int MaxPacketSize { get; } Property Value Type Description Int32 Overrides SocketFactory.MaxPacketSize Methods | Improve this Doc View Source CreateClientSocket() Declaration public override ISocket CreateClientSocket() Returns Type Description ISocket Overrides SocketFactory.CreateClientSocket() | Improve this Doc View Source CreateServerSocket() Declaration public override ISocket CreateServerSocket() Returns Type Description ISocket Overrides SocketFactory.CreateServerSocket() | Improve this Doc View Source GetBindEndPoint() Declaration public override IEndPoint GetBindEndPoint() Returns Type Description IEndPoint Overrides SocketFactory.GetBindEndPoint() | Improve this Doc View Source GetConnectEndPoint(String, Nullable<UInt16>) Declaration public override IEndPoint GetConnectEndPoint(string address = null, ushort? port = default(ushort? )) Parameters Type Name Description String address Nullable < UInt16 > port Returns Type Description IEndPoint Overrides SocketFactory.GetConnectEndPoint(String, Nullable<UInt16>) Explicit Interface Implementations | Improve this Doc View Source IHasAddress.Address Declaration string IHasAddress.Address { get; set; } Returns Type Description String | Improve this Doc View Source IHasPort.Port Declaration int IHasPort.Port { get; set; } Returns Type Description Int32 Implements IHasAddress IHasPort"
  },
  "api/Mirage.SpawnEvent.html": {
    "href": "api/Mirage.SpawnEvent.html",
    "title": "Class SpawnEvent",
    "keywords": "Class SpawnEvent Inheritance Object UnityEventBase UnityEvent < NetworkIdentity > SpawnEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkIdentity>.AddListener(UnityAction<NetworkIdentity>) UnityEvent<NetworkIdentity>.RemoveListener(UnityAction<NetworkIdentity>) UnityEngine.Events.UnityEvent<Mirage.NetworkIdentity>.FindMethod_Impl(System.String, System.Type) UnityEvent<NetworkIdentity>.Invoke(NetworkIdentity) UnityEventBase.ISerializationCallbackReceiver.OnBeforeSerialize() UnityEventBase.ISerializationCallbackReceiver.OnAfterDeserialize() UnityEventBase.FindMethod_Impl(String, Object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(Int32) UnityEventBase.GetPersistentMethodName(Int32) UnityEventBase.SetPersistentListenerState(Int32, UnityEventCallState) UnityEventBase.AddListener(Object, MethodInfo) UnityEventBase.RemoveListener(Object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(Object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(Object, String, Type[]) UnityEngine.Events.UnityEventBase.GetValidMethodInfo(System.Type, System.String, System.Type[]) UnityEventBase.ValidateRegistration(MethodInfo, Object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, Object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(Int32, Object, MethodInfo) UnityEngine.Events.UnityEventBase.RegisterPersistentListener(System.Int32, System.Object, System.Type, System.Reflection.MethodInfo) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax [Serializable] public class SpawnEvent : UnityEvent<NetworkIdentity>, ISerializationCallbackReceiver Implements ISerializationCallbackReceiver"
  },
  "api/Mirage.SpawnHandlerDelegate.html": {
    "href": "api/Mirage.SpawnHandlerDelegate.html",
    "title": "Delegate SpawnHandlerDelegate",
    "keywords": "Delegate SpawnHandlerDelegate Namespace : Mirage Assembly : Mirage.dll Syntax public delegate NetworkIdentity SpawnHandlerDelegate(SpawnMessage msg); Parameters Type Name Description SpawnMessage msg Returns Type Description NetworkIdentity"
  },
  "api/Mirage.SpawnMessage.html": {
    "href": "api/Mirage.SpawnMessage.html",
    "title": "Struct SpawnMessage",
    "keywords": "Struct SpawnMessage Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax public struct SpawnMessage Fields | Improve this Doc View Source isLocalPlayer Is the spawning object the local player. Sets ClientScene.localPlayer Declaration public bool isLocalPlayer Field Value Type Description Boolean | Improve this Doc View Source isOwner Sets hasAuthority on the spawned object Declaration public bool isOwner Field Value Type Description Boolean | Improve this Doc View Source netId netId of new or existing object Declaration public uint netId Field Value Type Description UInt32 | Improve this Doc View Source payload The serialized component data ArraySegment to avoid unnecessary allocations Declaration public ArraySegment<byte> payload Field Value Type Description ArraySegment < Byte > | Improve this Doc View Source position Local position Declaration public Vector3? position Field Value Type Description Nullable < Vector3 > | Improve this Doc View Source prefabHash The id of the prefab to spawn If sceneId != 0 then it is used instead of prefabHash Declaration public int? prefabHash Field Value Type Description Nullable < Int32 > | Improve this Doc View Source rotation Local rotation Declaration public Quaternion? rotation Field Value Type Description Nullable < Quaternion > | Improve this Doc View Source scale Local scale Declaration public Vector3? scale Field Value Type Description Nullable < Vector3 > | Improve this Doc View Source sceneId The id of the scene object to spawn Declaration public ulong? sceneId Field Value Type Description Nullable < UInt64 >"
  },
  "api/Mirage.StringHash.html": {
    "href": "api/Mirage.StringHash.html",
    "title": "Class StringHash",
    "keywords": "Class StringHash Inheritance Object StringHash Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage Assembly : Mirage.dll Syntax public static class StringHash Fields | Improve this Doc View Source EmptyString Declaration public const int EmptyString = 23 Field Value Type Description Int32 Methods | Improve this Doc View Source GetStableHashCode(String) Gets a hash for a string. This hash will be the same on all platforms Declaration public static int GetStableHashCode(this string text) Parameters Type Name Description String text Returns Type Description Int32 Remarks GetHashCode() is not guaranteed to be the same on all platforms"
  },
  "api/Mirage.SyncMode.html": {
    "href": "api/Mirage.SyncMode.html",
    "title": "Enum SyncMode",
    "keywords": "Enum SyncMode Sync to everyone, or only to owner. Namespace : Mirage Assembly : Mirage.dll Syntax public enum SyncMode Fields Name Description Observers Owner"
  },
  "api/Mirage.SyncVarAttribute.html": {
    "href": "api/Mirage.SyncVarAttribute.html",
    "title": "Class SyncVarAttribute",
    "keywords": "Class SyncVarAttribute SyncVars are used to synchronize a variable from the server to all clients automatically. Value must be changed on server, not directly by clients. Hook parameter allows you to define a client-side method to be invoked when the client gets an update from the server. Inheritance Object Attribute PropertyAttribute SyncVarAttribute Inherited Members PropertyAttribute.order Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage Assembly : Mirage.dll Syntax [AttributeUsage(AttributeTargets.Field)] public class SyncVarAttribute : PropertyAttribute Fields | Improve this Doc View Source hook A function that should be called on the client when the value changes. Declaration public string hook Field Value Type Description String | Improve this Doc View Source initialOnly If true, this syncvar will only be sent with spawn message, any other changes will not be sent to existing objects Declaration public bool initialOnly Field Value Type Description Boolean | Improve this Doc View Source invokeHookOnServer If true this syncvar hook will also fire on the server side. Declaration public bool invokeHookOnServer Field Value Type Description Boolean"
  },
  "api/Mirage.SyncVarReceiver.html": {
    "href": "api/Mirage.SyncVarReceiver.html",
    "title": "Class SyncVarReceiver",
    "keywords": "Class SyncVarReceiver Class that handles syncvar message and passes it to correct NetworkIdentity Inheritance Object SyncVarReceiver Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage Assembly : Mirage.dll Syntax public class SyncVarReceiver Constructors | Improve this Doc View Source SyncVarReceiver(NetworkClient, IObjectLocator) Declaration public SyncVarReceiver(NetworkClient client, IObjectLocator objectLocator) Parameters Type Name Description NetworkClient client IObjectLocator objectLocator"
  },
  "api/Mirage.SyncVarSender.html": {
    "href": "api/Mirage.SyncVarSender.html",
    "title": "Class SyncVarSender",
    "keywords": "Class SyncVarSender Class that Syncs syncvar and other NetworkIdentity State Inheritance Object SyncVarSender Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage Assembly : Mirage.dll Syntax public class SyncVarSender Methods | Improve this Doc View Source AddDirtyObject(NetworkIdentity) Declaration public void AddDirtyObject(NetworkIdentity dirty) Parameters Type Name Description NetworkIdentity dirty"
  },
  "api/Mirage.UnSpawnDelegate.html": {
    "href": "api/Mirage.UnSpawnDelegate.html",
    "title": "Delegate UnSpawnDelegate",
    "keywords": "Delegate UnSpawnDelegate Namespace : Mirage Assembly : Mirage.dll Syntax public delegate void UnSpawnDelegate(NetworkIdentity spawned); Parameters Type Name Description NetworkIdentity spawned"
  },
  "api/Mirage.UpdateVarsMessage.html": {
    "href": "api/Mirage.UpdateVarsMessage.html",
    "title": "Struct UpdateVarsMessage",
    "keywords": "Struct UpdateVarsMessage Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Mirage Assembly : Mirage.dll Syntax public struct UpdateVarsMessage Fields | Improve this Doc View Source netId Declaration public uint netId Field Value Type Description UInt32 | Improve this Doc View Source payload Declaration public ArraySegment<byte> payload Field Value Type Description ArraySegment < Byte >"
  },
  "api/Mirage.Version.html": {
    "href": "api/Mirage.Version.html",
    "title": "Class Version",
    "keywords": "Class Version Inheritance Object Version Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Mirage Assembly : Mirage.dll Syntax public static class Version Fields | Improve this Doc View Source Current Declaration public static readonly string Current Field Value Type Description String"
  },
  "api/NanoSockets.Address.html": {
    "href": "api/NanoSockets.Address.html",
    "title": "Struct Address",
    "keywords": "Struct Address Implements IEquatable < Address > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : NanoSockets Assembly : Mirage.Sockets.Udp.dll Syntax public struct Address : IEquatable<Address> Fields | Improve this Doc View Source port Declaration public ushort port Field Value Type Description UInt16 | Improve this Doc View Source Port Declaration public ushort Port Field Value Type Description UInt16 Methods | Improve this Doc View Source CreateFromIpPort(String, UInt16) Declaration public static Address CreateFromIpPort(string ip, ushort port) Parameters Type Name Description String ip UInt16 port Returns Type Description Address | Improve this Doc View Source Equals(Address) Declaration public bool Equals(Address other) Parameters Type Name Description Address other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() Implements System.IEquatable<T>"
  },
  "api/NanoSockets.html": {
    "href": "api/NanoSockets.html",
    "title": "Namespace NanoSockets",
    "keywords": "Namespace NanoSockets Classes UDP Structs Address Socket Enums Status"
  },
  "api/NanoSockets.Socket.html": {
    "href": "api/NanoSockets.Socket.html",
    "title": "Struct Socket",
    "keywords": "Struct Socket Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : NanoSockets Assembly : Mirage.Sockets.Udp.dll Syntax public struct Socket Properties | Improve this Doc View Source IsCreated Declaration public bool IsCreated { get; } Property Value Type Description Boolean"
  },
  "api/NanoSockets.Status.html": {
    "href": "api/NanoSockets.Status.html",
    "title": "Enum Status",
    "keywords": "Enum Status Namespace : NanoSockets Assembly : Mirage.Sockets.Udp.dll Syntax public enum Status Fields Name Description Error OK"
  },
  "api/NanoSockets.UDP.html": {
    "href": "api/NanoSockets.UDP.html",
    "title": "Class UDP",
    "keywords": "Class UDP Inheritance Object UDP Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : NanoSockets Assembly : Mirage.Sockets.Udp.dll Syntax public static class UDP Fields | Improve this Doc View Source hostNameSize Declaration public const int hostNameSize = 1025 Field Value Type Description Int32 Methods Bind(Socket, ref Address) Declaration public static int Bind(Socket socket, ref Address address) Parameters Type Name Description Socket socket Address address Returns Type Description Int32 Bind(Socket, IntPtr) Declaration public static int Bind(Socket socket, IntPtr address) Parameters Type Name Description Socket socket IntPtr address Returns Type Description Int32 Connect(Socket, ref Address) Declaration public static int Connect(Socket socket, ref Address address) Parameters Type Name Description Socket socket Address address Returns Type Description Int32 Create(Int32, Int32) Declaration public static Socket Create(int sendBufferSize, int receiveBufferSize) Parameters Type Name Description Int32 sendBufferSize Int32 receiveBufferSize Returns Type Description Socket Deinitialize() Declaration public static void Deinitialize() Destroy(ref Socket) Declaration public static void Destroy(ref Socket socket) Parameters Type Name Description Socket socket GetAddress(Socket, ref Address) Declaration public static Status GetAddress(Socket socket, ref Address address) Parameters Type Name Description Socket socket Address address Returns Type Description Status GetHostName(ref Address, IntPtr, Int32) Declaration public static Status GetHostName(ref Address address, IntPtr name, int nameLength) Parameters Type Name Description Address address IntPtr name Int32 nameLength Returns Type Description Status GetHostName(ref Address, StringBuilder, Int32) Declaration public static Status GetHostName(ref Address address, StringBuilder name, int nameLength) Parameters Type Name Description Address address StringBuilder name Int32 nameLength Returns Type Description Status GetIP(ref Address, IntPtr, Int32) Declaration public static Status GetIP(ref Address address, IntPtr ip, int ipLength) Parameters Type Name Description Address address IntPtr ip Int32 ipLength Returns Type Description Status GetIP(ref Address, StringBuilder, Int32) Declaration public static Status GetIP(ref Address address, StringBuilder ip, int ipLength) Parameters Type Name Description Address address StringBuilder ip Int32 ipLength Returns Type Description Status GetOption(Socket, Int32, Int32, ref Int32, ref Int32) Declaration public static Status GetOption(Socket socket, int level, int optionName, ref int optionValue, ref int optionLength) Parameters Type Name Description Socket socket Int32 level Int32 optionName Int32 optionValue Int32 optionLength Returns Type Description Status Initialize() Declaration public static Status Initialize() Returns Type Description Status IsEqual(ref Address, ref Address) Declaration public static Status IsEqual(ref Address left, ref Address right) Parameters Type Name Description Address left Address right Returns Type Description Status Poll(Socket, Int64) Declaration public static int Poll(Socket socket, long timeout) Parameters Type Name Description Socket socket Int64 timeout Returns Type Description Int32 Receive(Socket, ref Address, Byte[], Int32) Declaration public static int Receive(Socket socket, ref Address address, byte[] buffer, int bufferLength) Parameters Type Name Description Socket socket Address address Byte [] buffer Int32 bufferLength Returns Type Description Int32 Receive(Socket, ref Address, Byte[], Int32, Int32) Declaration public static int Receive(Socket socket, ref Address address, byte[] buffer, int offset, int bufferLength) Parameters Type Name Description Socket socket Address address Byte [] buffer Int32 offset Int32 bufferLength Returns Type Description Int32 Receive(Socket, ref Address, IntPtr, Int32) Declaration public static int Receive(Socket socket, ref Address address, IntPtr buffer, int bufferLength) Parameters Type Name Description Socket socket Address address IntPtr buffer Int32 bufferLength Returns Type Description Int32 Receive(Socket, IntPtr, Byte[], Int32) Declaration public static int Receive(Socket socket, IntPtr address, byte[] buffer, int bufferLength) Parameters Type Name Description Socket socket IntPtr address Byte [] buffer Int32 bufferLength Returns Type Description Int32 Receive(Socket, IntPtr, Byte[], Int32, Int32) Declaration public static int Receive(Socket socket, IntPtr address, byte[] buffer, int offset, int bufferLength) Parameters Type Name Description Socket socket IntPtr address Byte [] buffer Int32 offset Int32 bufferLength Returns Type Description Int32 Receive(Socket, IntPtr, IntPtr, Int32) Declaration public static int Receive(Socket socket, IntPtr address, IntPtr buffer, int bufferLength) Parameters Type Name Description Socket socket IntPtr address IntPtr buffer Int32 bufferLength Returns Type Description Int32 Send(Socket, ref Address, Byte[], Int32) Declaration public static int Send(Socket socket, ref Address address, byte[] buffer, int bufferLength) Parameters Type Name Description Socket socket Address address Byte [] buffer Int32 bufferLength Returns Type Description Int32 Send(Socket, ref Address, Byte[], Int32, Int32) Declaration public static int Send(Socket socket, ref Address address, byte[] buffer, int offset, int bufferLength) Parameters Type Name Description Socket socket Address address Byte [] buffer Int32 offset Int32 bufferLength Returns Type Description Int32 Send(Socket, ref Address, IntPtr, Int32) Declaration public static int Send(Socket socket, ref Address address, IntPtr buffer, int bufferLength) Parameters Type Name Description Socket socket Address address IntPtr buffer Int32 bufferLength Returns Type Description Int32 Send(Socket, IntPtr, Byte[], Int32) Declaration public static int Send(Socket socket, IntPtr address, byte[] buffer, int bufferLength) Parameters Type Name Description Socket socket IntPtr address Byte [] buffer Int32 bufferLength Returns Type Description Int32 Send(Socket, IntPtr, Byte[], Int32, Int32) Declaration public static int Send(Socket socket, IntPtr address, byte[] buffer, int offset, int bufferLength) Parameters Type Name Description Socket socket IntPtr address Byte [] buffer Int32 offset Int32 bufferLength Returns Type Description Int32 Send(Socket, IntPtr, IntPtr, Int32) Declaration public static int Send(Socket socket, IntPtr address, IntPtr buffer, int bufferLength) Parameters Type Name Description Socket socket IntPtr address IntPtr buffer Int32 bufferLength Returns Type Description Int32 SetDontFragment(Socket) Declaration public static Status SetDontFragment(Socket socket) Parameters Type Name Description Socket socket Returns Type Description Status SetHostName(ref Address, IntPtr) Declaration public static Status SetHostName(ref Address address, IntPtr name) Parameters Type Name Description Address address IntPtr name Returns Type Description Status SetHostName(ref Address, String) Declaration public static Status SetHostName(ref Address address, string name) Parameters Type Name Description Address address String name Returns Type Description Status SetIP(ref Address, IntPtr) Declaration public static Status SetIP(ref Address address, IntPtr ip) Parameters Type Name Description Address address IntPtr ip Returns Type Description Status SetIP(ref Address, String) Declaration public static Status SetIP(ref Address address, string ip) Parameters Type Name Description Address address String ip Returns Type Description Status | Improve this Doc View Source SetNonBlocking(Socket, Boolean) Declaration public static Status SetNonBlocking(Socket socket, bool shouldBlock = false) Parameters Type Name Description Socket socket Boolean shouldBlock Returns Type Description Status SetOption(Socket, Int32, Int32, ref Int32, Int32) Declaration public static Status SetOption(Socket socket, int level, int optionName, ref int optionValue, int optionLength) Parameters Type Name Description Socket socket Int32 level Int32 optionName Int32 optionValue Int32 optionLength Returns Type Description Status"
  },
  "Articles/Components/Authenticators/Basic.html": {
    "href": "Articles/Components/Authenticators/Basic.html",
    "title": "Basic Authenticator",
    "keywords": "Basic Authenticator Mirage includes a Basic Authenticator in the Mirage / Authenticators folder which just uses a simple username and password. Drag the Basic Authenticator script to the inspector of the object in your scene that has Network Manager The Basic Authenticator component will automatically be assigned to the Authenticator field in Network Manager When you're done, it should look like this: Note: You don't need to assign anything to the event lists unless you want to subscribe to the events in your own code for your own purposes. Mirage has internal listeners for both events."
  },
  "Articles/Components/Authenticators/index.html": {
    "href": "Articles/Components/Authenticators/index.html",
    "title": "Authentication",
    "keywords": "Authentication For some games you may want to limit who can join or uniquely identity a user in order to save stats or communicate with friends. Authentication is checking if a user is valid and is who they say they are. There are several methods available, some examples include: Ask the user for username and password Use a third party OAuth2 or OpenID identity provider, such as Facebook, Twitter, Google Use a third party service such as PlayFab, GameLift or Steam Use the device id, very popular method in mobile Use Google Play in Android Use Game Center in IOS Use a web service in your website Encryption Notice By default Mirage is not encrypted, so if you want to do authentication through Mirage, we highly recommend you use a transport that supports encryption. Basic Authenticator Basic Authenticator Mirage includes a Basic Authenticator in the Mirage/Authenticators folder which just uses a simple password. This will only allow people with the password to join the server. For example, a password on a hosted game so that only friends can join. Custom Authenticators To Create a custom authenticator implement the NetworkAuthenticator abstract class and override the ServerAuthenticated and ClientAuthenticated methods. After authenticating a player call either ServerAccept , ServerReject , ClientAccept or ClientReject depending if running on Server or Client and if you it was successful or not. Calling the Accept method will cause mirage to invoke the OnServerAuthenticated or OnClientAuthenticated events. Subscribe to OnServerAuthenticated and OnClientAuthenticated events if you wish to perform additional steps after authentication. Calling the Reject method will cause the player to be disconnected after a short delay. When Rejecting, It is a good idea to send a message to the client to tell them that authentication failed, for example: \"Server password invalid\" or \"Login failed\". Check if a player is authenticated After a player has been accepted IsAuthenticated will be set to true. The bool can be used alongside AuthenticationData to check if a user is allowed to do certain actions. Storing Authentication data The NetworkPlayer object has an AuthenticationData property that can be used to store any data related to authentication, such as account id, tokens, or players username. This property is of type object so can be set to any object and can be cast back to that object when you need to read the data. if (player.IsAuthenticated) { var loginData = (MyLogInData)player.AuthenticationData; var username = loginData.Username; // do something with username :) } Now that you have the foundation of a custom Authenticator component, the rest is up to you. You can exchange any number of custom messages between the server and client as necessary to complete your authentication process before approving the client. Authentication can also be extended to character selection and customization, just by crafting additional messages and exchanging them with the client before completing the authentication process. This means this process takes place before the client player actually enters the game or changes to the Online scene. If you write a good authenticator, consider sharing it with other users or contributing it to the Mirage project."
  },
  "Articles/Components/index.html": {
    "href": "Articles/Components/index.html",
    "title": "Components Overview",
    "keywords": "Components Overview These core components are included in Mirage: Network Animator The Network Animator component allows you to synchronize animation states for networked objects. It synchronizes state and parameters from an Animator Controller. Network Authenticator Network Authenticators facilitate integration of user accounts and credentials into your application. Network Discovery Network Discovery uses a UDP broadcast on the LAN enabling clients to find the running server and connect to it. Network Identity The Network Identity component is at the heart of the Mirage networking high-level API. It controls a game object’s unique identity on the network, and it uses that identity to make the networking system aware of the game object. It offers two different options for configuration and they are mutually exclusive, which means either one of the options or none can be checked. Network LogSettings Adds logging levels per class for Mirror components Network Manager The Network Manager is a component for managing the networking aspects of a multiplayer game. Network Manager HUD The Network Manager HUD is a quick-start tool to help you start building your multiplayer game straight away, without first having to build a user interface for game creation/connection/joining. It allows you to jump straight into your gameplay programming, and means you can build your own version of these controls later in your development schedule. Network Match Checker The Network Match Checker component controls visibility of networked objects based on match id. Network Ping Display Network Ping Display shows the Ping time for clients using OnGUI Network Proximity Checker The Network Proximity Checker component controls the visibility of game objects for network clients, based on proximity to players. Network Rigidbody The Network Rigidbody synchronizes velocity and other properties of a rigidbody across the network. Network Room Manager The Network Room Manager is an extension component of Network Manager that provides a basic functional room. Network Room Player The Network Room Player is a component that's required on Player prefabs used in the Room Scene with the Network Room Manager above. Network Scene Checker The Network Scene Checker component controls visibility of networked objects between scenes. Network Start Position Network Start Position is used by the Network Manager when creating character objects. The position and rotation of the Network Start Position are used to place the newly created character object. Network Transform The Network Transform component synchronizes the movement and rotation of game objects across the network. Note that the network Transform component only synchronizes spawned networked game objects. Network Transform Child The Network Transform Child component synchronizes the position and rotation of the child game object of a game object with a Network Transform component."
  },
  "Articles/Components/NetworkAnimator.html": {
    "href": "Articles/Components/NetworkAnimator.html",
    "title": "Network Animator",
    "keywords": "Network Animator The Network Animator component allows you to synchronize animation states for networked objects. It synchronizes state and parameters from an Animator Controller. Note that if you create a Network Animator component on an empty game object, Mirage also creates a Network Identity component and an Animator component on that game object. Client Authority Enable this to have changes to animation parameters sent from client to server. Animator Use this field to define the Animator component you want the Network Animator to synchronize with. Normally, changes are sent to all observers of the object this component is on. Setting Sync Mode to Owner Only makes the changes private between the server and the client owner of the object. You can use the Sync Interval to specify how often it syncs (in seconds). Details The Network Animator ensures the synchronization of game object animation across the network, meaning that all players see the animation happen at the same. There are two kinds of authority for networked animation (see documentation on network authority ): NOTE: Animator Triggers are not synced directly. Call NetworkAnimator.SetTrigger instead. A game object with authority can use the SetTrigger function to fire an animation trigger on other clients. If the game object has authority on the client, you should animate it locally on the client that owns the game object. That client sends the animation state information to the server, which broadcasts it to all the other clients. For example, this may be suitable for player characters with client authority. If the game object has authority on the server, then you should animate it on the server. The server then sends state information to all clients. This is common for animated game objects that are not related to a specific client, such as scene objects and non-player characters, or server-authoritative clients."
  },
  "Articles/Components/NetworkDiscovery.html": {
    "href": "Articles/Components/NetworkDiscovery.html",
    "title": "Network Discovery",
    "keywords": "Network Discovery Suppose your are next to a friend. He starts a game in host mode and you want to join him. How will your phone locate his? Finding out his IP address is not exactly intuitive or something kids can do. To solve this problem you can use Network Discovery. When your game starts, it sends a message in your current network asking \"Is there any server available?\". Any server within the same network will reply and provide information about how to connect to it. Mirage comes with a simple implementation of Network Discovery you can simply use in your game. It also provides a way for you to extend it so that you can pass additional data during the discovery phase. NetworkDiscovery and NetworkDiscoveryHUD components are included. Network Discovery uses a UDP broadcast on the LAN enabling clients to find the running server and connect to it. When a server is started, it listens on the UDP Broadcast Listen Port for requests from clients and returns a connection URI that clients apply to their transport. You can adjust how often the clients send their requests out to find a server in seconds with the Active Discovery Interval. The Server Found event must be assigned to a handler method, e.g. the OnDiscoveredServer method of NetworkDiscoveryHUD. In the NetworkDiscoveryHUD, the NetworkDiscovery component should be assigned automatically. Quick Start To use Network Discovery follow these steps: Create a gameobject with a NetworkManager if you have not done so already Do not add a NetworkManagerHUD. Discovery has a different UI component. Add a NetworkDiscoveryHUD component to the NetworkManager gameobject. A NetworkDiscovery component will be automatically added and wired up to your HUD. Add a player to the NetworkManager if you have not done so. Build and run a standalone version Click on Start Host Start play mode in the editor and click on Find Servers The editor should find the standalone version and display a button Click on the button to connect to it. The NetworkDiscoveryHUD is provided as a simple and quick way to get started, but you will probably want to replace it with your own user interface. Custom Network Discovery You can completely replace the user interface by adding your own interface (typically Unity UI based) instead of the default NetworkDiscoveryHUD. You do still need the NetworkDiscovery component to do the heavy lifting. Sometimes you want to provide more information in the discovery messages. Some use cases could include: The client can show if the server is in PvP or PvE mode The client can show how full the servers are. The client can show the ping to each server so the player can chose the fastest server The client can show the language The client can show if the server is password protected The message classes define what is sent between the client and server. As long as you keep your messages simple using the data types that Mirage can serialize, you won't need to write custom serializers for them. public class DiscoveryRequest { public string language=\"en\"; // Add properties for whatever information you want sent by clients // in their broadcast messages that servers will consume. } public class DiscoveryResponse { enum GameMode {PvP, PvE}; // you probably want uri so clients know how to connect to the server public Uri uri; public GameMode GameMode; public int TotalPlayers; public int HostPlayerName; // Add properties for whatever information you want the server to return to // clients for them to display or consume for establishing a connection. } The custom NetworkDiscovery class contains the overrides for handling the messages above. You may want to refer to the NetworkDiscovery.cs script in the Components/Discovery folder to see how these should be implemented. public class NewNetworkDiscovery: NetworkDiscoveryBase<DiscoveryRequest, DiscoveryResponse> { #region Server protected override void ProcessClientRequest(DiscoveryRequest request, IPEndPoint endpoint) { base.ProcessClientRequest(request, endpoint); } protected override DiscoveryResponse ProcessRequest(DiscoveryRequest request, IPEndPoint endpoint) { // TODO: Create your response and return it return new DiscoveryResponse(); } #endregion #region Client protected override DiscoveryRequest GetRequest() { return new DiscoveryRequest(); } protected override void ProcessResponse(DiscoveryResponse response, IPEndPoint endpoint) { // TODO: a server replied, do something with the response such as invoking a unityevent } #endregion }"
  },
  "Articles/Components/NetworkIdentity.html": {
    "href": "Articles/Components/NetworkIdentity.html",
    "title": "Network Identity",
    "keywords": "Network Identity See also NetworkIdentity in the API Reference. The Network Identity component is at the heart of the Unity networking high-level API. It controls a game object’s unique identity on the network, and it uses that identity to make the networking system aware of the game object. It offers two different options for configuration and they are mutually exclusive, which means either one of the options or none can be checked. Server Only Tick this checkbox to ensure that Unity only spawns the game object on the server, and not on clients. Instantiated Network Game Objects With the Mirage’s server-authoritative networking system, the server must spawn networked game objects with network identities, using NetworkServer.Spawn . This automatically creates them on clients that are connected to the server, and assigns them a netId . You must put a Network Identity component on any Prefabs that spawn at runtime for the network system to use them. See Object Spawning for more information. Scene-based Network Game Objects You can also network game objects that are saved as part of your Scene (for example, environmental props). Networking game objects makes them behave slightly differently, because you need to have them spawn across the network. When building your game, Unity disables all Scene-based game objects with Network Identity components. When a client connects to the server, the server sends spawn messages to tell the client which Scene game objects to enable and what their most up-to-date state information is. This ensures the client’s game does not contain game objects at incorrect locations when they start playing, or that Unity does not spawn and immediately destroy game objects on connection (for example, if an event removed the game object before that client connected). See Networked Scene Game Objects for more information. Preview Pane Information This component contains network tracking information, and displays that information in the preview pane. For example, the scene ID, network ID and asset ID the object has been assigned. This allows you to inspect the information which can be useful for investigation and debugging. At runtime there is more information to display here (a disabled NetworkBehaviour is displayed non-bold):"
  },
  "Articles/Components/NetworkLerpRigidbody.html": {
    "href": "Articles/Components/NetworkLerpRigidbody.html",
    "title": "Network Lerp Rigidbody",
    "keywords": "Network Lerp Rigidbody The Network Lerp Rigidbody classed as \"Experimental\" for now so please share any problems or bugs you find with it and use at your own risk if production builds. The Network Lerp Rigidbody component synchronizes position and velocity of a rigidbody across the network. This component is useful when you have a non-kinematic rigidbody that have constant forces applied to them, like gravity, but also want to apply forces or change velocity to that rigidbody or server or client with authority. For example, objects that move and jump using rigidbody using gravity. A game object with a Network Rigidbody component must also have a Network Identity component. When you add a Network Rigidbody component to a game object, Mirage also adds a Network Identity component on that game object if it does not already have one. When using the Network Lerp Rigidbody you should have NetworkTransform on the same object as the Network Lerp Rigidbody will handle syncing the position By default, Network Lerp Rigidbody is server-authoritative unless you check the box for Client Authority . Client Authority applies to character objects as well as non-character objects that have been specifically assigned to a client, but only for this component. With this enabled, value changes are send from the client to the server. Normally, changes are sent to all observers of the object this component is on. Setting Sync Mode to Owner Only makes the changes private between the server and the client owner of the object. You can use the Sync Interval to specify how often it syncs (in seconds). This applies both to Client Authority and Server Authority."
  },
  "Articles/Components/NetworkLogSettings.html": {
    "href": "Articles/Components/NetworkLogSettings.html",
    "title": "Network Log Settings",
    "keywords": "Network Log Settings See also LogFactory in the API Reference. Network Log Settings component The Network Log Settings component allows you to configure logging levels and load the settings in a build. When you first add NetworkLogSettings you will have to Create a new LogSettings asset that will store the settings. Note: If a LogSettings asset already exists the NetworkLogSettings component will set the Settings field when it is added to a game object. Log Settings When you first set up LogSettings the list of components may be empty or incomplete. Running the game will cause Mirage scripts to add their respective loggers to the list so their logging levels can be changed. Log settings can also be changed using the \"Mirage Log Level\" window, which can be opened from the editor menu: Window > Analysis > Mirage Log Levels. To change settings at runtime please see LogFactory . Issues Mirrors Logging api is currently work in progress. If there is a bug or a feature you want added please make an issue here ."
  },
  "Articles/Components/NetworkManager.html": {
    "href": "Articles/Components/NetworkManager.html",
    "title": "Network Manager",
    "keywords": "Network Manager NetworkManager is a helper class with instance references to the other major parts of the Mirage network. It provides quick access to: NetworkServer NetworkClient NetworkSceneManager ServerObjectManager ClientObjectManager"
  },
  "Articles/Components/NetworkManagerHUD.html": {
    "href": "Articles/Components/NetworkManagerHUD.html",
    "title": "Network Manager HUD",
    "keywords": "Network Manager HUD The Network Manager HUD (“heads-up display”) is a quick-start tool to help you start building your multiplayer game straight away, without first having to build a user interface for game creation/connection/joining. It allows you to jump straight into your game play programming, and means you can build your own version of these controls later in your development schedule. It is not, however, intended to be included in finished games. The idea is that these controls are useful to get you started, but you should create your own UI later on, to allow your players to find and join games in a way that suits your game. For example, you might want to stylize the design of the screens, buttons and list of available games to match the overall style of your game. To start using the Network Manager HUD, TODO: This is now a canvas based prefab but currently only in the examples. The Network Manager HUD provides the basic functions so that people playing your game can start hosting a networked game, or find and join an existing networked game. Unity displays the Network Manager HUD as a collection of simple UI buttons in the Game view. Using the HUD The Network Manager HUD allows you to start in Host, Server or Client only modes and input of a network address. Host (Server + Client) Click the Host (Server + Client) button to start a game as a host on the local network. This client is both the host and one of the players in the game. It uses the information from the Network Info section in the inspector to host the game. When you have started a game as a host, other players of the game can then connect to the host to join the game. Click the Stop button to disconnect from the host. Clicking Stop also returns to the main HUD menu. Client To connect to a host or standalone server on the internet use the text field to specify the address of the host. The default host address is “localhost”, which means the client looks on its own computer for the game host. In addition to localhost , you can specify an IPv4 address, and IPv6 address, or a fully-qualified domain name (FQDN), e.g. game.example.com , and the transport with resolve the name using DNS. Click Client to attempt to connect to the host address you have specified. Use the default “localhost” in this field if you are running multiple instances of your game on one computer, to test multiplayer interactivity. To do this, you can create a standalone build of your game, and then launch it multiple times on your computer. This is a common way to quickly test that your networked game interactions are functioning as you expect, without you needing to deploy your game to multiple computers or devices. When you want to test your game on multiple machines you need to put the address of the computer acting as host into the address text field. The computer acting as the host needs to tell their IP address to everyone running clients, so that you can type this into the box. For local clients on a LAN, that's the local IP address. For remote clients, that's the WAN IP address of the router of the host. Firewall rules and port-forwarding are generally required for a computer to act as host and accept connections from other computers, whether they're on the LAN or the internet. Enter the IP address (or leave it as “localhost” if you are testing it on your own machine), then click Client to attempt to connect to the host. When the client is attempting to connect, the HUD displays a Cancel Connection Attempt button. Click this if you want to stop trying to connect to the host. If the connection is successful, the HUD displays the Stop button. Click this if you want to stop the game on the client and disconnect from the host: Server Only Click Server Only to start a game which acts as a server that other clients can connect to, but which does not act as a client to the game itself. This type of game is often called a “dedicated server”. A user cannot play the game on this particular instance of your game. All players must connect as clients, and nobody plays on the instance that is running as the server. A dedicated server results in better performance for all connected players, because the server doesn’t need to process a local player’s game play in addition to acting as server. You might also choose this option if you want to host a game that can be played over the internet (rather than just within a local network), but want to maintain control of the server yourself - for example, to prevent cheating by one of the clients, because only the server has authority over the game. To do this, you would need to run the game in Server Only mode on a computer with a public IP address."
  },
  "Articles/Components/NetworkMatchChecker.html": {
    "href": "Articles/Components/NetworkMatchChecker.html",
    "title": "Network Match Checker",
    "keywords": "Network Match Checker The Network Match Checker component controls visibility of networked objects based on match id. Any object with this component on it will only be visible to other objects in the same match. This would be used to isolate players to their respective matches within a single game server instance. When you create a match, generate and store, in a List for example, a new match id with System.Guid.NewGuid(); and assign the same match id to the Network Match Checker via GetComponent<NetworkMatchChecker>().matchId . Mirage's built-in Observers system will isolate SyncVar's and ClientRpc's on networked objects to only send updates to clients with the same match id."
  },
  "Articles/Components/NetworkPingDisplay.html": {
    "href": "Articles/Components/NetworkPingDisplay.html",
    "title": "Network Ping Display",
    "keywords": "Network Ping Display Network Ping Display shows the Ping time for clients using OnGUI. The Ping time is the moving average of the (RTT) Round-trip delay time. RTT is calculated by the PingMessage/PongMessage between the client and server. See Clock Synchronization for more info."
  },
  "Articles/Components/NetworkProximityChecker.html": {
    "href": "Articles/Components/NetworkProximityChecker.html",
    "title": "Network Proximity Checker",
    "keywords": "Network Proximity Checker The Network Proximity Checker component controls the visibility of game objects for network clients, based on proximity to players. Vis Range Define the range that the game object should be visible to observers. Vis Update Interval Define how often (in seconds) the game object should check for observers entering its visible range. Check Method Define which type of physics (2D or 3D) to use for proximity checking. Force Hidden Tick this checkbox to hide this object from all players. With the Network Proximity Checker, a game running on a client doesn’t have information about game objects that are not visible. This has two main benefits: it reduces the amount of data sent across the network, and it makes your game more secure against hacking. This component relies on physics to calculate visibility, so observer game objects must also have a collider component on it. A game object with a Network Proximity Checker component must also have a Network Identity component. When you create a Network Proximity Checker component on a game object, Mirage also creates a Network Identity component on that game object if it does not already have one. Scene objects with a Network Proximity Checker component are disabled when they're out of range, and spawned objects are destroyed when they're out of range."
  },
  "Articles/Components/NetworkRigidbody.html": {
    "href": "Articles/Components/NetworkRigidbody.html",
    "title": "Network Rigidbody",
    "keywords": "Network Rigidbody The Network Rigidbody classed as \"Experimental\" for now so please share any problems or bugs you find with it and use at your own risk if production builds. The Network Rigidbody component synchronizes velocity and other properties of a rigidbody across the network. This component is useful when you have a non-kinematic rigidbody that have constant forces applied to them, like gravity, but also want to apply forces or change velocity to that rigidbody or server or client with authority. For example, objects that move and jump using rigidbody using gravity. A game object with a Network Rigidbody component must also have a Network Identity component. When you add a Network Rigidbody component to a game object, Mirage also adds a Network Identity component on that game object if it does not already have one. Network Rigidbody works best when there is also a NetworkTransform for the object to keep position as well as velocity in sync. By default, Network Rigidbody is server-authoritative unless you check the box for Client Authority . Client Authority applies to character objects as well as non-character objects that have been specifically assigned to a client, but only for this component. With this enabled, value changes are send from the client to the server. The Sensitivity options allow you to set a minimum thresholds before values are send over network. This helps minimize network traffic for very small changes. For some object you may not want them to rotate but don't need to sync the Angular Velocity. The Clear Angular Velocity will set the Angular Velocity to zero each frame causing the minimizing when objects rotation. If Sync Angular Velocity is enabled then clear is ignored. The same can apply to Clear Velocity . Normally, changes are sent to all observers of the object this component is on. Setting Sync Mode to Owner Only makes the changes private between the server and the client owner of the object. You can use the Sync Interval to specify how often it syncs (in seconds). This applies both to Client Authority and Server Authority."
  },
  "Articles/Components/NetworkRoomManager.html": {
    "href": "Articles/Components/NetworkRoomManager.html",
    "title": "Network Room Manager",
    "keywords": "Network Room Manager **Please see the Room example in the Examples folder in your Mirage folder The Network Room Manager is a specialized type of Network Manager that provides a multiplayer room before entering the main play scene of the game. It allows you to set up a network with: A maximum player limit Automatic start when all players are ready Option to prevent players from joining a game in progress Customizable ways for players to choose options while in room There are two types of character objects with the Network Room Manager: Room Player Prefab One for each player Created when client connects, or player is added Persists until client disconnects Holds ready flag and configuration data Handles commands in the room Must use the Network Room Player component Player Prefab One for each player Created when game scene is started Destroyed when leaving game scene Handles commands in the game Properties Show Room GUI Show the default OnGUI controls for the room. Min Players Minimum number of players needed to start a game. Room Player Prefab The prefab to create for players when they enter the room (requires Network Room Player component). Room Scene The scene to use for the room. Gameplay Scene The scene to use for main game play. pendingPlayers List<PendingPlayer> that holds players that are ready to start playing. roomSlots List<NetworkRoomPlayer> that manages the slots for connected clients in the room. allPlayersReady Bool indicating if all players are ready to start playing. This value changes as players invoke CmdChangeReadyState indicating true or false, and will be set false when a new client connects. Methods Server Virtual Methods public virtual void OnRoomStartHost() {} public virtual void OnRoomStopHost() {} public virtual void OnRoomStartServer() {} public virtual void OnRoomServerConnect(NetworkConnection conn) {} public virtual void OnRoomServerDisconnect(NetworkConnection conn) {} public virtual void OnRoomServerSceneChanged(string sceneName) {} public virtual GameObject OnRoomServerCreateRoomPlayer(NetworkConnection conn) { return null; } public virtual GameObject OnRoomServerCreateGamePlayer(NetworkConnection conn) { return null; } public virtual bool OnRoomServerSceneLoadedForPlayer(GameObject roomPlayer, GameObject gamePlayer) { return true; } public virtual void OnRoomServerPlayersReady() { ServerChangeScene(GameplayScene); } Client Virtual Methods public virtual void OnRoomClientEnter() {} public virtual void OnRoomClientExit() {} public virtual void OnRoomClientConnect(NetworkConnection conn) {} public virtual void OnRoomClientDisconnect(NetworkConnection conn) {} public virtual void OnRoomStartClient() {} public virtual void OnRoomStopClient() {} public virtual void OnRoomClientSceneChanged(NetworkConnection conn) {} public virtual void OnRoomClientAddPlayerFailed() {}"
  },
  "Articles/Components/NetworkRoomPlayer.html": {
    "href": "Articles/Components/NetworkRoomPlayer.html",
    "title": "Network Room Player",
    "keywords": "Network Room Player The Network Room Player stores per-player state for the Network Room Manager while in the room. When using this component, you need to write a script which allows players to indicate they are ready to begin playing, which sets the ReadyToBegin property. A game object with a Network Room Player component must also have a Network Identity component. When you create a Network Room Player component on a game object, Unity also creates a Network Identity component on that game object if it does not already have one. Show Room GUI Enable this to show the developer GUI for players in the room. This UI is only intended to be used for ease of development. This is enabled by default. Ready To Begin Diagnostic indicator that a player is Ready. Index Diagnostic index of the player, e.g. Player 1, Player 2, etc. Network Sync Interval The rate at which information is sent from the Network Room Player to the server. Methods Client Virtual Methods public virtual void OnClientEnterRoom() {} public virtual void OnClientExitRoom() {} public virtual void OnClientReady(bool readyState) {}"
  },
  "Articles/Components/NetworkSceneChecker.html": {
    "href": "Articles/Components/NetworkSceneChecker.html",
    "title": "Network Scene Checker",
    "keywords": "Network Scene Checker The Network Scene Checker component controls the visibility of game objects for network clients, based on which scene they're in. Force Hidden Tick this checkbox to hide this object from all players. With the Network Scene Checker, a game running on a client doesn’t have information about game objects that are not visible. This has two main benefits: it reduces the amount of data sent across the network, and it makes your game more secure against hacking. This component would typically be used when the server has several subscenes loaded and needs to isolate networked objects to the subscene they're in. A game object with a Network Scene Checker component must also have a Network Identity component. When you create a Network Scene Checker component on a game object, Mirage also creates a Network Identity component on that game object if it does not already have one. Scene objects with a Network Scene Checker component are disabled when they're not in the same scene, and spawned objects are destroyed when they're not in the same scene. Use with Additive Scenes In Mirage, the Server and connected Clients are always on the same main scene, however the server and clients can have various combinations of smaller subscenes loaded additively. The server may load all subscenes at start, or it may dynamically load and unload subscenes where players or other activity is going on as needed. All character objects are always first spawned in the main scene, which may or may not have visual content, networked objects, etc. With this component attached to all networked objects, whenever the character object is moved to a subscene (from the main or from another subscene), the observers lists for objects in both the new scene and the prior scene are updated accordingly. Loading the subscene(s) on the server is through the normal process with SceneManager : SceneManager.LoadSceneAsync(subScene, LoadSceneMode.Additive); Next, you will send a SceneMessage to the client telling it to load a subscene additively: SceneMessage msg = new SceneMessage { sceneName = subScene, sceneOperation = SceneOperation.LoadAdditive }; Owner.Send(msg); Then, on the server only, you just move the character object to the subscene: // Position the character object in world space first // This assumes it has a NetworkTransform component that will update clients player.transform.position = new Vector3(100, 1, 100); // Then move the character object to the subscene SceneManager.MoveGameObjectToScene(player, subScene); Optionally you can send another SceneMessage to the client with SceneOperation.UnloadAdditive to remove any previous additive scene the client no longer needs. This would apply to a game that has levels after a level change. A short delay may be necessary before removal to allow the client to get fully synced. Depending on the complexity of your game, you may find it helpful when switching a player between subscenes to move the character object to the main scene first, yield 100 ms, re-position it, and finally move it to the new subscene."
  },
  "Articles/Components/NetworkSceneManager.html": {
    "href": "Articles/Components/NetworkSceneManager.html",
    "title": "Network Scene Manager",
    "keywords": "Network Scene Manager The Network Scene Manager component controls the Unity Scenes running over the network. Client Change Scene Event that fires before the client changes scenes. Client Changed Scene Event that fires after the client changes scenes. Server Change Scene Event that fires before the server changes scenes. Server Changed Scene Event that fires after the server changes scenes. The Network Scene Maanger allows the user to change network scenes during runtime. There are three types of scene changes broadly supported by Mirage: Normal, Additive Load, and Additive Unload. Normal: In a Normal scene change all currently loaded assets are unspawned and unloaded. The new scene is loaded and set active. Then all of the scene or instance netwrok objects can be spawned. Under this operation the client waits for the server to finish before spawning starts to prevent any race conditions. Additive Load: The specified scene will be loaded on the Server and Client in addition to the currently active network scene. Additive Unload: Unload a previously loaded additive scene from the Server and Client. How does it work When the NetworkServer starts it assumes the initial scene is the one you plan on running the network on. If this is not correct you can either change scenes before starting the network or after. The order on the server will likely only matter to you if you are running in Host mode. Once a NetworkClient connects and passes authentication the NetworkServer will send a message notifying them of the current active scene and any additive scenes they should load. Once that task is complete then the server will start spawning network objects on the NetworkClient. How do I change scenes If the scene change involves network objects then it is strongly reccomended to make any scene changes via the NetworkSceneManager. Doing so via Unity's SceneManager directly may function but give undesired results with network objects. To do a network scene change you initiate the process via the server NetworkSceneManager via: sceneManager.ChangeServerScene(\"Assets/Mirror/Tests/Runtime/testScene.unity\"); Note: You dont have to provide the full scene path when initiating a scene change. But the 'NetworkSceneName' will be saved as the full path."
  },
  "Articles/Components/NetworkStartPosition.html": {
    "href": "Articles/Components/NetworkStartPosition.html",
    "title": "Network Start Position",
    "keywords": "Network Start Position To control where players are spawned, you can use the Network Start Position component. To use these, attach a Network Start Position component to a game object in the scene, and position the game object where you would like one of the players to start. You can add as many start positions to your Scene as you like. The Network Manager detects all start positions in your Scene, and when it spawns each player instance, it uses the position and orientation of one of them. The Network Manager will spawn players at (0, 0, 0) by default. Adding this component to a game object will automatically register/unregister its game object's transform to the Network Manager as an available spawning position. Depending on the Network Manager Player Spawn Method setting the spawning is either Random (possible that the same spawn position will be used by two or more players) or Round Robin (use every available position, until there are more clients than spawn points)."
  },
  "Articles/Components/NetworkTransform.html": {
    "href": "Articles/Components/NetworkTransform.html",
    "title": "Network Transform",
    "keywords": "Network Transform The Network Transform component synchronizes the position, rotation, and scale of networked game objects across the network. A game object with a Network Transform component must also have a Network Identity component. When you add a Network Transform component to a game object, Mirage also adds a Network Identity component on that game object if it does not already have one. By default, Network Transform is server-authoritative unless you check the box for Client Authority . Client Authority applies to character objects as well as non-character objects that have been specifically assigned to a client, but only for this component. With this enabled, position changes are send from the client to the server. Under Sensitivity , you can set the minimum thresholds of change to the transform values in order for network messages to be generated. This helps minimize network \"noise\" for minor twitch and jitter. Normally, changes are sent to all observers of the object this component is on. Setting Sync Mode to Owner Only makes the changes private between the server and the client owner of the object. You can use the Sync Interval to specify how often it syncs (in seconds)."
  },
  "Articles/Components/NetworkTransformChild.html": {
    "href": "Articles/Components/NetworkTransformChild.html",
    "title": "Network Transform Child",
    "keywords": "Network Transform Child The Network Transform Child component synchronizes the position and rotation of the child game object of a game object with a Network Transform component. You should use this component in situations where you need to synchronize an independently-moving child object of a Networked game object. To use the Network Transform Child component, attach it to the same parent game object as the Network Transform, and use the Target field to define which child game object to apply the component settings to. You can have multiple Network Transform Child components on one parent game object . You can modify Compress Rotation to save some bandwidth when synchronizing the rotation. You can use the Network Sync Interval to specify how often it syncs (in seconds). This component takes authority into account, so local player game objects (which have local authority) synchronize their position from the client to server, then out to other clients. Other game objects (with server authority) synchronize their position from the server to clients."
  },
  "Articles/Examples/AdditiveScenes/index.html": {
    "href": "Articles/Examples/AdditiveScenes/index.html",
    "title": "Additive Scenes Example",
    "keywords": "Additive Scenes Example IMPORTANT: Make sure you have a layer in project settings called Player for this example to work well. In Build Settings, remove all scenes and add all of the scenes from the Scenes folder in the following order: MainScene SubScene Open the MainScene in the Editor and make sure the Sub Scenes list in the Network Manager component on the Network scene object contains the SubScene scene. This is already setup by default, but if the MainScene was opened and saved before putting the scenes in the Build Settings list, the Sub Scenes list may be cleared accidentally. File -> Build and Run Start up to 3 built instances: These will all be client players. Press Play in the Editor and click Host (Server + Client) in the HUD This will be the host and the 1st player of up to 4. You can also use Server Only if you prefer. Click Client in the built instances. WASDQE keys to move & turn your player capsule. There are objects in the corners of the scene hidden by Proximity Checkers. The big area in the middle is where the subscene will be loaded when you get near the shelter. There are also networked objects inside the subscene, also with Proximity Checkers. Since subscenes are only loaded for individual clients, other clients that are outside the middle Zone won't see what those in the subscene can see. If you play a built instance as Host or Server and play as client in the editor, you'll see the subscene content load and unload in the hierarchy as you move in and out of the middle Zone."
  },
  "Articles/Examples/Basic/index.html": {
    "href": "Articles/Examples/Basic/index.html",
    "title": "Basic",
    "keywords": "Basic General description of Basic example."
  },
  "Articles/Examples/ChangeScene/index.html": {
    "href": "Articles/Examples/ChangeScene/index.html",
    "title": "ChangeScene",
    "keywords": "ChangeScene"
  },
  "Articles/Examples/Chat/index.html": {
    "href": "Articles/Examples/Chat/index.html",
    "title": "Chat",
    "keywords": "Chat"
  },
  "Articles/Examples/index.html": {
    "href": "Articles/Examples/index.html",
    "title": "Samples Overview",
    "keywords": "Samples Overview Mirage includes several small examples to help you learn how to use various features and how to set things up so they work together. Additive Scenes The Additive Scenes example demonstrates a server additively loading a sub-scene into a main scene at startup, and having a server-only trigger that generates a message to any client whose player enters the trigger zone to also load the sub-scene, and subsequently unload it when they leave the trigger zone. Only players inside the trigger zone can see the objects in the sub-scene. Network Proximity Checker components are key to making this scenario work. Basic Basic is what it sounds like...the most rudimentary baseline of a networked game. Features SyncVars updating random UI data for each player. Chat A simple text chat for multiple networked clients. ChangeScene Provides examples for Normal and Additive network scene changing. Pong A simple example for \"How to build a multiplayer game with Mirage\" is Pong. It illustrates the usage of NetworkManager , NetworkManagerHUD , NetworkBehaviour, NetworkIdentity, NetworkTransform , NetworkStartPosition and various Attributes. Tanks This is a simple scene with animated tanks, networked rigidbody projectiles, and NavMesh movement Import samples Sample can be imported using the Unity Package manager. They can be found inside the Samples Dropdown."
  },
  "Articles/Examples/MultipleAdditiveScenes/index.html": {
    "href": "Articles/Examples/MultipleAdditiveScenes/index.html",
    "title": "Multiple Additive Scenes Example",
    "keywords": "Multiple Additive Scenes Example In Build Settings, remove all scenes and add both of the scenes from the Scenes folder in the following order: Main Game Open the Main scene in the Editor and make sure the Game Scene field in the MultiScene Network Manager on the Network scene object contains the Game scene. This is already setup by default, but if the Main scene was opened and saved before putting the scenes in the Build Settings list, the Game Scene field may be cleared accidentally. MultiScene Network Manager The MultiScene Network Manager is derived from the base Network Manager and is responsible for additively loading the subscene instances and placing the players in their respective subscene instances and initializing player SyncVars. It has a Game Scene field where the Game subscene is assigned, and an Instances field to set how many instances are loaded on the server. In this example, the subscene instances are additively loaded on the server with localPhysicsMode = LocalPhysicsMode.Physics3D . Physics subscenes do not auto-simulate, so each scene has a game object with a generic PhysicsSimulator script on it. This script does nothing on the client, only on the server. Clients only ever have one instance of the subscene additively loaded (without localPhysicsMode ), while server has them all. All networked objects have a NetworkSceneChecker component which is what isolates them to their specific subscene. Playing in the Instances File -> Build and Run Start at least 3 built instances: These will all be client players. Press Play in the Editor and click Host (Server + Client) in the HUD - This will be the host and the 1st player. You can also use Server Only if you prefer. Click Client in the built instances. WASDQE keys to move & turn your player capsule, Space to jump. Colliding with the small colored spheres scores points base on their color. Colliding with the larger tumblers sends them rolling around...they're server-side non-kinematic rigidbodies. Only scores for the players in the same subscene are shown at the top of the game window."
  },
  "Articles/Examples/Pong/index.html": {
    "href": "Articles/Examples/Pong/index.html",
    "title": "Pong",
    "keywords": "Pong A simple example for \"How to built a multiplayer game with Mirage\" is Pong, which is included in the AssetStore package of Mirage. It illustrates the usage of NetworkManager, NetworkManagerHUD, NetworkBehaviour, NetworkIdentity, NetworkTransform, NetworkStartPosition and NetworkingAttributes. Setting the number of players First of all, let's have a look at the NetworkManager object in the main scene. When adding the NetworkManager component to a gameobject, a few default settings are already set ( Don't destroy on Load , Run in Background , ...) For playing Pong the maximum number of players is 2, so the setting Network Info/Max connections will also be 2. As there are no other scenes (room, online or offline scene) in this sample the properties for Offline Scene and Online Scene will stay empty. Creating the player Furthermore every player needs a racket to play with. Each player who joins the game will have his own controllable object, which represents him within the game. This gameobject is called PlayerObject . For spawning the PlayerObject a prefab has to be created, containing at least a NetworkIdentity component with Local Player Authority checked. The Local Player Authority allows the player to control and modify the gameobjects properties (e.g. for movement). The NetworkManager needs a reference to this prefab, which is located in Spawn Info/Player Prefab . To have the player movement synchronized over the network, the player prefab also contains a NetworkTransform. Player start position The main scene contains 2 gameobjects with only a NetworkStartPosition component (gameobjects RacketSpawnLeft, RacketSpawnRight in the scene). These transforms will be automatically registered by the NetworkManager as spawning positions. Setting up the network A very convenient component for establish/testing connections is the NetworkManagerHUD. It provides basic functionality for start a game as Client, Server, or Host (Client and Server at the same time). It requires the NetworkManager component. The ball of Pong The ball is the main focus of Pong, as this is the object needed to score points. Its NetworkIdentity component has neither Server Only nor Local Player Authority checked, as it's moved by the server physics engine and can be influenced by the players. As with the PlayerObject the position is synchronized via NetworkTransform. When having multiple scenes, the ball can be spawned by the NetworkManager, but to keep this sample simple, it's placed directly within the main scene."
  },
  "Articles/Examples/Room/index.html": {
    "href": "Articles/Examples/Room/index.html",
    "title": "Room",
    "keywords": "Room General description of Room example."
  },
  "Articles/Examples/Tanks/index.html": {
    "href": "Articles/Examples/Tanks/index.html",
    "title": "Tanks",
    "keywords": "Tanks General description of Tanks example."
  },
  "Articles/General/index.html": {
    "href": "Articles/General/index.html",
    "title": "General Overview",
    "keywords": "General Overview Mirage is a high level multiplayer library for Unity games. The goal is to make it as easy as possible to add multiplayer to your game. Some of the key features of Mirage include: Sending and receiving messages State synchronization Client/Server and host mode Mirage is made of 3 layers: graph TD Obj[\\Object Layer/] --> Msg Msg[\\Message Layer/] --> Socket Socket[\\Socket Layer/] From the bottom up: Socket Layer The Socket Layer is concerned about sending and receiving bytes. It has no knowledge of what it is sending. There are several socket factory implementations. The default socket factory in Mirage is UDPSocketFactory. If you want to implement a socket factory, create a class that extends SocketFactory . It's primary responsibility is send and receive data. You will also need to create a class that represents a link between Mirage and the outside world by implementing Mirage.SocketLayer.ISocket . Reliability is handled on top of the factory by Mirage. Message Layer The message layer is concerned about sending and receiving messages If you wish to use this functionality, you will need to have a NetworkClient in the client and a NetworkServer for the server. These classes provide events you can subscribe to for the life cycle of connections. A connection is an implementation of INetworkPlayer , and can send and receive messages. Object Layer This layer is the highest level layer, the classes in this layer are concerned about synchronizing state between objects, as well as sending RPC calls . The client needs a ClientObjectManager , the server needs a ServerObjectManager . It will spawn and destroy objects and keep the objects in the client in sync with the objects in the server Clients and Servers Mirage supports 2 modes of operation which can work at the same time. Host mode In host mode, the server and client are running in the same application and share all networked objects. There is a direct in-memory channel of communication between the NetworkServer and NetworkClient . Since the objects are shared, there is no need to synchronize data. Note that host mode bypasses the Transport Layer. Client / Server mode In this mode, the client is connected to a separate server, which is normally in another machine and reachable through the network. In client / server mode, the objects are duplicated in the server and client. For every networked object in the server, there is a corresponding object in the client with a matching network id. Note a server can be in both host mode as well as server for other clients. graph LR subgraph host[\"Host\"] Client[\"Local Client\"] --- Server end Server --- Client1 Server --- Client2 Server --- Client3"
  },
  "Articles/General/Integrations/index.html": {
    "href": "Articles/General/Integrations/index.html",
    "title": "Integrations",
    "keywords": "Integrations Here we will maintain a list of assets known to be compatible with Mirage. If you know of others, please have the publisher contact us directly in our Discord . SmoothSync Weather Maker Noble Connect Free Dissonance Voice Chat RTS Engine Rucksack Steamworks Networking Master Audio Multiplayer"
  },
  "Articles/General/MiragesArchitecture.html": {
    "href": "Articles/General/MiragesArchitecture.html",
    "title": "Concepts",
    "keywords": "Important ! This page is work in process Concepts World List of NetworkIdentities List of Player Handles message InterestManagerment (AOI) uses List of NetworkIdentities and List of Player decides which player can see which Identity Player owns NetworkIdentities views NetworkIdentities (controlled by AOI/Visbility) has a connection (optional) Peer gate keeper has list of connections ISocket gate to outside World connections has list of players can send and receive data (raw byte) can be reliable/unreliable/notify messages unpacked/deserialized form of raw byte has message Id messages are sent between Machines, no sending remote message to local handlers Machines unity instance RPC function that exists on GameObjects Client RPC: invoked by the server Rpc target players Server RPC: invoked by player rpc targets server if player has no connection, invoke locally if player has connection, invoke remotely if \"send to all\" repeat above for each player invoked by players"
  },
  "Articles/General/PlayerControllerToIdentity.html": {
    "href": "Articles/General/PlayerControllerToIdentity.html",
    "title": "Changing playerController to identity",
    "keywords": "Changing playerController to identity If you need to fix up a project after NetworkConnection.playerController was changed to identity these instructions should be helpful. Open your Unity project and look for Assets/Mirage/Runtime/ NetworkConnection : Open this file in Visual Studio or Visual Code from Unity and look for these lines: The line numbers could be off a bit if minor file changes happen above them after this document was written. Comment the last line shown: // public NetworkIdentity identity { get; internal set; } Double-click and then right-click playerController and select Rename: Change playerController to identity and click Apply: Visual Studio will now have applied the change throughout your project, but you're not done yet! Without using the replace feature this time, simply retype the name back to playerController and un-comment the last line in the code image that you commented out in step 3. Your code should now look like the code image again. Save your work!"
  },
  "Articles/General/Showcase.html": {
    "href": "Articles/General/Showcase.html",
    "title": "Showcase",
    "keywords": "Showcase Cubica | Showcase video | The multiplayer version of Block Story Alteros Online | Science-Fantasy Post Apo 3D MMORPG Block'Em! | Block'Em! is an action-filled block-building party game for 2 to 4 players! Hacker Field | Discord | HackerField is a multiplayer strategy tower defence in a futuristic scenario. Wolves | Wolves is a 3rd person action shooter based off MechAssault"
  },
  "Articles/General/Sockets.html": {
    "href": "Articles/General/Sockets.html",
    "title": "Sockets",
    "keywords": "Sockets Sockets are low level objects that are responsible for sending and receiving raw data over the network. Mirage has a single transport (called Peer ) built into its core, which handles all the connection states and reliability. Peer then uses the low level sockets API to send and receive raw data over the network. Check this section below to see how to implement your own socket. Available sockets The table below shows a list of available sockets and their features. UDP (built-in) Steam ( SteamWorks.NET , Facepunch ) Websocket CCU 1000+ ? ? Protocol UDP UDP TCP Unreliable ✅ ✅ Mobile ✅ ✅ WebGL ✅ CPU LOW LOW ? NAT Punch ✅ Encryption ✅ ✅ IPv6 ✅ ? ? Managed ✅ ✅ ✅ Native ✅ Based on NanoSockets (native), .NET (managed) Steam Game Networking Sockets SimpleWebTransport Changing a socket To change a socket, follow the steps below: Install the desired socket. Instructions are available on each socket's repository. Add the socket's SocketFactory as a new component on the object where you have the other Mirage components. Assign a reference to this component in the Socket Factory field of NetworkServer and NetworkClient components. Check if the socket has any required additional steps. Done. Mirage should now be using the newly added socket. Implementing new socket To create a new socket, you have to implement two classes - one that implements the ISocket interface, which will represent the low-level socket and one that extends the SocketFactory class, which will act as the MonoBehaviour component creating new instances of the low-level class. You can check out our built-in UDP socket implementation as an inspiration: UdpSocket and UdpSocketFactory ."
  },
  "Articles/General/Start.html": {
    "href": "Articles/General/Start.html",
    "title": "Getting Started",
    "keywords": "Getting Started This document describes steps to creating a multiplayer game with Mirage. The process described here is a simplified, higher level version of the actual process for a real game; it doesn’t always work exactly like this, but it provides a basic recipe for the process. Video tutorials Currently there are no mirage specific videos. You can use mirror existing videos along side our Mirror to Mirage Conversion guide. Networking set-up Right click in the Scene, select Network > NetworkManager . This will create a new GameObject with all the necessary networking components set up for you. Add the NetworkManagerHUD component to the game object. This provides an out of the box canvas ui system that you can use and create your own ui with. Assign the variables to properly setup the ui so everything will interact with network code. In future we will be providing out of the box ui that auto set's up. See Using the NetworkManager . Player Prefab Create a new prefab in your project. Add a NetworkIdentity component to the player Prefab Set the playerPrefab field on the CharacterSpawner component to the player Prefab. You can find this component on the GameObject you created in the first setup. See character objects for more information. Player Movements Note Attach the correct type of movement script you intended to use. NetworkTransform will move the transform component without physics calculations. If you require physics to be also part of your normal movement calculations suggestion would be to attach a NetworkRigidBody component instead. Warning Currently network transform and network rigid body components cannot handle various lag and drop of packets. Jitter or lag behind may occur. We are working to improve these components and have a better lag and jitter control in the future. Add the correct movement component you require. Check box client authority under the component if you want the player to be able to fully control movement without server controlling it. Warning If client authority is checked then hacking can occur due to trusting clients and accepting there movement. if you do not want this do not check client authority under the component and you will require to send commands to server to allow movement to occur. Update input and control scripts to reflect what type of control you want. See below for different examples. Note If you require a camera to run on player prefab subscribe to Identity.OnStartLocalPlayer event to take control of the Main Camera in the scene for the player. You do not need a camera on every player prefab. Example if client authority has been checked and you trust clients. Never trust clients tho. using UnityEngine; using Mirage; public class Controls : NetworkBehaviour { void Update() { if (!IsLocalPlayer) { // exit from update if this is not the local player return; } // handle player input for movement } } Example if server authority is going to be used. using UnityEngine; using Mirage; public class Controls : NetworkBehaviour { void Update() { if (!IsLocalPlayer) { // exit from update if this is not the local player return; } // handle player input for movement // You would call this command after handling input or you can send inputs directly to // server and let server buffer inputs up and do movements based on the buffered inputs. MovePlayer(); } [ServerRpc] void MovePlayer() { // We are now firing off some kind of movement all done by server. } } Basic player game state Make scripts that contain important data into NetworkBehaviours instead of MonoBehaviours You can sync different types of data depending on what you need to sync. See State Synchronization . Remote calls Make scripts that perform important actions into NetworkBehaviours instead of MonoBehaviours Update functions that perform important player actions to have an attribute of [ServerRpc] See Remote actions . Non-player game objects Fix non-player prefabs such as enemies: Add the NetworkIdentify component Add the correct component needed to sync movement as state above with player movement. Once all objects have a network identity. Find ClientObjectManager under the networkmanager game object in scene and hit register prefabs. Update scripts with game state and actions Spawners Potentially change spawner scripts to be NetworkBehaviours Modify spawners to only run on the server (use IsServer property or the OnStartServer callback) Call ServerObjectManager.Spawn() for created game objects Spawn positions for players Add a new game object and place it at player’s start location Add this GameObject to the CharacterSpawner 's Positions list."
  },
  "Articles/General/Support.html": {
    "href": "Articles/General/Support.html",
    "title": "Support",
    "keywords": "Support Discord You can find us on Discord . GitHub You can create an issue in GitHub You can also contribute with Pull Requests...see Contributing"
  },
  "Articles/General/Troubleshooting.html": {
    "href": "Articles/General/Troubleshooting.html",
    "title": "Troubleshooting",
    "keywords": "Troubleshooting No Writer found for X Mirage normally generates readers and writers for any Data Type In order to do so, it needs to know what types you want to read or write. You are getting this error because Mirage did not know you wanted to read or write this type. Mirage scans your code looking for calls to Send , ReceiveHandler , Write or Read . It will also recognize SyncVars and parameters of RPC methods . If it does not find one, it assumes you are not trying to serialize the type so it does not generate the reader and writer. For example, you might get this error with this code when trying to sync the synclist. struct MyCustomType { public int id; public string name; } class MyBehaviour : NetworkBehaviour { SyncList<MyCustomType> mylist = new SyncList<MyCustomType>(); } In this case there is no direct invocation to send or receive. So Mirage does not know about it. There is a simple workaround: add a [NetworkMessage] attribute to your class or struct. [NetworkMessage] struct MyCustomType { public int id; public string name; }"
  },
  "Articles/Guides/Attributes.html": {
    "href": "Articles/Guides/Attributes.html",
    "title": "Attributes Overview",
    "keywords": "Attributes Overview Networking attributes are added to member functions of NetworkBehaviour scripts, to make them run on either the client or server. These attributes can be used for Unity game loop methods like Start or Update, as well as other implemented methods. NOTE : when using abstract or virtual methods the Attributes need to be applied to the override methods too. ServerAttribute Only a server can call the method (throws an error when called on a client unless you specify error = false). ClientAttribute Only a Client can call the method (throws an error when called on the server unless you specify error = false). ClientRpcAttribute The server uses a Remote Procedure Call (RPC) to run that function on clients. It has a target option allowing you to specify in which clients it should be executed, along with a channel option. See also: Client Rpc ServerRpcAttribute Call this from a client to run this function on the server. Make sure to validate input etc. It's not possible to call this from a server. Use this as a wrapper around another function, if you want to call it from the server too. Note that you can return value from it. See also Server Rpc The allowed argument types are: Basic type (byte, int, float, string, UInt64, etc) Built-in Unity math type (Vector3, Quaternion, etc), Arrays of basic types Structs containing allowable types NetworkIdentity SyncVar SyncVars are used to synchronize a variable from the server to all clients automatically."
  },
  "Articles/Guides/Authority.html": {
    "href": "Articles/Guides/Authority.html",
    "title": "Network Authority",
    "keywords": "Network Authority Authority is a way of deciding who owns an object and has control over it. Server Authority Server authority means that the server has control of an object. Server has authority over an object by default. This means the server would manage and control of all collectible items, moving platforms, NPCs, and any other networked objects that aren't the player. Client Authority Client authority means that the client has control of an object. When a client has authority over an object it means that they can call ServerRpc and that the object will automatically be destroyed when the client disconnects. Even if a client has authority over an object the server still controls SyncVar and control other serialization features. A component will need to use a ServerRpc to update the state on the server in order for it to sync to other clients. How to give authority By default the server has Authority over all objects. The server can give authority to objects that a client needs to control, like the character object. If you spawn a character object using ServerObjectManager.AddCharacter then it will automatically be given authority. Using NetworkServer.Spawn You can give authority to a client when an object is spawned. This is done by passing in the connection to the spawn message GameObject go = Instantiate(prefab); ServerObjectManager.Spawn(go, owner); Using identity.AssignClientAuthority You can give authority to a client any time using AssignClientAuthority . This can be done by calling AssignClientAuthority on the object you want to give authority too identity.AssignClientAuthority(conn); You may want to do this when a player picks up an item // Command on character object [ServerRpc] void PickupItem(NetworkIdentity item) { item.AssignClientAuthority(connectionToClient); } How to remove authority You can use identity.RemoveClientAuthority to remove client authority from an object. identity.RemoveClientAuthority(); Authority can't be removed from the character object. Instead you will have to replace the character object using NetworkServer.ReplaceCharacter . On Authority When authority is given to or removed from an object a message will be sent to that client to notify them. This will cause the OnAuthorityChanged(bool) functions to be called. On Destroy if the client has authority, then OnAuthorityChanged(false) will be called on the object when it is destroyed. Check Authority Client Side The identity.hasAuthority property can be used to check if the local player has authority over an object. Server Side The identity.Owner property can be check to see which client has authority over an object. If it is null then the server has authority."
  },
  "Articles/Guides/BestPractices.html": {
    "href": "Articles/Guides/BestPractices.html",
    "title": "Best Practices",
    "keywords": "Best Practices work in progress Custom Messages If you send custom message regularly then the message should be a struct so that there is no GC/allocations struct CreateVisualEffect { public Vector3 position; public Guid prefabId; }"
  },
  "Articles/Guides/BitPacking/BitCount.html": {
    "href": "Articles/Guides/BitPacking/BitCount.html",
    "title": "Bit Count",
    "keywords": "Bit Count The bit count of Integer based fields can be set using BitCountAttribute This will truncate the bits so that only the small bits are sent. There is no range checking for values using BitCount, so value that are too big or negative will not be unpacked correctly This means that BitCount should not be used with values that can be negative because this data will be lost. If you do need to send negative values then use ZigZagEncode or BitCountFromRange Use cases A Value with a maximum value An index in an array of known size eg array with 10 elements, index can be sent as 4 bits A Random int hash where you only need to send 16 bits Supported Types Byte Short UShort Int Uint Long ULong Enum Example 1 Health which is between 0 and 100 public class MyNetworkBehaviour : NetworkBehaviour { [SyncVar, BitCount(7)] public int Health; } BitCount = 7 so max value of Health is 127 health = 57 will serialize to 011_1001 health = -1 (out of range) will serialize to 111_1111 health = 130 (out of range) will serialize to 000_0010 Example 2 Weapon index in a list of 6 weapons public class MyNetworkBehaviour : NetworkBehaviour { [SyncVar, BitCount(3)] public int WeaponIndex; } BitCount = 3 so max value of Health is 7 WeaponIndex = 5 will serialize to 101 Generated Code Source: [SyncVar, BitCount(7)] public int myValue; Generated: public override bool SerializeSyncVars(NetworkWriter writer, bool initialState) { ulong syncVarDirtyBits = base.SyncVarDirtyBits; bool result = base.SerializeSyncVars(writer, initialize); if (initialState) { writer.Write((ulong)this.myValue, 7); return true; } writer.Write(syncVarDirtyBits, 1); if ((syncVarDirtyBits & 1UL) != 0UL) { writer.Write((ulong)this.myValue, 7); result = true; } return result; } public override void DeserializeSyncVars(NetworkReader reader, bool initialState) { base.DeserializeSyncVars(reader, initialState); if (initialState) { this.myValue = reader.Read(7); return; } ulong dirtyMask = reader.Read(1); if ((dirtyMask & 1UL) != 0UL) { this.myValue = reader.Read(7); } } last updated for Mirage v101.8.0"
  },
  "Articles/Guides/BitPacking/BitCountFromRange.html": {
    "href": "Articles/Guides/BitPacking/BitCountFromRange.html",
    "title": "Bit Count From Range",
    "keywords": "Bit Count From Range The bit count of Integer based fields can be set using BitCountFromRangeAttribute , It will use the given range to calculate the required bit count. This works in a similar way to BitCount The min value is subtracted from the value before it is written and added back on after it is read. This will shift all written values into the positive range for writing so that the sign bit is not lost. This will truncate the bits so that only the small bits are sent. There is no range checking for values using BitCount, so value that are too big or too small will not be unpacked correctly. Bit Count is calculated using bitCount = 1 + Floor(Log2(max - min)) , so min = -100 , max = 100 results in bit count = 8 Values are written using Write(value - min, bitCount) and read using value = Read(bitCount) + min Use cases A Value with a minimum and maximum value Supported Types Byte Short UShort Int Uint Long ULong Enum Example 1 A modifier which can add to a character value to increase or decrease it public class MyNetworkBehaviour : NetworkBehaviour { [SyncVar, BitCountFromRange(-100, 100)] public int modifier; } Range = 200 so bit count is 8, causing real range to be -100 to 155 modifier = 57 will serialize to 1001_1101 modifier = -57 will serialize to 0010_1011 modifier = -110 (out of range) will serialize to 1111_0110 modifier = 130 will serialize to 1110_0110 , even tho 130 is out of range there is enough range because bit count rounds up. modifier = 170 (out of range) will serialize to 0000_1110 Example 2 A Direction enum to say which way a model is facing public enum MyDirection { Backwards = -1, None = 0, Forwards = 1, } public class MyNetworkBehaviour : NetworkBehaviour { [SyncVar, BitCount(-1, 1)] public MyDirection direction; } Range = 3 so bit count is 2 , causing real range to be -1 to 2 direction = -1 will serialize to 00 direction = 1 will serialize to 10 Generated Code Source: [SyncVar, BitCountFromRange(-100, 100)] public int myValue; Generated: public override bool SerializeSyncVars(NetworkWriter writer, bool initialState) { ulong syncVarDirtyBits = base.SyncVarDirtyBits; bool result = base.SerializeSyncVars(writer, initialize); if (initialState) { writer.Write((ulong)(this.myValue - (-100)), 8); return true; } writer.Write(syncVarDirtyBits, 1); if ((syncVarDirtyBits & 1UL) != 0UL) { writer.Write((ulong)(this.myValue - (-100)), 8); result = true; } return result; } public override void DeserializeSyncVars(NetworkReader reader, bool initialState) { base.DeserializeSyncVars(reader, initialState); if (initialState) { this.myValue = reader.Read(8) + (-100); return; } ulong dirtyMask = reader.Read(1); if ((dirtyMask & 1UL) != 0UL) { this.myValue = reader.Read(8) + (-100); } } last updated for Mirage v101.8.0"
  },
  "Articles/Guides/BitPacking/FloatPack.html": {
    "href": "Articles/Guides/BitPacking/FloatPack.html",
    "title": "Float Pack",
    "keywords": "Float Pack A float value can be compressed using FloatPackAttribute The float value will be quantize and turned into an integer with at least the resolution that is given in the attribute. The real resolution used it calculated from the bitcount required to pack the value. For example if max is 100 , and resolution is 0.1f , then there are 2000 discrete values are needed to pack this, this requires 11 bits. 11 bits allows for 2047 discrete values so the real resolution used will be 0.0977f . Value are packed so that 0 will unpack are 0, and other values are rounded to nearest int so that rounding errors stays as low as possible. Values are clamped so values out of range will be packed as min/max value instead Use cases A Value with a maximum value Supported Types Float Example 1 Health which is between 0 and 100 public class MyNetworkBehaviour : NetworkBehaviour { [SyncVar, FloatPack(100f, 0.02f)] public int Health; } Max = 100 , resolution = 0.02f so bit count is 14 health = 57.2f will serialize to 01_0010_0100_1101 and deserialize to 57.197f health = -13.5f will serialize to 11_1011_1010_1110 and deserialize to -13.503f health = 120f will be clamped to 100f Example 2 A Percent that where you only want to send 8 bits public class MyNetworkBehaviour : NetworkBehaviour { [SyncVar, FloatPack(1f, 8)] public int Percent; } Max = 1f , bitCount = 8 so resolution will be 0.00787f Generated Code Source: [SyncVar, FloatPack(100f, 0.02f)] public int myValue; Generated: private FloatPacker myValue__Packer = new FloatPacker(100f, 0.02f); public override bool SerializeSyncVars(NetworkWriter writer, bool initialState) { ulong syncVarDirtyBits = base.SyncVarDirtyBits; bool result = base.SerializeSyncVars(writer, initialize); if (initialState) { myValue__Packer.Pack(writer, this.myValue); return true; } writer.Write(syncVarDirtyBits, 1); if ((syncVarDirtyBits & 1UL) != 0UL) { myValue__Packer.Pack(writer, this.myValue); result = true; } return result; } public override void DeserializeSyncVars(NetworkReader reader, bool initialState) { base.DeserializeSyncVars(reader, initialState); if (initialState) { this.myValue = myValue__Packer.Unpack(reader); return; } ulong dirtyMask = reader.Read(1); if ((dirtyMask & 1UL) != 0UL) { this.myValue = myValue__Packer.Unpack(reader); } } last updated for Mirage v101.8.0"
  },
  "Articles/Guides/BitPacking/index.html": {
    "href": "Articles/Guides/BitPacking/index.html",
    "title": "Bit Packing",
    "keywords": "Bit Packing Bit packing is a form of data compression that reducing that number of bits it takes to serialize a value. A simple example of this is an integer that is always between 0 and 100. Normally an integer will be serialized as 32 bits, but knowing its range is 100 it can be packed into only 7 bits. Bit Packing in Mirage Mirage has many attributes that can be applied to SyncVars and Rpc parameters BitCount Sets the number of bits on an integer BitCountFromRange Sets the number of bits from a given range, rounding up. ZigZagEncode Encodes a value using ZigZag Encoding . Only useable with BitCount or VarIntBlocks VarInt Packs int to different size based on its size. Allows for 3 configurable size ranges VarIntBlocks Packs int to different size based on its size. Uses block size so can be used over a large range of values FloatPack Compresses a float value VectorPack Compresses a Vector value QuaternionPack Compresses a Quaternion value"
  },
  "Articles/Guides/BitPacking/QuaternionPack.html": {
    "href": "Articles/Guides/BitPacking/QuaternionPack.html",
    "title": "Quaternion Pack",
    "keywords": "work in progress Quaternion Pack Quaternion Rules Quaternions can be packed using some of the mathematically rules they follow Quaternions should be normalized x^2 + y^2 + z^2 + w^2 = 1 Because of this we only need to send the smallest 3 value as we can calculate the largest one again on the other side. We also need to send the index to say which of the 4 elements was the largest largest = sqrt(1 - a^2 + b^2 + c^2) Positive and Negative Quaternions represent the same rotation Q(x,y,z,w) === Q(-x,-y,-z,-w) If the largest element is negative we would have to send its sign in order to calculate the correct rotation. However because Q=-Q, if the largest element is negative we can just flip the sign of all 4 elements instead. Max of second largest element The value of the 2nd largest element is when it is also equal to the largest so we have L^2 + L^2 = 1 From this we can find the max value for 2nd largest is L = +- 1 / sqrt(2) = +- ~0.707 This allows us to pack the smallest 3 elements in range -0.707 to +0.707 instead of -1 to +1 Result Combining all this we can send each of the smallest 3 elements with 9 bits, and 2 bits for the index of the largest element. Which reduces the size of a Quaternion from 128 bits unpacked to only 29 bits. The precision of the smallest 3 can in increased or decreased to change the bit counts by multiples of 3. eg 10 bits per element will result is 32 bits total. Supported Types Quaternion Example 1 public class MyNetworkBehaviour : NetworkBehaviour { [SyncVar, QuaternionPack(9)] public Quaternion direction; } Generated Code Source: [SyncVar, QuaternionPack(9)] public int myValue; Generated: private QuaternionPacker myValue__Packer = new QuaternionPacker(9); public override bool SerializeSyncVars(NetworkWriter writer, bool initialState) { ulong syncVarDirtyBits = base.SyncVarDirtyBits; bool result = base.SerializeSyncVars(writer, initialize); if (initialState) { myValue__Packer.Pack(writer, this.myValue); return true; } writer.Write(syncVarDirtyBits, 1); if ((syncVarDirtyBits & 1UL) != 0UL) { myValue__Packer.Pack(writer, this.myValue); result = true; } return result; } public override void DeserializeSyncVars(NetworkReader reader, bool initialState) { base.DeserializeSyncVars(reader, initialState); if (initialState) { this.myValue = myValue__Packer.Unpack(reader); return; } ulong dirtyMask = reader.Read(1); if ((dirtyMask & 1UL) != 0UL) { this.myValue = myValue__Packer.Unpack(reader); } } last updated for Mirage v101.8.0"
  },
  "Articles/Guides/BitPacking/VarInt.html": {
    "href": "Articles/Guides/BitPacking/VarInt.html",
    "title": "Variable Sized Integer",
    "keywords": "work in progress Variable Sized Integer"
  },
  "Articles/Guides/BitPacking/VarIntBlocks.html": {
    "href": "Articles/Guides/BitPacking/VarIntBlocks.html",
    "title": "Variable Sized Integer Blocks",
    "keywords": "work in progress Variable Sized Integer Blocks Packs and integer value based on its size Supported Types Byte Short UShort Int Uint Long ULong Enum Example 1 A modifier which can add to a character value to increase or decrease it public class MyNetworkBehaviour : NetworkBehaviour { [SyncVar, VarIntBlocks(-100, 100)] public int modifier; } Range = 200 so bit count is 8, causing real range to be -100 to 155 modifier = 57 will serialize to 1001_1101 modifier = -57 will serialize to 0010_1011 modifier = -110 (out of range) will serialize to 1111_0110 modifier = 130 will serialize to 1110_0110 , even tho 130 is out of range there is enough range because bit count rounds up. modifier = 170 (out of range) will serialize to 0000_1110 Example 2 A Direction enum to say which way a model is facing public enum MyDirection { Backwards = -1, None = 0, Forwards = 1, } public class MyNetworkBehaviour : NetworkBehaviour { [SyncVar, BitCount(-1, 1)] public MyDirection direction; } Range = 3 so bit count is 2 , causing real range to be -1 to 2 direction = -1 will serialize to 00 direction = 1 will serialize to 10 Generated Code Source: [SyncVar, BitCountFromRange(-100, 100)] public int myValue; Generated: public override bool SerializeSyncVars(NetworkWriter writer, bool initialState) { ulong syncVarDirtyBits = base.SyncVarDirtyBits; bool result = base.SerializeSyncVars(writer, initialize); if (initialState) { writer.Write((ulong)(this.myValue - (-100)), 8); return true; } writer.Write(syncVarDirtyBits, 1); if ((syncVarDirtyBits & 1UL) != 0UL) { writer.Write((ulong)(this.myValue - (-100)), 8); result = true; } return result; } public override void DeserializeSyncVars(NetworkReader reader, bool initialState) { base.DeserializeSyncVars(reader, initialState); if (initialState) { this.myValue = reader.Read(8) + (-100); return; } ulong dirtyMask = reader.Read(1); if ((dirtyMask & 1UL) != 0UL) { this.myValue = reader.Read(8) + (-100); } } last updated for Mirage v101.8.0"
  },
  "Articles/Guides/BitPacking/VectorPack.html": {
    "href": "Articles/Guides/BitPacking/VectorPack.html",
    "title": "Vector Pack",
    "keywords": "Vector Pack A Vector2 or Vector3 can be compressed using Vector2PackAttribute or Vector3PackAttribute This attributes work in the same way as FloatPack expect on 2 or 3 dimensions instead of 1 Use cases A Vector value with a maximum value Supported Types Vector2 ( Vector2PackAttribute ) Vector3 ( Vector3PackAttribute ) Example 1 A Position in bounds +-100 in all xyz with 0.05 precision for all axis public class MyNetworkBehaviour : NetworkBehaviour { [SyncVar, Vector3Pack(100f, 100f, 100f, 0.05f)] public Vector3 Position; } Example 2 A Position in bounds +-100 in all xz with 0.05 precision, but with +-20 and precision 0.1 in y axis public class MyNetworkBehaviour : NetworkBehaviour { [SyncVar, Vector3Pack(100f, 20f, 100f, 0.05f, 0.1f, 0.05f)] public Vector3 Position; } Example 3 A Position in for a long 2d map public class MyNetworkBehaviour : NetworkBehaviour { [SyncVar, Vector2Pack(1000f, 80f, 0.05f)] public Vector2 Position; } Generated Code Source: [SyncVar, Vector3Pack(100f, 20f, 100f, 0.05f, 0.1f, 0.05f)] public int myValue1; [SyncVar, Vector2Pack(1000f, 80f, 0.05f)] public int myValue2; Generated: private Vector3Packer myValue1__Packer = new Vector3Packer(1100f, 20f, 100f, 0.05f, 0.1f, 0.05f); private Vector2Packer myValue2__Packer = new Vector2Packer(1000f, 80f, 0.05f, 0.05f); public override bool SerializeSyncVars(NetworkWriter writer, bool initialState) { ulong syncVarDirtyBits = base.SyncVarDirtyBits; bool result = base.SerializeSyncVars(writer, initialize); if (initialState) { myValue1__Packer.Pack(writer, this.myValue1); myValue2__Packer.Pack(writer, this.myValue2); return true; } writer.Write(syncVarDirtyBits, 2); if ((syncVarDirtyBits & 1UL) != 0UL) { myValue1__Packer.Pack(writer, this.myValue1); result = true; } if ((syncVarDirtyBits & 2UL) != 0UL) { myValue2__Packer.Pack(writer, this.myValue2); result = true; } return result; } public override void DeserializeSyncVars(NetworkReader reader, bool initialState) { base.DeserializeSyncVars(reader, initialState); if (initialState) { this.myValue1 = myValue1__Packer.Unpack(reader); this.myValue2 = myValue2__Packer.Unpack(reader); return; } ulong dirtyMask = reader.Read(2); if ((dirtyMask & 1UL) != 0UL) { this.myValue1 = myValue1__Packer.Unpack(reader); } if ((dirtyMask & 2UL) != 0UL) { this.myValue2 = myValue2__Packer.Unpack(reader); } } last updated for Mirage v101.8.0"
  },
  "Articles/Guides/BitPacking/ZigZagEncode.html": {
    "href": "Articles/Guides/BitPacking/ZigZagEncode.html",
    "title": "ZigZag Encode",
    "keywords": "ZigZag Encode To encoding a value using ZigZag Encoding you can use the ZigZagEncodeAttribute This will cause negative values to be encoded as positive so that the sign bit is not lost when packing. This works best with VarIntBlocks but also works with BitCount . This attribute can not be used on the same field as BitCountFromRange , this is because BitCountFromRange already ensures negative values are packed correctly. Note The sign of a value will take up 1 bit, so if the value is in range -+100 it will need a bit count of 8 Use cases A value that can be negative or positive Supported Types Byte Short Int Long Enum Example 1 A modifier which can add to a character value to increase or decrease it public class MyNetworkBehaviour : NetworkBehaviour { [SyncVar, BitCount(8), ZigZagEncode] public int modifier; } Range = 200 so bit count is 8, causing real range to be -128 to 127 modifier = 57 will serialize to 0111_0010 modifier = -57 will serialize to 0111_0001 modifier = -110 will serialize to 1101_1011 , even tho -110 is out of range there is enough range because bit count rounds up. modifier = 130 (out of range) will serialize to 0000_0100 Generated Code Source: [SyncVar, BitCount(8), ZigZagEncode] public int myValue; Generated: public override bool SerializeSyncVars(NetworkWriter writer, bool initialState) { ulong syncVarDirtyBits = base.SyncVarDirtyBits; bool result = base.SerializeSyncVars(writer, initialize); if (initialState) { writer.Write((ulong)ZigZag.Encode(this.myValue), 8); return true; } writer.Write(syncVarDirtyBits, 1); if ((syncVarDirtyBits & 1UL) != 0UL) { writer.Write((ulong)ZigZag.Encode(this.myValue), 8); result = true; } return result; } public override void DeserializeSyncVars(NetworkReader reader, bool initialState) { base.DeserializeSyncVars(reader, initialState); if (initialState) { this.myValue = ZigZag.Decode(reader.Read(8)); return; } ulong dirtyMask = reader.Read(1); if ((dirtyMask & 1UL) != 0UL) { this.myValue = ZigZag.Decode(reader.Read(8)); } } last updated for Mirage v101.8.0"
  },
  "Articles/Guides/Callbacks/index.html": {
    "href": "Articles/Guides/Callbacks/index.html",
    "title": "Actions and Communication",
    "keywords": "Actions and Communication When you are making a multiplayer game, In addition to synchronizing the properties of networked game objects, you are likely to need to send, receive, and react to other pieces of information - such as when the match starts, when a player joins or leaves the match, or other information specific to your type of game, for example a notification to all players that a flag has been captured in a “capture-the-flag” style game. Within the Mirage networking High-Level API there are three main ways to communicate this type of information. Remote Actions Remote actions allow you to call a method in your script across the network. You can make the server call methods on all clients or individual clients specifically. You can also make clients call methods on the server. Using remote actions, you can pass data as parameters to your methods in a very similar way to how you call methods in local (non-multiplayer) projects. Networking Callbacks Networking callbacks allow you to hook into built-in Mirage events which occur during the course of the game, such as when players join or leave, when game objects are created or destroyed, or when a new Scene is loaded. There are two types of networking callbacks that you can implement: Network manager callbacks, for callbacks relating to the network manager itself (such as when clients connect or disconnect) Network behaviour callbacks, for callbacks relating to individual networked game objects (such as when its Start function is called, or what this particular game object should do if a new player joins the game) Network Messages Network messages are a “lower level” approach to sending messages (although they are still classed as part of the networking “High level API”). They allow you to send data directly between clients and the server using scripting. You can send basic types of data (int, string, etc) as well as most common Unity types (such as Vector3). Since you implement this yourself, these messages are not associated directly with any particular game objects or Unity events - it is up to you do decide their purpose and implement them!"
  },
  "Articles/Guides/Callbacks/NetworkBehaviour.html": {
    "href": "Articles/Guides/Callbacks/NetworkBehaviour.html",
    "title": "NetworkBehaviour Callbacks",
    "keywords": "NetworkBehaviour Callbacks <!-- todo --> See also NetworkBehaviour in the API Reference. There are a number of events relating to network behaviours that can occur over the course of a normal multiplayer game. These include events such as the host starting up, a player joining, or a player leaving. Each of these possible events has an associated callback that you can implement in your own code to take action when the event occurs. When you create a script which inherits from NetworkBehaviour , you can write your own implementation of what should happen when these events occur. To do this, you override the virtual methods on the NetworkBehaviour class with your own implementation of what should happen when the given event occurs. This is a full list of virtual methods (callbacks) that you can implement on NetworkBehaviour , and where they are called Server Only OnStartServer called when behaviour is spawned on server OnStopServer called when behaviour is destroyed or unspawned on server OnSerialize called when behaviour is serialize before it is sent to client, when overriding make sure to call base.OnSerialize Client only OnStartClient called when behaviour is spawned on client OnStartAuthority called when behaviour has authority when it is spawned (eg local player) called when behaviour is given authority by the sever OnStartLocalPlayer called when the behaviour is on the local character object OnStopAuthority called when authority is taken from the object (eg local player is replaced but not destroyed) OnStopClient called when object is destroyed on client by the ObjectDestroyMessage or ObjectHideMessage messages Example flows Below is some example call order for different modes NOTE: Start is called by unity before the first frame, while normally this happens after Mirage's callbacks. But if you dont call NetworkServer.Spawn the same frame as instantiate then start may be called first Note: OnRebuildObservers and OnSetHostVisibility is now on NetworkVisibility instead of NetworkBehaviour Server mode When a NetworkServer.Spawn is called (eg when new client connections and a player is created) OnStartServer OnRebuildObservers Start Client mode When local player is spawned for client OnStartAuthority OnStartClient OnStartLocalPlayer Start Host mode These are only called on the Player Game Objects when a client connects: OnStartServer OnRebuildObservers OnStartAuthority OnStartClient OnSetHostVisibility OnStartLocalPlayer Start"
  },
  "Articles/Guides/Callbacks/NetworkClient.html": {
    "href": "Articles/Guides/Callbacks/NetworkClient.html",
    "title": "",
    "keywords": "<!-- todo -->"
  },
  "Articles/Guides/Callbacks/NetworkManager.html": {
    "href": "Articles/Guides/Callbacks/NetworkManager.html",
    "title": "Network Manager Callbacks",
    "keywords": "Network Manager Callbacks See also NetworkManager in the API Reference. NetworkManager is a helper class with instance references to the other major parts of the Mirage network."
  },
  "Articles/Guides/Callbacks/NetworkServer.html": {
    "href": "Articles/Guides/Callbacks/NetworkServer.html",
    "title": "",
    "keywords": "<!-- todo -->"
  },
  "Articles/Guides/Callbacks/NetworkWorld.html": {
    "href": "Articles/Guides/Callbacks/NetworkWorld.html",
    "title": "",
    "keywords": "<!-- todo -->"
  },
  "Articles/Guides/ClockSync.html": {
    "href": "Articles/Guides/ClockSync.html",
    "title": "Clock Synchronization",
    "keywords": "Clock Synchronization For many features you need the clock to be synchronized between the client and the server. Mirage does that automatically for you. To get the current time use this code: double now = NetworkTime.Time; It will return the same value in the client and the servers. It starts at 0 when the server starts. Note the time is a double and should never be casted to a float. Casting this down to a float means the clock will lose precision after some time: after 1 day, accuracy goes down to 8 ms after 10 days, accuracy is 62 ms after 30 days , accuracy is 250 ms after 60 days, accuracy is 500 ms Mirage will also calculate the Return Trip Time as seen by the application: double rtt = NetworkTime.Rtt; Note Return RTT will also be effected by frame rate. higher frame rate will mean less delay before server reads ping message and replies. You can check the precision using: double time_standard_deviation = NetworkTime.TimeSd; for example, if this returns 0.2, it means the time measurements swing up and down roughly 0.2 s Network time is smoothing out the values using Exponential moving average . You can configure how often you want the client to send pings using: NetworkTime.PingInterval = 2.0f; You can configure how quickly results will change using: NetworkTime.PingWindowSize = 10; Higher number will result in smoother results, but longer time to adjust to changes."
  },
  "Articles/Guides/CommunityGuides/index.html": {
    "href": "Articles/Guides/CommunityGuides/index.html",
    "title": "Community Guides",
    "keywords": "Community Guides This section contains guides written by the community rather than by the developers themselves Mirage Quick Start Guide by StephenAllenGames.co.uk If you want to submit a guide either create a Pull request or ask in the discord"
  },
  "Articles/Guides/CommunityGuides/MirageQuickStartGuide/index.html": {
    "href": "Articles/Guides/CommunityGuides/MirageQuickStartGuide/index.html",
    "title": "Mirage Quick Start Guide V0.1",
    "keywords": "Mirage Quick Start Guide V0.1 This guide covers the following topics: Installation Network Manager GameObject Player Movement Initiate Server By Scripting Network Manager Hud Names And Colours Weapon Switching It is best to first make a mini practice game before converting your single player game, or creating your ideal brand new multiplayer. The Pre-made Mirage examples are great for using as reference, it is recommend to use them regarding connection setup, with ports and firewalls. This can be a huge topic that changes from person to person, and is not covered in this guide, here we will use localHost (multiple games on same PC). To achieve this, let's first create a new blank project on Unity Hub, after the editor opened up, we can move forward. Installation Before everything, to install Mirage we need to add a new package manager into our project. To do this, we can go into Edit menu then Project Settings . This will open a new Editor Window with multiple tabs. The one we are looking for is Package Manager , so click there. Once you click there, you should add a new Package Manager, so complete the fields as we show next and click apply Name: OpenUPM Url: https://package.openupm.com Scopes: - com.cysharp.unitask - com.openupm - com.miragenet Once everything is ready, the next step is to close the Project Settings window, and jump into the Package Manager . So for this we click on Window menu then Package Manager . At this window, we will click on a small button that says (probably, at today date on Unity Editor 2021.13f) Packages: In Project , here we have to select My registries . Once, you've done that, we should be able to see Mirage and a few transport and also plugins in that list. After select, you can choose the version on the list below the name, otherwise you can just click install on the bottom right part of the window and after a loading bar, that's it. You already have Mirage API on your code, congrats! NOTE: Mirage already includes a UDP transport, so for this guide is not necessary download anything else than Mirage. Creating A Network Manager Here we will be following a couple of steps, so it is easier to follow me. Right click on your Scenes folder, then click on Create new scene, save it as Main Scene , and add it to build settings Mirage already have a menu for creating a base network manager, so right click on your Scene hierarchy then go to Create => Network => NetworkManager Now you will see a pre configured GameObject called NetworkManager Important stuff about this objects CharacterSpawner is the one will be in charge of spawning your player later, so this is very important object Since we are not changing scenes between server open or close, we could disable the NetworkSceneManager, but we can leave it as it is. UdpSocketFactory is the one that does the connection, so you can change the IP and port if necessary there. Now let's setup a few things on the scene, to make it look more like a game Add a simple Plane floor with: positions (0, -1, 0) scale (2, 2, 2) Next we add a GameObject, name with name StartPosition1 set position (1, 1, 1) We go back to our NetworkManager GO , over Character Spawner component we will change the Player Spawn Method from Random to Round Robin. As a second step, we will add into the Start Positions list the one we created on the previous step. (Optional) you can create more positions if you want, and you can add them into the list, is not necessary but maybe looks nice. Player Movement So after we configure the basics, we need to create our player prefab in order to be able to spawn ourself in the network. As before, we will follow a couple of easy steps. Create a capsule in the scene hierarchy and name it Player Attached a NetworkIdentity and NetworkTransform component into the capsule. Tick Client Authority on the NetworkTransform This is how our Player GO components should look right now NOTE: Is not needed to set anything else here, Server Object Manager and Client Object Manager will be set dynamically by Mirage later. Next steps: Add a new Script, call it PlayerScript Then drag this GO with the mouse into the assets folder (You should probably create a Prefabs folder later as a good practice) and release the mouse there. That will create a Prefab for us. (You can notice this was successful because your GO icon in the scene hierarchy will be blue now) Then delete Player from scene At this stage, our player is done, so right now we need to tell Mirage who is our player in order to spawn it. So this is very easy, just go to your NetworkManager GO and open (if it is not) Character Spawner, then drag the player prefab we created before in the Player Prefab field. The last step we will need to do, is simple go to our script we created before (you can go into the assets folder and it will be there) and double click it and it will open your IDE. So what we will need to do is simple tell how we are moving the user, and also to set the camera as child of the player. We can do that simply like this: using Mirage; using UnityEngine; namespace GettingStarted { public class PlayerScript : NetworkBehaviour { private void Awake() { Identity.OnStartLocalPlayer.AddListener(OnStartLocalPlayer); } private void OnStartLocalPlayer() { Camera.main.transform.SetParent(transform); Camera.main.transform.localPosition = new Vector3(0, 0, 0); } private void Update() { if (!IsLocalPlayer) { return; } float moveX = Input.GetAxis(\"Horizontal\") * Time.deltaTime * 110.0f; float moveZ = Input.GetAxis(\"Vertical\") * Time.deltaTime * 4f; transform.Rotate(0, moveX, 0); transform.Translate(0, 0, moveZ); } } } Press play in Unity editor and... what happen? Why is our player don't spawning? Well, the question is very simple. You need to start the server somehow, and that's what comming next, but before... Types of servers On Mirage has two types of server: You can create a server only game, which runs as an Authoritative kind, and takes decision for every player and you must join always as a client ( For more info you can click here ). You can create a host server. Which will work as client + server and will take decisions for every other clients in the network Which one is the best? That depends on your game, we can't know certainly in this guide. Why are you telling me this now? Because in this guide we will be working on Server + Client type, so we want you to know that there are other ways to connect into the Server besides this guide. Continuing with the guide Now, we need to connect into our server, so for this we have two roads, write down a script and make the server start or just using the HUD Initiate Server By Scripting This one is pretty simple, we just need to go to our NetworkManager GO then Create a new script, we can call it StartServer Then server starts should look like this: using Mirage; using UnityEngine; namespace GettingStarted { public class StartServer : MonoBehaviour { [SerializeField] private NetworkManager networkManager; private void Start() { if (!networkManager) { return; } networkManager.Server.StartServer(networkManager.Client); } } } After we save the file, we go back into our NetworkManager GO, and assign the NetworkManager field into the script. Understanding Network Hud TODO Warning From here: This guide was written for mirror so some information might be out-of-date for mirage Names And Colours Player name above heads Inside your player Prefab, create an empty GameObject name it something like FloatingInfo position Y to 1.5 scale X to -1 Inside that FloatingInfo , create a 3D text using Unity menu (GameObject - 3D Object - 3D Text), Set it up as shown in the picture below Update your PlayerScript.cs with this: using Mirage; using UnityEngine; namespace QuickStart { public class PlayerScript : NetworkBehaviour { public TextMesh playerNameText; public GameObject floatingInfo; private Material playerMaterialClone; [SyncVar(hook = nameof(OnNameChanged))] public string playerName; [SyncVar(hook = nameof(OnColorChanged))] public Color playerColor = Color.white; [ServerRpc] public void CmdSetupPlayer(string _name, Color _col) { // player info sent to server, then server updates sync vars which handles it on all clients playerName = _name; playerColor = _col; } private void Awake() { Identity.OnStartLocalPlayer.AddListener(OnStartLocalPlayer); } private void OnStartLocalPlayer() { Camera.main.transform.SetParent(transform); Camera.main.transform.localPosition = new Vector3(0, 0, 0); floatingInfo.transform.localPosition = new Vector3(0, -0.3f, 0.6f); floatingInfo.transform.localScale = new Vector3(0.1f, 0.1f, 0.1f); string name = \"Player\" + Random.Range(100, 999); Color color = new Color(Random.Range(0f, 1f), Random.Range(0f, 1f), Random.Range(0f, 1f)) CmdSetupPlayer(name, color); } private void OnNameChanged(string _Old, string _New) { playerNameText.text = playerName; } private void OnColorChanged(Color _Old, Color _New) { playerNameText.color = _New; playerMaterialClone = new Material(GetComponent<Renderer>().material); playerMaterialClone.color = _New; GetComponent<Renderer>().material = playerMaterialClone; } private void Update() { if (!IsLocalPlayer) { // make non-local players run this floatingInfo.transform.LookAt(Camera.main.transform); return; } float moveX = Input.GetAxis(\"Horizontal\") * Time.deltaTime * 110.0f; float moveZ = Input.GetAxis(\"Vertical\") * Time.deltaTime * 4f; transform.Rotate(0, moveX, 0); transform.Translate(0, 0, moveZ); } } } Add the PlayerNameText and FloatingInfo objects into the script on the player prefab, as shown below. Now if you build and run, host on one, join on the other, you will see player names and colors synced across the network! Well done, 5 stars to you! Part 11 A scene networked object all can access and adjust. Create a SceneScript.cs, add it onto an empty GameObject in the scene called SceneScript. Then create a Canvas with text and button, similar to below. Add the sceneScript variable, Awake function, and CmdSendPlayerMessage to PlayerScript.cs Also add the new playerName joined line to CmdSetupPlayer(); private SceneScript sceneScript; void Awake() { //allow all players to run this sceneScript = GameObject.FindObjectOfType<SceneScript>(); Identity.OnStartLocalPlayer.AddListener(OnStartLocalPlayer); } [ServerRpc] public void CmdSendPlayerMessage() { if (sceneScript) { sceneScript.statusText = $\"{playerName} says hello {Random.Range(10, 99)}\"; } } [ServerRpc] public void CmdSetupPlayer(string _name, Color _col) { //player info sent to server, then server updates sync vars which handles it on all clients playerName = _name; playerColor = _col; sceneScript.statusText = $\"{playerName} joined.\"; } public void OnStartLocalPlayer() { sceneScript.playerScript = this; //. . . . ^ new line to add here Add this code to SceneScript.cs using Mirage; using UnityEngine; using UnityEngine.UI; namespace QuickStart { public class SceneScript : NetworkBehaviour { public Text canvasStatusText; public PlayerScript playerScript; [SyncVar(hook = nameof(OnStatusTextChanged))] public string statusText; void OnStatusTextChanged(string _Old, string _New) { //called from sync var hook, to update info on screen for all players canvasStatusText.text = statusText; } public void ButtonSendMessage() { if (playerScript != null) { playerScript.CmdSendPlayerMessage(); } } } } Attach the ButtonSendMessage function to your Canvas Button. Attach Canvas Scene Text to SceneScript variable. ignore SceneScript’s, playerScript variable, it automatically sets this! Now if you build and run, host and join, you can send messages, and have a text log for actions! Wahooo! Experiment and adjust, have fun! Weapon Switching Weapon switching! The code bits. Add the following to your PlayerScript.cs private int selectedWeaponLocal = 1; public GameObject[] weaponArray; [SyncVar(hook = nameof(OnWeaponChanged))] public int activeWeaponSynced; void OnWeaponChanged(int _Old, int _New) { // disable old weapon // in range and not null if (0 < _Old && _Old < weaponArray.Length && weaponArray[_Old] != null) { weaponArray[_Old].SetActive(false); } // enable new weapon // in range and not null if (0 < _New && _New < weaponArray.Length && weaponArray[_New] != null) { weaponArray[_New].SetActive(true); } } [ServerRpc] public void CmdChangeActiveWeapon(int newIndex) { activeWeaponSynced = newIndex; } void Awake() { // disable all weapons foreach (var item in weaponArray) { if (item != null) { item.SetActive(false); } } } Add the weapon switch button in update. Only local player switches its own weapon, so it goes below the !isLocalPlayer check. void Update() { if (!IsLocalPlayer) { // make non-local players run this floatingInfo.transform.LookAt(Camera.main.transform); return; } float moveX = Input.GetAxis(\"Horizontal\") * Time.deltaTime * 110.0f; float moveZ = Input.GetAxis(\"Vertical\") * Time.deltaTime * 4f; transform.Rotate(0, moveX, 0); transform.Translate(0, 0, moveZ); if (Input.GetButtonDown(\"Fire2\")) //Fire2 is mouse 2nd click and left alt { selectedWeaponLocal += 1; if (selectedWeaponLocal > weaponArray.Length) { selectedWeaponLocal = 1; } CmdChangeActiveWeapon(selectedWeaponLocal); } } Weapon models Add the basic cube weapons first, change these later. Double click your player prefab to enter it Add a \"WeaponsHolder\" empty GameObject, with position and rotation at 0,0,0. Inside that GameObject, create a cube from unity menu, (GameObject, 3D object, cube)- Remove the box colliders. Rename this Weapon1 , change position and scale to match the below pictures. Duplicate weapon 1 for a Weapon 2, and change its scale and position, now you should have 2 different looking ‘weapons’! Part 14 Weapon switch finale. Add these 2 GameObjects to your PlayerScript.cs weapons array. Disable weapon 2, so only weapon 1 shows when spawning. Build and run! You should see each player switching weapons, and whatever your player has equipped, will auto show on new joining players (sync var and hook magic!)"
  },
  "Articles/Guides/DataTypes.html": {
    "href": "Articles/Guides/DataTypes.html",
    "title": "Data types",
    "keywords": "Data types The client and server can pass data to each other via RPC Methods , State Synchronization or via Network Messages Mirage supports a number of data types you can use with these, including: Basic c# types (byte, int, char, uint, UInt64, float, string, etc) Built-in Unity math type (Vector3, Quaternion, Rect, Plane, Vector3Int, etc) URI NetworkIdentity Game object with a NetworkIdentity component attached See important details in Game Objects section below. Structures with any of the above It's recommended to implement IEquatable<T> to avoid boxing, and to have the struct readonly because modifying one of fields doesn't cause a resync Classes as long as each field has a supported data type These will allocate garbage and will be instantiated new on the receiver every time they're sent. ScriptableObject as long as each field has a supported data type These will allocate garbage and will be instantiated new on the receiver every time they're sent. Arrays of any of the above Not supported with SyncVars or SyncLists ArraySegments of any of the above Not supported with SyncVars or SyncLists Game Objects Game Objects in SyncVars, SyncLists, and SyncDictionaries are fragile in some cases, and should be used with caution. As long as the game object already exists on both the server and the client, the reference should be fine. When the sync data arrives at the client, the referenced game object may not yet exist on that client, resulting in null values in the sync data. This is because interally Mirage passes the netId from the NetworkIdentity and tries to look it up on the client's NetworkIdentity.spawned dictionary. If the object hasn't been spawned on the client yet, no match will be found. It could be in the same payload, especially for joining clients, but after the sync data from another object. It could also be null because the game object is excluded from a client due to network visibility, e.g. NetworkProximityChecker . You may find that it's more robust to sync the NetworkIdentity.netID (uint) instead, and do your own lookup in NetworkIdentity.spawned to get the object, perhaps in a coroutine: public GameObject target; [SyncVar(hook = nameof(OnTargetChanged))] public uint targetID; void OnTargetChanged(uint _, uint newValue) { if (NetworkIdentity.spawned.TryGetValue(targetID, out NetworkIdentity identity)) target = identity.gameObject; else StartCoroutine(SetTarget()); } IEnumerator SetTarget() { while (target == null) { yield return null; if (NetworkIdentity.spawned.TryGetValue(targetID, out NetworkIdentity identity)) target = identity.gameObject; } } Custom Data Types Sometimes you don't want mirror to generate serialization for your own types. For example, instead of serializing quest data, you may want to serialize just the quest id, and the receiver can look up the quest by id in a predefined list. Sometimes you may want to serialize data which uses a different type not supported by Mirage, such as DateTime or System.Uri You can add support for any type by adding extension methods to NetworkWriter and NetworkReader . For example, to add support for DateTime , add this somewhere in your project: public static class DateTimeReaderWriter { public static void WriteDateTime(this NetworkWriter writer, DateTime dateTime) { writer.WriteInt64(dateTime.Ticks); } public static DateTime ReadDateTime(this NetworkReader reader) { return new DateTime(reader.ReadInt64()); } } ...then you can use DateTime in your [ServerRpc] or SyncList Inheritance and Polymorphism Sometimes you might want to send a polymorphic data type to your commands. Mirage does not serialize the type name to keep messages small and for security reasons, therefore Mirage cannot figure out the type of object it received by looking at the message. This code does not work out of the box. class Item { public string name; } class Weapon : Item { public int hitPoints; } class Armor : Item { public int hitPoints; public int level; } class Player : NetworkBehaviour { [ServerRpc] void CmdEquip(Item item) { // IMPORTANT: this does not work. Mirage will pass you an object of type item // even if you pass a weapon or an armor. if (item is Weapon weapon) { // The item is a weapon, // maybe you need to equip it in the hand } else if (item is Armor armor) { // you might want to equip armor in the body } } [ServerRpc] void CmdEquipArmor(Armor armor) { // IMPORTANT: this does not work either, you will receive an armor, but // the armor will not have a valid Item.name, even if you passed an armor with name } } CmdEquip will work if you provide a custom serializer for the Item type. For example: public static class ItemSerializer { const byte WEAPON = 1; const byte ARMOR = 2; public static void WriteItem(this NetworkWriter writer, Item item) { if (item is Weapon weapon) { writer.WriteByte(WEAPON); writer.WriteString(weapon.name); writer.WritePackedInt32(weapon.hitPoints); } else if (item is Armor armor) { writer.WriteByte(ARMOR); writer.WriteString(armor.name); writer.WritePackedInt32(armor.hitPoints); writer.WritePackedInt32(armor.level); } } public static Item ReadItem(this NetworkReader reader) { byte type = reader.ReadByte(); switch(type) { case WEAPON: return new Weapon { name = reader.ReadString(), hitPoints = reader.ReadPackedInt32() }; case ARMOR: return new Armor { name = reader.ReadString(), hitPoints = reader.ReadPackedInt32(), level = reader.ReadPackedInt32() }; default: throw new Exception($\"Invalid weapon type {type}\"); } } } Scriptable Objects People often want to send scriptable objects from the client or server. For example, you may have a bunch of swords created as scriptable objects and you want put the equipped sword in a syncvar. This will work fine, Mirage will generate a reader and writer for scriptable objects by calling ScriptableObject.CreateInstance and copy all the data. However the generated reader and writer are not suitable for every occasion. Scriptable objects often reference other assets such as textures, prefabs, or other types that can't be serialized. Scriptable objects are often saved in the in the Resources folder. Scriptable objects sometimes have a large amount of data in them. The generated reader and writers may not work or may be inneficient for these situations. Instead of passing the scriptable object data, you can pass the name and the other side can lookup the same object by name. This way you can have any kind of data in your scriptable object. You can do that by providing a custom reader and writer. Here is an example: [CreateAssetMenu(fileName = \"New Armor\", menuName = \"Armor Data\")] class Armor : ScriptableObject { public int Hitpoints; public int Weight; public string Description; public Texture2D Icon; // ... } public static class ArmorSerializer { public static void WriteArmor(this NetworkWriter writer, Armor armor) { // no need to serialize the data, just the name of the armor writer.WriteString(armor.name); } public static Armor ReadArmor(this NetworkReader reader) { // load the same armor by name. The data will come from the asset in Resources folder return Resources.Load<Armor>(reader.ReadString()); } }"
  },
  "Articles/Guides/DevServer/AWS/index.html": {
    "href": "Articles/Guides/DevServer/AWS/index.html",
    "title": "Amazon Web Services (AWS)",
    "keywords": "Amazon Web Services (AWS) During this section we will focus on using a Windows instance and connecting from a Windows computer. NOTE : AWS requires a payment method/credit card added before being able to use a Windows server. Don't forget to read up on the free tier limitations . During this example we will be using the free tier of the EC2 option, which gives us the possibility to use a Windows instance (if you have already added a payment method). For more information about which services offer a Free Tier, see AWS Free Tier . These are the steps we will go through from start to finish: Account creation Setting up an instance with the EC2 Management Console Configuring the server via RDP (Remote Desktop) Setting up the firewall to allow connections through Testing the connection 1. Account Creation Go to the Account creation page and sign up with your details and payment method (e.g. credit card). Adding the payment method is necessary to run a windows instance on AWS. 2. Setting up an instance with the EC2 Management Console After setting up your account you should be logged in. Always make sure you're in your correct region so it's a good habit to check in the top right corner. Change it to the closest location to you now. After this click on Services in the top left corner and click on EC2. This will bring you to the EC2 instance dashboard and ready to Launch your instance! Click on \"Launch Instance\" . There are 7 steps to creating your AWS Instance: Choose an Amazon Machine Image (AMI) Choose Instance Type Configure Instance Add Storage Add Tags Configure Security Group Review Step 1: Choose an Amazon Machine Image Scroll down until you see the Microsoft Windows Server 2019 Base (take the newest one if this is outdated). Make sure that the option you select has the \"Free Tier Eligible\" under the icon and click on \"Select\". Step 2: Choose Instance Type Make sure you choose the instance type with the \"free tier eligible\", at the time of writing this is the t2.micro instance. Click on \"Next: Configure Instance Details\" . Do not click on Review and Launch. Step 3: Configure Instance Nothing has to be changed at this step. Keep it default. Click on \"Next: Add Storage\" . Step 4: Add Storage Nothing has to be changed. Keep it default. The 30GB is more than you need but there will be an error if you choose a lower amount. Keep in mind that you can always click \"Previous\" if you need to return, you do not need to repeat the entire process if you make a mistake (unless you click Launch at the end). Click on \"Next: Add Tags\" to continue. Step 5: Add Tags Nothing has to be changed. Keep it default. Click on \"Next: Configure Security Groups\" Step 6: Configure Security Groups IMPORTANT STEP This makes it possible to connect to your instance from outside for: RDP (needed for this example) For clients connecting through port 7777 for your Mirage Project. SSH (if needed) Create a new security group and you can give it your own name and description. Add the following rules: RDP with source \"Anywhere\", Description can be whatever but put it as Remote Desktop Program. Custom UDP Rule with port 7777 and source \"Anywhere\", Description can be whatever but put it as Mirage. SSH with source \"Anywhere\", Description can be whatever but put it as SSH. SSH is not strictly necessary but can be used to remote connect to it through other means than the RDP. You can ignore the warning about the source as this is just a testing environment. In the future you might wish to restrict this but you will almost never know the clients' connection IP's beforehand. Click on \"Next: Review and Launch\" Step 7: Review Almost there! Make sure everything is correct and you are using the free tier, then click on \"Launch\" . One more thing: A window will pop up asking for your key pair. Just create a new one by selecting the dropdown: \"Create a new key pair\" and give it a name, click on \"Download Key Pair\" . Keep the key file (.PEM File) somewhere secure (To be 100% certain, back it up somewhere). YOU CANNOT ACCESS THE CREATED INSTANCE WITHOUT THIS KEY Now you can (finally) click on \"Launch Instances\" ! Go back to your EC2 dashboard by clicking on \"Services\" at the top left and clicking on EC2. Now you see you have \"Running Instances: 1\". Click on \"Running Instances\" to continue . A new instance might take around 5-10 minutes to set up. Refresh the page after 10 minutes if nothing changes. Now you did all this but you want to get ON the dedicated server right? Perfect! The next step will get you up and running! 3. Configuring the server via RDP (Remote Desktop) Time to get the RDP file so you can start connecting. There are a few things we'll need: RDP file with the key pair added to it Configure RDP file once downloaded to allow getting files from our C: drive or other drives (so you can easily get your zip project) Enter the windows Admin password once you start the RDP file Once you've done this, you should be able to continue using the same RDP file. RDP file with the key pair added to it Get the password before clicking Download Copy the Password for later Now click on \"Download Remote Desktop File\" . The RDP file will be downloaded. Configure RDP file for easy file access Go to your freshly downloaded RDP file and rightclick it and then click \"Edit\". Go to the third tab \"Local sources\", at the bottom click \"more\" under local devices and sources. On the new window select your C: drive or any other drive. This is your own computer your connecting from. For easy file exchange. Perfect! Now you can run the RDP file! The RDP file will ask a password. If you forgot your password you can get it back by rightclicking the instance and clicking on \"Get Windows Password\". You will be asked to re-enter your key pair (.PEM) file and decrypt the message. Once done you will be able to copy the password. There you have it! Now you have your password and Remote Desktop should show you logging into your dedicated server! Setting up the firewall to allow connections through Go to the windows firewall settings, go to the advanced firewall settings and go to inbound rules. Add a new rule and choose the port type. Select UDP and enter the 7777 port (or any other if you use another port in Mirage). Continue clicking next and keep things default. Close all the windows when done. AWESOME! You now have everything set up to accept incoming requests on port 7777 . 4. Testing the connection Before you can (finally) test out your server build of your project you need to get it on the dedicated server! Place your (zipped) server build at the root of your added drive (C: or another) to make it easier to find it fast. Go to \"My Computer\" and because of our previous changes to the RDP we should now see your local drive under \"Devices and Drives\". Double click it and because you placed your zipped server build on that drive, you should see it immediatly when it's done loading. Now unzip the project in a new folder on the dedicated server's desktop and run it. Want to test if it sees the 7777 port is open after you started your Mirage server? Get your IPv4 public IP from the EC2 Management Console from your instance and use it on your client to connect to that IP. Go to PortChecker and enter the Dedicated Server IP address and enter port 7777. NOTE: If you are not running your game / project then the port will be closed. It's only open when the server is running."
  },
  "Articles/Guides/DevServer/gcloud/index.html": {
    "href": "Articles/Guides/DevServer/gcloud/index.html",
    "title": "Google Cloud Services",
    "keywords": "Google Cloud Services This guide will explain how to set up a Linux server running on Google Cloud . Google cloud offers $300 free credits to new users for a limited time, and it also have \"Always free products\". See overview and docs for more information. Before you begin In the Cloud Console, on the project selector page, select or create a Cloud project. Note: If you don't plan to keep the resources that you create in this procedure, create a project instead of selecting an existing project. After you finish these steps, you can delete the project, removing all resources associated with the project. Go to the project selector page You may need to enable billing for your Google Cloud project. If you have free credits (see above) then these will be used first. Learn how to confirm billing is enabled for your project. Setting up a new Server Start by creating and configuring a new Compute Engine instance. In the Cloud Console, go to the VM instances page: Go to the VM instances page If this is your first instance you will see a dialog prompting you to create a new virtual machine Click Create to get started. On the Create an instance page, configure your instance as follows: Name your instance. This tutorial uses the instance name mirror-instance-demo throughout. Select the region and zone in which you want your instance to be hosted. This tutorial uses the region us-central1 (Iowa) and the zone us-central1-a throughout. Machine configuration depends on the size of your game. For a simple example we can use a small server. select N1 for series select f1-micro for machine type In the Boot disk section, click Change. The Boot disk dialog will pop up. Change the disk type to SSD Persistent Disk. Boot disk can be left as default 10gb standard persistent disk with Debian GNU/Linux 9 (stretch) for this tutorial. You may want to change it to best fit your needs. You can instead use an ssd or increase its size, however this will increase the monthly cost. Note: The monthly estimate should be shown at the top right next to Name To configure Network settings first example the Management, security, disks, networking, solo tenancy section, then click on the Networking tab. Set a Network tag, this will allow you to set up firewall rules later on. This tutorial use mirror-demo as the tag Set up a static IP address for your instance a) Under Network interfaces click on default and it will bring up a config menu b) Select the External IP dropdown and select Create IP address c) Enter a name for this ip and press Reserve . For this tutorial we will use mirror-demo-ip Create your instance. Press the Create button at the bottom of the page to finish set up and create your instance Configure Firewall This will allow other people to connect to your server using its IP and port In the Cloud Console, go to the Firewall page. Go to the Firewall page Click Create firewall rule. On the Create a firewall rule page, fill out the form as follows: Name: mirror-demo-rule Target tags: mirror-demo Source filter: IP ranges Source IP ranges: 0.0.0.0/0 Protocols or ports: Select UDP, and then enter port 7777 into the field provided. note UDP and port 7777 is default settings for socket, if you are using a different socket you will need to find out what settings that uses. Press Create to confirm setting and create the rule. Connect to your new instance Once your instance has finished being created you can press the SSH button to connect to your instance in your web browser Setting up the linux instance When you first connect you will need to set up a few things First update the list of packages sudo apt-get update Install screen and unzip sudo apt-get install -y screen unzip screen allows you to have multiple terminals, allows you do do other stuff while your game is running unzip unzips can be used to extract files from a ZIP file after you upload it to the instance Build your game Build your game with Target Platform Linux and Server Build ticked Upload and extract your game Once you have built your game zip the folder so that you can upload it to your server. In the SSH connection window click on the settings cogwheel and select Upload File then find and select your zipped build folder. This should upload the game folder to the home directory. If you need to go to the home directory you can use: cd ~ Note: the destination will be /home/username where username should be the cloud account you are logged into. Once your file has finished upload you can extract the files unzip ./mirror-demo.zip Run server Move into game folder cd mirror-demo Mark game as executable chmod +x ./mirror-demo.x86_64 You should now be able to run your game server! The following is optional but will most likely be useful Start your server in a detached screen screen -d -m -S mirrorServer ./mirror-demo.x86_64 -logfile ~/server.log The parts of the command above: screen -d -m will create the new terminal in detached mode -S mirrorServer name of the screen ./mirror-demo.x86_64 your game server file -logfile ~/server.log unity argument for log file location, this will create a log file in the home directory Create start file so you can start your server the same way each time a) create start.sh echo \"screen -d -m -S mirrorServer ./mirror-demo.x86_64 -logfile ~/server.log\" > ./start.sh b) mark as executable chmod +x ./start.sh Run your server ./start.sh Using Screen Here are a few useful commands for using screen List active screens screen -ls Attach to existing screen, process-id is show when calling screen -ls screen name is given by -S when creating the screen, for this tutorial it was mirrorServer screen -r <process-id | screen name> Detach from screen press CTRL A + D Stop your game Once attached to a screen you can press CTRL + C to stop the process, this will stop your game and close the screen View log files You can use the -logfile ~/path/to/log.log argument for Unity when starting your game server. This will cause the logs to be written to a file instead of to the terminal. This will means recent logs wont show up in screen -r . you can use the tail command to view the the end of the log file tail -n 50 ./server.log you can use the -n argument to set how many lines to show you can use the -f argument follow the end of the file stream showing you any new logs that are written to the file in real time. You will need to press CTRL + C to exit follow mode Clean up after tutorial If you used an existing project you will need to delete the following: VM instance Firewall rule If you have created a new project you should be able to just delete the project. Go to the Manage resources page"
  },
  "Articles/Guides/DevServer/index.html": {
    "href": "Articles/Guides/DevServer/index.html",
    "title": "Development Servers",
    "keywords": "Development Servers During this guide we will set up a dedicated server and place the server build of our project on the dedicated server. IMPORTANT: Before we begin, there are some potential problems you may face, as no server is truly 'free': Service providers are NOT free. Most of the time you can start with free trials for a limited time, after x amount of time or x amount of used resources the trial will end and you might incur payment. Always read the providers free trial limitations. Some providers require a payment method for using a Windows instance, however as long as you do not go over the limitations the provider should not bill you. NOTE : Mirage is not affiliated and can not be held responsible for any charges or fees associated with service providers like AWS , Microsoft Azure , Google Compute Engine and others... Introduction During your development with Mirage you will need to test your project as a client and as a server. There are a few possible ways to test your project: Default build: Host/client as one and connecting with another build/editor to the host locally on 1 computer. Server build: Server is a separate executable. You can place it on your computer run it and connect to it as a client. Dedicated Server: Same as the server build but placed on an external machine, you connect to it with the server's external ip. This guide will focus on the \"Dedicated Server\" option. There are multiple providers and even self hosted dedicated machines. All possibilities still go through the same process to ensure connectivity to clients. A few requirements for a dedicated server: Port forwarding (Not strictly necessary but makes everything a lot easier without needing NAT punchthrough) Firewall exceptions Computer/machine that stays online and accessible whenever you need it. In the upcoming sections we will go through setting up a provider with the free tier. Always double check that you do not select a paid feature as this is purely meant as a short term period to test out basic functionality during development of your project. Amazon Web Services (AWS) See AWS setup Google Compute Engine See this guides: Google cloud setup Microsoft Azure Microsoft Azure (as of time of writing) allows setting up a windows instance during the free trial without an active payment method. To be added Self Hosted Dedicated Server A self hosted dedicated server is the same as the other providers but you provide the hardware, internet connection and costs for running the computer. Most of the time this is the cheapest option during development if you already have an extra machine. Preferably you would put the machine on a different network (to simulate the conditions as the other providers). This would mean you could connect to the machine and put your server build on whenever you need and have access to the router and security settings of the machine for port forwarding and firewall exceptions. In essence, this is the simplest set up but does require extra hardware."
  },
  "Articles/Guides/FAQ.html": {
    "href": "Articles/Guides/FAQ.html",
    "title": "FAQ",
    "keywords": "FAQ work in progress How do I use this feature? How to Send/Sync custom data types? (click me) Mirage can automatically create Serialization functions for many custom data types when your scripts are compiled. For example, Mirage will automatically create a functions for MyCustomStruct so that it can be sent without any extra work. [ClientRpc] public void RpcDoSomething(MyCustomStruct data) { // do stuff here } struct MyCustomStruct { int someNumber; Vector3 somePosition; } For More details DataTypes Serialization How to Connect How to connect to games on same PC (click me) Make sure the networkAddress field on NetworkManager or the Hud is set up localHost How to connect to a different PC/Device on same network (click me) Set the networkAddress field to the LAN IP of the host 192.168.x.x In some cases you may need additional steps, check below To check ip on Windows you can open powershell and use the ipconfig command, then under your current adapter (ethernet/wifi/etc) look for IPv4 Address IPv4 Address. . . . . . . . . . . : 192.168.x.x How to connect to a different PC/Device over the internet (click me) Set the networkAddress field to be the IP address of the host (google 'whats my IP') This section does not cover relays/dedicated vps/headless features For this to work, you will need to do some of the following, most of these depend on your set up and router Port forward : you'll have to login your Router Either forward your game port (default is 7777) for your PC's local IP. (192.168.1.20 for example) Or the quick (but less safe) add that local IP to DMZ. PC Firewalls : You can turn it off for a quick test (And turn it back on later) manually allow the editor and any builds you create it in firewalls settings. Try from a build rather than the Unity Editor Some anti virus/phones may have additional blocking. You can turn it off for a quick test (And turn it back on later) In rare cases ISPs or companies/schools block ports and connections, this is harder to adjust yourself. If you need more help it is best to google for guide for your setup and router. An alternative to the above is to use a dedicated server (vps) or use a relay."
  },
  "Articles/Guides/GameObjects/index.html": {
    "href": "Articles/Guides/GameObjects/index.html",
    "title": "Networked Game Objects",
    "keywords": "Networked Game Objects Networked game objects are game objects which are controlled and synchronized by Mirage’s networking system. Using synchronized networked game objects, you can create a shared experience for all the players who are playing an instance of your game. They see and hear the same events and actions - even though that may be from their own unique viewpoints within your game. Multiplayer games in Mirage are typically built using Scenes that contain a mix of networked game objects and regular (non-networked) game objects. The networked game objects are those which move or change during gameplay in a way that needs to be synchronized across all users who are playing the game together. Non-networked game objects are those which either don’t move or change at all during gameplay (for example, static obstacles like rocks or fences), or game objects which have movement or changes that don’t need to be synchronized across players (for example, a gently swaying tree or clouds passing by in the background of your game). A networked game object is one which has a Network Identity component attached. However, a Network Identity component alone is not enough for your game object to be functional and active in your multiplayer game. The Network Identity component is the starting point for synchronization, and it allows the Network Manager to synchronize the creation and destruction of the game object, but other than that, it does not specify which properties of your game object should be synchronized. What exactly should be synchronized on each networked game object depends on the type of game you are making, and what each game object’s purpose is. Some examples of what you might want to synchronize are: The position and rotation of moving game objects such as the players and non-player characters. The animation state of an animated game object The value of a variable, for example how much time is left in the current round of a game, or how much energy a player has. As a convenience, the initial position, rotation and scale of the object is automatically synchronized by the NetworkIdentity. Any other state you wish to synchronize accross the network needs to go in a NetworkBehaviour inside your GameObject. When an object is created in the server, you must tell Mirage to create it in the clients and keep track of it. This is known as Spawning."
  },
  "Articles/Guides/GameObjects/Lifecycle.html": {
    "href": "Articles/Guides/GameObjects/Lifecycle.html",
    "title": "Lifecycle of a GameObject",
    "keywords": "Lifecycle of a GameObject Networked GameObjects go through several lifecycle states. You can add custom logic to the object lifecycle events by subscribing to the corresponding event in NetworkIdentity Server Client Instantiate Start Server Instantiate StartAuthority StartClient StartLocalPlayer StopAuthority StopServer Destroy StopClient Destroy Note: In Mirror and UNet, you can add logic to lifecycle events by overriding methods in NetworkBehaviour In Mirage you do it by subscribing to events in NetworkIdentity Server Instantiate This is done usual by you using Unity's GameObject.Instantiate This goes through the regular GameObject Lifecycle events such as Awake, Start, Enabled, etc.. Basically this is outside Mirage's control. Scene Objects are normally instantiated as part of the scene. Server Start To start a server object, spawn it . If you wish to perform some logic when the object starts in the server, add a component in your gameObject with your own method and subscribe to OnStartServer For example: class MyComponent : MonoBehaviour { public void Awake() { GetComponent<NetworkIdentity>.OnStartServer.AddListener(OnStartServer); } public void OnStartServer() { Debug.Log(\"The object started on the server\") } } You can also simply drag your OnStartServer method in the OnStartServer event in the inspector. During the spawn a message will be sent to all the clients telling them to spawn the object. The message will include all the data in SyncVars , SyncLists , SyncSet , SyncDictionary Client Instantiate When an object is spawned, the server will send a message to the clients telling it to spawn a GameObject and provide an asset id. By default, Mirage will look up all the known prefabs looking for that asset id. Make sure to add your prefabs in the NetworkClient list of prefabs. Then Mirage will instantiate the prefab, and it will go through the regular Unity Lifecycle events. You can customize how objects are instantiated using Spawn Handlers. Do not add Network logic to these events. Instead, use these events to subscribe to network events in NetworkIdentity. Immediatelly after the object is instantiated, all the data is updated to match the data in the server. Client Start Authority If the object is owned by this client, then NetworkIdentity will invoke the OnAuthorityChanged Subscribe to this event either by using AddListener , or adding your method to the event in the inspector. Note the Authority can be revoked, and granted again. Every time the client gains authority, this event will be invoked again. Start Client The event OnStartClient will be invoked. Subscribe to this event by using AddListener or adding your method in the event in the inspector Start Local Player If the object spawned is the character object , the event OnStartLocalPlayer is invoked. Subscribe to this event by using AddListener or adding your method in the event in the inspector Stop Authority If the object loses authority over the object, then NetworkIdentity will invoke the OnAuthorityChanged Subscribe to this event either by using AddListener , or adding your method to the event in the inspector. Note the Authority can be revoked, and granted again. Every time the client loses authority, this event will be invoked again. Server Stop Either because the client disconnected, the server stopped, you called Destroy(GameObject, Boolean) the object may stop in the server. During this state, a message is sent to all the clients to unspawn the object. The event OnStopServer will be invoked. Subscribe to this event either by using AddListener , or adding your method to the event in the inspector. Server Destroy By default, the server will call GameObject.Destroy to destroy the object. Note that if it is a Scene Object the server will invoke GameObject.SetActive(false) instead. The regular unity lifecycle events apply. Note that the server will destroy the object, and will not wait for the clients to unspawn their objects. Stop Client This can be triggered either because the client received an Unspawn message or the client was disconnected The event OnStopClient will be invoke. Subscribe to this event either by using AddListener , or adding your method to the event in the inspector. Use it to cleanup any network related resource used by this object. Client Destroy After an object is stopped on the client, by default unity will call GameObject.Destroy if it is a prefab Spawned Object Or it will call GameObject.SetActive(false) if it is a Scene Object You can customize how objects are destroying using Spawn Handlers The normal Unity lifecycle events applies."
  },
  "Articles/Guides/GameObjects/NetworkBehaviour.html": {
    "href": "Articles/Guides/GameObjects/NetworkBehaviour.html",
    "title": "NetworkBehaviour",
    "keywords": "NetworkBehaviour See also NetworkBehaviour in the API Reference. Network Behaviour scripts work with game objects that have a NetworkIdentity component. These scripts can perform high-level API functions such as ServerRpcs, ClientRpcs and SyncVars. With the server-authoritative system of Mirage, the server must use the NetworkServer.Spawn function to spawn game objects with Network Identity components. Spawning them this way assigns them a netId and creates them on clients connected to the server. Note: This is not a component that you can add to a game object directly. Instead, you must create a script which inherits from NetworkBehaviour (instead of the default MonoBehaviour ), then you can add your script as a component to a game object. NetworkBehaviour scripts have the following features: Synchronized variables Server and Client functions Server RPC Calls Client RPC Calls Callbacks Note: NetworkBehaviors in Mirror and in UNet provide virtual functions as a way for you to add logic in response to lifecycle events. Mirage does not, instead add listeners to the events in NetworkIdentity . Synchronized variables Your component can have data which is automatically synchronized from the server to the client. You can use SyncVars as well as SyncLists , SyncSet and SyncDictionary inside a NetworkBehaviour. They will be automatically propagated to the clients whenever their value change in the server. Server and Client functions You can tag member functions in NetworkBehaviour scripts with custom attributes to designate them as server-only or client-only functions. ServerAttribute will check that the function is called in the server. Likewise, ClientAttribute will check if the function is called in the client. For more information, see Attributes . Server RPC Calls To execute code on the server, you must use Server RPC calls. The high-level API is a server-authoritative system, so ServerRpc are the only way for a client to trigger some code on the server. Only player game objects can send ServerRpcs. When a client player game object sends a ServerRpc, that ServerRpc runs on the corresponding player game object on the server. This routing happens automatically, so it is impossible for a client to send a ServerRpc for a different player. To define a Server RPC Call in your code, you must write a function which has: A name that begins with Cmd The ServerRpc attribute Server RPC Calls are called just by invoking the function normally on the client. Instead of the ServerRpc function running on the client, it is automatically invoked on the corresponding player game object on the server. Server RPC Calls are type-safe, have built-in security and routing to the player, and use an efficient serialization mechanism for the arguments to make calling them fast. See Server RPC and related sections for more information. Client RPC Calls Client RPC calls are a way for server game objects to make things happen on client game objects. Client RPC calls are not restricted to player game objects, and may be called on any game object with a Network Identity component. To define a Client RPC call in your code, you must write a function which: Has a name that begins with Rpc Has the ClientRpc attribute See Client RPC and related sections for more information. Network Callbacks Callbacks can be used to make sure code is executed at the right time. The network callbacks are found inside NetworkIdentity so they can also be used outside of an NetworkBehaviour. See NetworkBehaviour Callbacks and related sections for more information."
  },
  "Articles/Guides/GameObjects/PickupDropChild.html": {
    "href": "Articles/Guides/GameObjects/PickupDropChild.html",
    "title": "Pickups, Drops, and Child Objects",
    "keywords": "Pickups, Drops, and Child Objects Frequently the question comes up about how to handle objects that are attached as children of the player prefab that all clients need to know about and synchronize, such as which weapon is equipped, picking up networked scene objects, and players dropping objects into the scene. Mirage cannot support multiple Network Identity components within an object hierarchy. Since the character object must have a Network Identity, none of its descendant objects can have one. Child Objects Let's start with the simple case of a single attachment point that is somewhere down the hierarchy of our Player, such as a hand at the end of an arm. In a script that inherits from NetworkBehaviour on the Player Prefab, we'd have a GameObject reference where the attachment point can be assigned in the inspector, a SyncVar enum with various choices of what the player is holding, and and a Hook for the SyncVar to swap out the art of the held item based on the new value. In the image below, Kyle has an empty game object, RightHand , added to the wrist, and some prefabs to be equipped (Ball, Box, Cylinder), and a Player Equip script to handle them. NOTE : The item prefabs are art only ...they have no scripts, and they must not have networking components. They can have monobehaviour-based scripts, of course, which can be referenced and called from ClientRpc's on the player prefab. The inspector shows RightHand assigned in 2 places, the Player Equip script, as well as the target of the Network Transform Child component, so we could adjust the relative position of the attachment point (not the art) for all clients as needed. Below is the Player Equip script to handle the changing of the equipped item, and some notes for consideration: While we could just have all the art items attached at design time and just enable / disable them based on the enum, this doesn't scale well to a lot of items and if they have scripts on them for how they behave in the game, such as animations, special effects, etc. it could get ugly pretty fast, so this example locally instantiates and destroys instead as a design choice. The example makes no effort to deal with position offset between the item and the attach point, e.g. having the grip or handle of an item align with the hand. This is best dealt with in a monobehaviour script on the item that has public fields for the local position and rotation that can be set in the designer and a bit of code in Start to apply those values in local coordinates relative to the parent attach point. using UnityEngine; using System.Collections; using Mirage; public enum EquippedItem : byte { nothing, ball, box, cylinder } public class PlayerEquip : NetworkBehaviour { public GameObject sceneObjectPrefab; public GameObject rightHand; public GameObject ballPrefab; public GameObject boxPrefab; public GameObject cylinderPrefab; [SyncVar(hook = nameof(OnChangeEquipment))] public EquippedItem equippedItem; void OnChangeEquipment(EquippedItem oldEquippedItem, EquippedItem newEquippedItem) { StartCoroutine(ChangeEquipment(newEquippedItem)); } // Since Destroy is delayed to the end of the current frame, we use a coroutine // to clear out any child objects before instantiating the new one IEnumerator ChangeEquipment(EquippedItem newEquippedItem) { while (rightHand.transform.childCount > 0) { Destroy(rightHand.transform.GetChild(0).gameObject); yield return null; } switch (newEquippedItem) { case EquippedItem.ball: Instantiate(ballPrefab, rightHand.transform); break; case EquippedItem.box: Instantiate(boxPrefab, rightHand.transform); break; case EquippedItem.cylinder: Instantiate(cylinderPrefab, rightHand.transform); break; } } void Update() { if (!isLocalPlayer) return; if (Input.GetKeyDown(KeyCode.Alpha0) && equippedItem != EquippedItem.nothing) CmdChangeEquippedItem(EquippedItem.nothing); if (Input.GetKeyDown(KeyCode.Alpha1) && equippedItem != EquippedItem.ball) CmdChangeEquippedItem(EquippedItem.ball); if (Input.GetKeyDown(KeyCode.Alpha2) && equippedItem != EquippedItem.box) CmdChangeEquippedItem(EquippedItem.box); if (Input.GetKeyDown(KeyCode.Alpha3) && equippedItem != EquippedItem.cylinder) CmdChangeEquippedItem(EquippedItem.cylinder); } [ServerRpc] void CmdChangeEquippedItem(EquippedItem selectedItem) { equippedItem = selectedItem; } } Dropping Items Now that we can equip the items, we need a way to drop the current item into the world as a networked item. Remember that, as child art, the item prefabs have no networking components on them at all. First, let's add one more Input to the Update method above, and a CmdDropItem method: void Update() { if (!isLocalPlayer) return; if (Input.GetKeyDown(KeyCode.Alpha0) && equippedItem != EquippedItem.nothing) CmdChangeEquippedItem(EquippedItem.nothing); if (Input.GetKeyDown(KeyCode.Alpha1) && equippedItem != EquippedItem.ball) CmdChangeEquippedItem(EquippedItem.ball); if (Input.GetKeyDown(KeyCode.Alpha2) && equippedItem != EquippedItem.box) CmdChangeEquippedItem(EquippedItem.box); if (Input.GetKeyDown(KeyCode.Alpha3) && equippedItem != EquippedItem.cylinder) CmdChangeEquippedItem(EquippedItem.cylinder); if (Input.GetKeyDown(KeyCode.X) && equippedItem != EquippedItem.nothing) CmdDropItem(); } [ServerRpc] void CmdDropItem() { // Instantiate the scene object on the server Vector3 pos = rightHand.transform.position; Quaternion rot = rightHand.transform.rotation; GameObject newSceneObject = Instantiate(sceneObjectPrefab, pos, rot); // set the RigidBody as non-kinematic on the server only (isKinematic = true in prefab) newSceneObject.GetComponent<Rigidbody>().isKinematic = false; SceneObject sceneObject = newSceneObject.GetComponent<SceneObject>(); // set the child object on the server sceneObject.SetEquippedItem(equippedItem); // set the SyncVar on the scene object for clients sceneObject.equippedItem = equippedItem; // set the player's SyncVar to nothing so clients will destroy the equipped child item equippedItem = EquippedItem.nothing; // Spawn the scene object on the network for all to see NetworkServer.Spawn(newSceneObject); } In the image above, there's a sceneObjectPrefab field that is assigned to a prefab that will act as a container for our item prefabs. The SceneObject prefab has a SceneObject script with a SyncVar like the Player Equip script, and a SetEquippedItem method that takes the shared enum value as a parameter. using UnityEngine; using System.Collections; using Mirage; public class SceneObject : NetworkBehaviour { [SyncVar(hook = nameof(OnChangeEquipment))] public EquippedItem equippedItem; public GameObject ballPrefab; public GameObject boxPrefab; public GameObject cylinderPrefab; void OnChangeEquipment(EquippedItem oldEquippedItem, EquippedItem newEquippedItem) { StartCoroutine(ChangeEquipment(newEquippedItem)); } // Since Destroy is delayed to the end of the current frame, we use a coroutine // to clear out any child objects before instantiating the new one IEnumerator ChangeEquipment(EquippedItem newEquippedItem) { while (transform.childCount > 0) { Destroy(transform.GetChild(0).gameObject); yield return null; } // Use the new value, not the SyncVar property value SetEquippedItem(newEquippedItem); } // SetEquippedItem is called on the client from OnChangeEquipment (above), // and on the server from CmdDropItem in the PlayerEquip script. public void SetEquippedItem(EquippedItem newEquippedItem) { switch (newEquippedItem) { case EquippedItem.ball: Instantiate(ballPrefab, transform); break; case EquippedItem.box: Instantiate(boxPrefab, transform); break; case EquippedItem.cylinder: Instantiate(cylinderPrefab, transform); break; } } } In the run-time image below, the Ball(Clone) is attached to the RightHand object, and the Box(Clone) is attached to the SceneObject(Clone), which is shown in the inspector. The art prefabs have simple colliders on them (sphere, box, capsule). If your art item has a mesh collider, it must be marked as Convex to work with the RigidBody on the SceneObject container. Pickup Items Now that we have a box dropped in the scene, we need to pick it up again. To do that, a CmdPickupItem method is added to the Player Equip script: // CmdPickupItem is public because it's called from a script on the SceneObject [ServerRpc] public void CmdPickupItem(GameObject sceneObject) { // set the player's SyncVar so clients can show the equipped item equippedItem = sceneObject.GetComponent<SceneObject>().equippedItem; // Destroy the scene object NetworkServer.Destroy(sceneObject); } This method is simply called from OnMouseDown in the Scene Object script: void OnMouseDown() { NetworkClient.connection.identity.GetComponent<PlayerEquip>().CmdPickupItem(gameObject); } Since the SceneObject(Clone) is networked, we can pass it directly through to CmdPickupItem on the character object to set the equipped item SyncVar and destroy the scene object. For this entire example, the only prefab that needs to be registered with Network Manager besides the Player is the SceneObject prefab."
  },
  "Articles/Guides/GameObjects/SceneObjects.html": {
    "href": "Articles/Guides/GameObjects/SceneObjects.html",
    "title": "Scene Game Objects",
    "keywords": "Scene Game Objects There are two types of networked game objects in Mirage’s multiplayer system: Those that are created dynamically at runtime Those that are saved as part of a Scene Game objects that are created dynamically at runtime use the multiplayer Spawning system, and the prefabs they are instantiated from must be registered in the Network Manager’s list of networked game object prefabs. However, networked game objects that you save as part of a Scene (and therefore already exist in the Scene when it is loaded) are handled differently. These game objects are loaded as part of the Scene on both the client and server, and exist at runtime before any spawn messages are sent by the multiplayer system. When the Scene is loaded, all networked game objects in the Scene are disabled on both the client and the server. Then, when the Scene is fully loaded, the Network Manager automatically processes the Scene’s networked game objects, registering them all (and therefore causing them to be synchronized across clients), and enabling them, as if they were spawned at runtime. Networked game objects will not be enabled until a client has requested a character object. Saving networked game objects in your Scene (rather than dynamically spawning them after the scene has loaded) has some benefits: They are loaded with the level, so there will be no pause at runtime. They can have specific modifications that differ from prefabs Other game object instances in the Scene can reference them, which can avoid you having to use code to finding the game objects and make references to them up at runtime. When the Network Manager spawns the networked Scene game objects, those game objects behave like dynamically spawned game objects. Mirage sends them updates and ClientRPC calls. If a Scene game object is destroyed on the server before a client joins the game, then it is never enabled on new clients that join. When a client connects, the client is sent an ObjectSpawnScene spawn message for each of the Scene game objects that exist on the server, that are visible to that client. This message causes the game object on the client to be enabled, and has the latest state of that game object from the server in it. This means that only game objects that are visible to the client, and not destroyed on the server, are activated on the client. Like regular non-Scene game objects, these Scene game objects are started with the latest state when the client joins the game."
  },
  "Articles/Guides/GameObjects/SpawnObject.html": {
    "href": "Articles/Guides/GameObjects/SpawnObject.html",
    "title": "Spawning Game Objects",
    "keywords": "Spawning Game Objects In Unity, you usually “spawn” (that is, create) new game objects with Instantiate . However, in Mirage, the word “spawn” means something more specific. In the server-authoritative model of the Mirage, to “spawn” a game object on the server means that the game object is created on clients connected to the server, and is managed by the spawning system. To spawn an object on the server you need to Instantiate the prefab and then call Spawn on the new object. This will assign a NetId to the object and send a SpawnMessage to clients. var boxGo = Instantiate(boxPrefab); ServerObjectManager.Spawn(boxGo); Once the game object is spawned using this system, state updates are sent to clients whenever the game object changes on the server. When Mirage destroys the game object on the server, it also destroys it on the clients. The server manages spawned game objects alongside all other networked game objects, so that if another client joins the game later, the server can spawn the game objects on that client. These spawned game objects have a unique network instance ID called “netId” that is the same on the server and clients for each game object. The unique network instance ID is used to route messages set across the network to game objects, and to identify game objects. When the server spawns a game object with a Network Identity component, the game object spawned on the client has the same “state”. This means it is identical to the game object on the server; it has the same Transform, movement state, and (if Network Transform and SyncVars are used) synchronized variables. Therefore, client game objects are always up-to-date when Mirage creates them. This avoids issues such as game objects spawning at the wrong initial location, then reappearing at their correct position when a state update arrives. A game object Prefab must have a Network Identity component before trying to register it with the Network Manager. To register a Prefab with the Client Object Manager in the Editor, select the Network Manager game object, and in the Inspector, navigate to the Client Object Manager component. Click the triangle next to Spawn Prefabs to open the settings, click the plus (+) button. Drag and drop Prefabs into the empty field to assign them to the list. For automatic registering click the Register all prefabs button. Note This searches entire project for prefabs / objects that have a network identity component on it and register it for you. Spawning Without Network Manager For more advanced users, you may find that you want to register Prefabs and spawn game objects without using the Network Manager component. To spawn game objects without using the Network Manager, you can handle the Prefab registration yourself via script. Use the ClientScene.RegisterPrefab method to register Prefabs to the Network Manager. using UnityEngine; using Mirage; public class MyNetworkManager : MonoBehaviour { public GameObject treePrefab; public ClientObjectManager; public NetworkClient; public NetworkServer; public ServerObjectManager; void Start() { ClientObjectManager = FindObjectOfType<ClientObjectManager>(); NetworkClient = FindObjectOfType<NetworkClient>(); NetworkServer = FindObjectOfType<NetworkServer>(); ServerObjectManager = FindObjectOfType<NetworkServer>(); } // Register prefab and connect to the server public void ClientConnect() { ClientObjectManager.spawnPrefabs.Add(treePrefab); NetworkClient.Connect(\"localhost\"); NetworkClient.MessageHandler.RegisterHandler<ConnectMessage>(OnClientConnect); } void OnClientConnect(NetworkConnection conn, ConnectMessage msg) { Debug.Log(\"Connected to server: \" + conn); } } In this example, you create an empty game object to act as the Network Manager, then create and attach the MyNetworkManager script (above) to that game object. Create a prefab that has a Network Identity component attached to it, and drag that onto the treePrefab slot on the MyNetworkManager component in the Inspector. This ensures that when the server spawns the tree game object, it also creates the same kind of game object on the clients. Registering prefabs ensures that there is no stalling or loading time for creating the Asset. For the script to work, you also need to add code for the server. Add this to the MyNetworkManager script: public void ServerListen() { // start listening, and allow up to 4 connections NetworkServer.StartServer(); NetworkServer.MessageHandler.RegisterHandler<ConnectMessage>(OnServerConnect); NetworkServer.MessageHandler.RegisterHandler<ReadyMessage>(OnClientReady); } // When client is ready spawn a few trees void OnClientReady(NetworkConnection conn, ReadyMessage msg) { Debug.Log(\"Client is ready to start: \" + conn); SpawnTrees(); } void SpawnTrees() { int x = 0; for (int i = 0; i < 5; ++i) { GameObject treeGo = Instantiate(treePrefab, new Vector3(x++, 0, 0), Quaternion.identity); ServerObjectManager.Spawn(treeGo); } } void OnServerConnect(NetworkConnection conn, ConnectMessage msg) { Debug.Log(\"New client connected: \" + conn); } The server does not need to register anything, as it knows what game object is being spawned (and the asset ID is sent in the spawn message). The client needs to be able to look up the game object, so it must be registered on the client. When writing your own network manager, it’s important to make the client ready to receive state updates before calling the spawn command on the server, otherwise they won’t be sent. If you’re using Mirage’s built-in Network Manager component, this happens automatically. For more advanced uses, such as object pools or dynamically created Assets, you can use the ClientObjectManager.RegisterSpawnHandler method, which allows callback functions to be registered for client-side spawning. See documentation on Custom Spawn Functions for an example of this. If the game object has a network state like synchronized variables, then that state is synchronized with the spawn message. In the following example, this script is attached to the tree Prefab: using UnityEngine; using Mirage; public class Tree : NetworkBehaviour { [SyncVar] public int numLeaves; void Start() { Identity.OnStartClient.AddLisenter(OnStartClient); } public override void OnStartClient() { Debug.Log(\"Tree spawned with leaf count \" + numLeaves); } } With this script attached, you can change the numLeaves variable and modify the SpawnTrees function to see it accurately reflected on the client: void SpawnTrees() { int x = 0; for (int i = 0; i < 5; ++i) { GameObject treeGo = Instantiate(treePrefab, new Vector3(x++, 0, 0), Quaternion.identity); Tree tree = treeGo.GetComponent<Tree>(); tree.numLeaves = Random.Range(10,200); Debug.Log(\"Spawning leaf with leaf count \" + tree.numLeaves); ServerObjectManager.Spawn(treeGo); } } Attach the Tree script to the treePrefab script created earlier to see this in action. Constraints A NetworkIdentity must be on the root game object of a spawnable Prefab. Without this, the Network Manager can’t register the Prefab. Game Object Creation Flow The actual flow of internal operations that takes place for spawning game objects is: Prefab with Network Identity component is registered as spawnable. game object is instantiated from the Prefab on the server. Game code sets initial values on the instance (note that 3D physics forces applied here do not take effect immediately). ServerObjectManager.Spawn is called with the instance. The state of the SyncVars on the instance on the server are collected by calling OnSerialize on [Network Behaviour] components. A network message of type ObjectSpawn is sent to connected clients that includes the SyncVar data. OnStartServer is called on the instance on the server, and isServer is set to true Clients receive the ObjectSpawn message and create a new instance from the registered Prefab. The SyncVar data is applied to the new instance on the client by calling OnDeserialize on Network Behaviour components. OnStartClient is called on the instance on each client, and isClient is set to true As game play progresses, changes to SyncVar values are automatically synchronized to clients. This continues until game ends. ServerObjectManager.Destroy is called on the instance on the server. A network message of type ObjectDestroy is sent to clients. OnNetworkDestroy is called on the instance on clients, then the instance is destroyed. Player Game Objects Player game objects in the HLAPI work slightly differently to non-player game objects. The flow for spawning player game objects with the Network Manager is: Prefab with NetworkIdentity is registered as the PlayerPrefab Client connects to the server Client calls AddPlayer , network message of type MsgType.AddPlayer is sent to the server Server receives message and calls CharacterSpawner.OnServerAddPlayer game object is instantiated from the Player Prefab on the server ServerObjectManager.AddCharacter is called with the new player instance on the server The player instance is spawned - you do not have to call ServerObjectManager.Spawn for the player instance. The spawn message is sent to all clients like on a normal spawn. A network message of type Owner is sent to the client that added the player (only that client!) The original client receives the network message OnStartLocalPlayer is called on the player instance on the original client, and IsLocalPlayer is set to true Note That OnStartLocalPlayer is called after OnStartClient , because it only happens when the ownership message arrives from the server after the player game object is spawned, so isLocalPlayer is not set in OnStartClient . Because OnStartLocalPlayer is only called for the client’s local player game object, it is a good place to perform initialization that should only be done for the local player. This could include enabling input processing, and enabling camera tracking for the player game object. Spawning Game Objects with Client Authority To spawn game objects and assign authority of those game objects to a particular client, use ServerObjectManager.Spawn , which takes as an argument the INetworkPlayer of the client that is to be made the authority. For these game objects, the property hasAuthority is true on the client with authority, and OnStartAuthority is called on the client with authority. That client can issue Server RPCs for that game object. On other clients (and on the host), hasAuthority is false. For example, the tree spawn example above can be modified to allow the tree to have client authority like this (note that we now need to pass in a Network Player game object for the owning client’s connection): void SpawnTrees(INetworkPlayer player) { int x = 0; for (int i = 0; i < 5; ++i) { GameObject treeGo = Instantiate(treePrefab, new Vector3(x++, 0, 0), Quaternion.identity); Tree tree = treeGo.GetComponent<Tree>(); tree.numLeaves = Random.Range(10,200); Debug.Log(\"Spawning leaf with leaf count \" + tree.numLeaves); ServerObjectManager.Spawn(treeGo, player); } } The Tree script can now be modified to send a Server RPC Call to the server: public void ClientConnect() { ClientObjectManager.spawnPrefabs.Add(treePrefab); NetworkClient.Connect(\"localhost\"); NetworkClient.MessageHandler.RegisterHandler<ConnectMessage>(OnClientConnect); NetworkClient.Player.Identity.OnAuthorityChanged.AddListener(OnStartAuthority); } public override void OnStartAuthority(bool changed) { CmdMessageFromTree(\"Tree with \" + numLeaves + \" reporting in\"); } [ServerRpc] void CmdMessageFromTree(string msg) { Debug.Log(\"Client sent a tree message: \" + msg); } Note that you can’t just add the CmdMessageFromTree call into OnStartClient , because at that point the authority has not been set yet, so the call would fail."
  },
  "Articles/Guides/GameObjects/SpawnObjectCustom.html": {
    "href": "Articles/Guides/GameObjects/SpawnObjectCustom.html",
    "title": "Custom Spawn Functions",
    "keywords": "Custom Spawn Functions You can use spawn handler functions to customize the default behavior when creating spawned game objects on the client. Spawn handler functions ensure you have full control of how you spawn the game object, as well as how you destroy it. Use ClientObjectManager.RegisterSpawnHandler or ClientObjectManager.RegisterPrefab to register functions to spawn and destroy client game objects. The server creates game objects directly, and then spawns them on the clients through this functionality. This functions takes either the asset ID or a prefab and two function delegates: one to handle creating game objects on the client, and one to handle destroying game objects on the client. The asset ID can be a dynamic one, or just the asset ID found on the prefab game object you want to spawn. The spawn / unspawn delegates will look something like this: Spawn Handler NetworkIdentity SpawnDelegate(SpawnMessage msg) { // do stuff here } UnSpawn Handler void UnSpawnDelegate(NetworkIdentity spawned) { // do stuff here } When a prefab is saved it's PrefabHash field will be automatically set. If you want to create prefabs at runtime you will have to generate a new Hash instead. Generate prefab at runtime // Create a hash that can be generated on both server and client // using a string and GetStableHashCode is a good way to do this int coinHash = \"MyCoin\".GetStableHashCode(); // register handlers using hash ClientObjectManager.RegisterSpawnHandler(creatureHash, SpawnCoin, UnSpawnCoin); Note The unspawn function may be left as null , Mirage will then call GameObject.Destroy when the destroy message is received Use existing prefab // register handlers using prefab ClientObjectManager.RegisterPrefab(coin, SpawnCoin, UnSpawnCoin); Spawn on Server int coinHash = \"MyCoin\".GetStableHashCode(); // spawn a coin - SpawnCoin is called on client // pass in coinHash so that it is set on the Identity before it is sent to client NetworkServer.Spawn(gameObject, coinHash); The spawn functions themselves are implemented with the delegate signature. Here is the coin spawner. The SpawnCoin would look the same, but have different spawn logic: public NetworkIdentity SpawnCoin(SpawnMessage msg) { return Instantiate(m_CoinPrefab, msg.position, msg.rotation); } public void UnSpawnCoin(NetworkIdentity spawned) { Destroy(spawned); } When using custom spawn functions, it is sometimes useful to be able to unspawn game objects without destroying them. This can be done by calling NetworkServer.Destroy(identity, destroyServerObject: false) , making sure that the 2nd argument is false. This causes the object to be Reset on the server and sends a ObjectDestroyMessage to clients. The ObjectDestroyMessage will cause the custom unspawn function to be called on the clients. If there is no unspawn function the object will instead be Destroy Note that on the host, game objects are not spawned for the local client, because they already exist on the server. This also means that no spawn or unspawn handler functions are called. Setting Up a Game Object Pool with Custom Spawn Handlers Here is an example of how you might set up a simple game object pooling system with custom spawn handlers. Spawning and unspawning then puts game objects in or out of the pool. using System.Collections.Generic; using Mirage; using UnityEngine; namespace Mirage.Examples { public class PrefabPoolManager : MonoBehaviour { [Header(\"Settings\")] public ClientObjectManager clientObjectManager; public int startSize = 5; public int maxSize = 20; public NetworkIdentity prefab; [Header(\"Debug\")] [SerializeField] int currentCount; Queue<NetworkIdentity> pool; void Start() { InitializePool(); clientObjectManager.RegisterPrefab(prefab, SpawnHandler, UnspawnHandler); } // used by clientObjectManager.RegisterPrefab NetworkIdentity SpawnHandler(SpawnMessage msg) { return GetFromPool(msg.position, msg.rotation); } // used by clientObjectManager.RegisterPrefab void UnspawnHandler(NetworkIdentity spawned) { PutBackInPool(spawned); } void OnDestroy() { clientObjectManager.UnregisterPrefab(prefab); } private void InitializePool() { pool = new Queue<NetworkIdentity>(); for (int i = 0; i < startSize; i++) { NetworkIdentity next = CreateNew(); pool.Enqueue(next); } } NetworkIdentity CreateNew() { if (currentCount > maxSize) { Debug.LogError($\"Pool has reached max size of {maxSize}\"); return null; } // use this object as parent so that objects dont crowd hierarchy NetworkIdentity next = Instantiate(prefab, transform); next.name = $\"{prefab.name}_pooled_{currentCount}\"; next.gameObject.SetActive(false); currentCount++; return next; } /// <summary> /// Used to take Object from Pool. /// <para>Should be used on server to get the next Object</para> /// </summary> /// <param name=\"position\"></param> /// <param name=\"rotation\"></param> /// <returns></returns> public NetworkIdentity GetFromPool(Vector3 position, Quaternion rotation) { NetworkIdentity next = pool.Count > 0 ? pool.Dequeue() // take from pool : CreateNew(); // create new because pool is empty // CreateNew might return null if max size is reached if (next == null) { return null; } // set position/rotation and set active next.transform.position = position; next.transform.rotation = rotation; next.gameObject.SetActive(true); return next; } /// <summary> /// Used to put object back into pool so they can b /// <para>Should be used on server after unspawning an object</para> /// </summary> /// <param name=\"spawned\"></param> public void PutBackInPool(NetworkIdentity spawned) { // disable object spawned.gameObject.SetActive(false); // add back to pool pool.Enqueue(spawned); } } } To use this manager, create a new empty game object and add the PrefabPoolManager component (code above). Next, drag a prefab you want to spawn multiple times to the Prefab field, and set startSize and maxSize fields. startSize is how many will be spawned when your game starts. maxSize is the max number that can be spawned, if this number is reached then an error will be given when trying to more new objects. Finally, set up a reference to the PrefabPoolManager in the script you are using for player movement: PrefabPoolManager prefabPoolManager; void Start() { prefabPoolManager = FindObjectOfType<PrefabPoolManager>(); } Your player logic might contain something like this, which moves and fires coins: void Update() { if (!isLocalPlayer) return; // move var x = Input.GetAxis(\"Horizontal\") * 0.1f; var z = Input.GetAxis(\"Vertical\") * 0.1f; transform.Translate(x, 0, z); // shoot if (Input.GetKeyDown(KeyCode.Space)) { // Server RPC Call function is called on the client, but invoked on the server CmdFire(); } } In the fire logic on the player, make it use the game object pool: [ServerRpc] void CmdFire() { // Set up bullet on server NetworkIdentity bullet = prefabPoolManager.GetFromPool(transform.position + transform.forward, Quaternion.identity); Rigidbody rigidBody = bullet.GetComponent<Rigidbody>(); rigidBody.velocity = transform.forward * 4; // tell server to send SpawnMessage, which will call SpawnHandler on client ServerObjectManager.Spawn(bullet); // destroy bullet after 2 seconds StartCoroutine(DestroyDelay(bullet, 2.0f)); } IEnumerator DestroyDelay(NetworkIdentity go, float delay) { yield return new WaitForSeconds(delay); // return object to pool on server prefabPoolManager.PutBackInPool(go); // tell server to send ObjectDestroyMessage, which will call UnspawnHandler on client ServerObjectManager.Destroy(go, destroyServerObject: false); } The Destroy method above shows how to return game objects to the pool so that they can be re-used when you fire again"
  },
  "Articles/Guides/GameObjects/SpawnPlayer.html": {
    "href": "Articles/Guides/GameObjects/SpawnPlayer.html",
    "title": "Player Game Objects",
    "keywords": "Player Game Objects Mirage’s multiplayer HLAPI system handles player game objects differently to non-player game objects. When a new player joins the game (when a new client connects to the server), that player’s game object becomes a “local player” game object on the client of that player, and Unity associates the player’s connection with the player’s game object. Unity associates one player game object for each person playing the game, and routes networking Server RPC Calls to that individual game object. A player cannot invoke a Server RPC Call on another player’s game object, only their own. The NetworkBehaviour class (which you derive from to create your network scripts) has a property called IsLocalPlayer . On each client’s player game object, Mirage sets that property to true on the NetworkBehaviour script, and invokes the OnStartLocalPlayer callback on the object's NetworkIdentity . This means each client has a different game object set up like this, because on each client a different game object is the one that represents the local player. The diagram below shows two clients and their local players. Only the player game object that is “yours” (from your point of view as the player) has the IsLocalPlayer flag set. Usually you should set this flag in script to determine whether to process input, whether to make the camera track the game object, or do any other client-side things that should only occur for the player belonging to that client. Player game objects represent the player (that is, the person playing the game) on the server, and have the ability to run Server RPC Calls from the player’s client. These Server RPC Calls are secure client-to-server remote procedure calls. In this server-authoritative system, other non-player server-side game objects cannot receive Server RPC Calls directly from client-side game objects. This is both for security, and to reduce the complexity of building your game. By routing all incoming Server RPC Calls from users through the player game object, you can ensure that these messages come from the right place, the right client, and can be handled in a central location. The CharacterSpawner component adds a player every time a client connects to the server. In some situations though, you might want it not to add players until an input event happens - such as a user pressing a “start” button on the controller. To disable automatic player creation, you may want to write your own CharacterSpawner component and wait for the AddPlayerMessage message to be sent from the client."
  },
  "Articles/Guides/GameObjects/SpawnPlayerCustom.html": {
    "href": "Articles/Guides/GameObjects/SpawnPlayerCustom.html",
    "title": "Custom Character Spawning",
    "keywords": "Custom Character Spawning Mirage comes with a CharacterSpawner which will automatically spawn a character object when a client connects. Many games need character customization. You may want to pick the color of the hair, eyes, skin, height, race, etc. In this case, you will need to create your own CharacterSpawner. Follow these steps: Create your player prefabs (as many as you need) and add them to the Spawnable Prefabs in your NetworkClient. Create a message that describes your player. For example: public struct CreateMMOCharacterMessage { public Race race; public string name; public Color hairColor; public Color eyeColor; } public enum Race { None, Elvish, Dwarvish, Human } Create Player Spawner class and add it to some GameObject in your scene public class CharacterSpawner : MonoBehaviour { public NetworkSceneManager SceneManager; public NetworkClient Client; public NetworkServer Server; } Drag the NetworkClient and NetworkServer and Scene manager to the fields Hook into events: public virtual void Start() { Client.Authenticated.AddListener(OnClientAuthenticated); Server.Authenticated.AddListener(OnServerStarted); } ``` 6) Send your message with your character data when your client connects, or after the user submits his preferences. ``` cs // you can send the message here if you already know // everything about the character at the time of player // or at a later time when the user submits his preferences private void OnClientAuthenticated(INetworkPlayer player) { sceneManager.SetClientReady(); var mmoCharacter = new CreateMMOCharacterMessage { // populare the message with your data } player.Send(mmoCharacter) } Receive your message in the server and spawn the player private void OnServerStarted() { // wait for client to send us an AddPlayerMessage Server.MessageHandler.RegisterHandler<CreateMMOCharacterMessage>(OnCreateCharacter); } void OnCreateCharacter(INetworkPlayer conn, CreateMMOCharacterMessage msg) { // create your character object // use the data in msg to configure it GameObject playerObject = ...; // spawn it as the character object server.AddCharacter(conn, playerObject); } Ready State This out of date and needs updating In addition to characters, player also have a “ready” state. The host sends clients that are ready information about spawned game objects and state synchronization updates; clients which are not ready are not sent these updates. When a client initially connects to a server, it is not ready. While in this non-ready state, the client can do things that don’t require real-time interactions with the game state on the server, such as loading Scenes, allowing the player to choose an avatar, or fill in log-in boxes. Once a client has completed all its pre-game work, and all its Assets are loaded, it can call ClientScene.Ready to enter the “ready” state. The simple example above demonstrates implementation of ready states; because adding a player with ServerObjectManager.AddCharacter also puts the client into the ready state if it is not already in that state. Clients can send and receive network messages without being ready, which also means they can do so without having an active player game object. So a client at a menu or selection screen can connect to the game and interact with it, even though they have no player game object. See documentation on Network Messages for more details about sending messages without using RPC calls. Note the ready state may be going away in the future. Switching Characters To replace the character game object for a player, use ServerObjectManager.ReplaceCharacter . This is useful having different game object for the player at different times, such as in game and a pregame lobby. The function takes the same arguments as AddCharacter , but allows there to already be a character for that player. The old character game object is not destroyed when ReplaceCharacter is called. The NetworkRoomManager uses this technique to switch from the NetworkRoomPlayer game object to a game play player game object when all the players in the room are ready. You can also use ReplaceCharacter to respawn a player or change the object that represents the player. In some cases it is better to just disable a game object and reset its game attributes on respawn. The following code sample demonstrates how to actually replace the player game object with a new game object: public class MyNetworkManager : MonoBehaviour { public NetworkServer Server; public ServerObjectManager ServerObjectManager; public void Respawn(NetworkPlayer player, GameObject newPrefab) { // Cache a reference to the current character object GameObject oldPlayer = player.Identity.gameObject; // Instantiate the new character object and broadcast to clients ServerObjectManager.ReplaceCharacter(player, Instantiate(newPrefab)); // Remove the previous character object that's now been replaced Server.Destroy(oldPlayer); } } Destroyed Characters If the character game object for a player is destroyed, then that client cannot execute ServerRpc's. They can, however, still send network messages. To use ReplaceCharacter you must have the NetworkPlayer reference for the player’s client. This is usually the Owner property on the NetworkBehaviour class, but if the old player has already been destroyed, then that might not be readily available. To find the connection, there are some lists available. If using the NetworkRoomManager , then the room players are available in roomSlots . The NetworkServer also has lists of connections ."
  },
  "Articles/Guides/Generics.html": {
    "href": "Articles/Guides/Generics.html",
    "title": "Generics In mirage",
    "keywords": "Generics In mirage Mirage supports generic types for SyncVars , Rpcs , and for fields in NetworkMessages . NetworkBehaviour By making a NetworkBehaviour generic you can then use generic SyncVar fields or use the generic in an rpc public class MyGenericBehaviour<T> : NetworkBehaviour { [SyncVar] public T Value; public void MyRpc(T value) { // do stuff } } Warning making the rpc itself generic does not work. for example MyRpc<T>(T value) will not work. This is because the receiver will have no idea what generic to invoke the type as. Ensure Type has Write and Read functions In order for a type to work as a generic, it must have Write and Read that Mirage can find. For built in types this is done automatically (see Serialization ). For custom types Mirage will try to automatically find them and generate functions, however this does not always work. Adding [NetworkMessage] to the type will tell Mirage to generate functions for it. [NetworkMessage] public struct MyCustomType { public int Value; } Alternatively you can manually create Write and Read functions for your type public static class MyCustomTypeExtensions { public static void Write(this NetworkWriter writer, MyCustomType value) { // write here } public static MyCustomType Read(this NetworkReader reader) { // read here } } Network Messages and other types Generic message are partly supported. Generic Instance can be used as messages, For example using MyMessage<int> in the example below. This also includes using generic types in RPC or inside other types as long they are generic instances. public struct MyMessage<T> { public T Value; } class Manager { void Start() { Server.MessageHandler.RegisterHandler<MyMessage<int>>(HandleMessage); } void HandleIntMessage(INetworkPlayer player, MyMessage<int> msg) { // do stuff } } Note generic message should not have [NetworkMessage] because this cause Mirage to try to make writer for the generic itself. Only generic instances (eg MyMessage ) can have serialize functions SyncList, SyncDictionary, SyncSet SyncList, SyncDictionary and SyncSet can have generic types as their element type as long as it is a generic instance (eg MyType<int> not MyType<T> ). public struct MyType<T> { public bool Option; public T Value; } public class MyBehaviour : NetworkBehaviour { public SyncList<MyType<float>> myList; }"
  },
  "Articles/Guides/IDs.html": {
    "href": "Articles/Guides/IDs.html",
    "title": "Got ID?",
    "keywords": "Got ID? Asset Id Mirage uses GUID for Asset Ids. Every prefab with a NetworkIdentity component has an Asset Id, which is simply Unity's AssetDatabase.AssetPathToGUID converted to 16 bytes. Mirage needs that to know which prefabs to spawn. Scene Id Mirage uses uint for Scene Ids. Every game object with a NetworkIdentity in the scene (hierarchy) is assigned a scene id in OnPostProcessScene. Mirage needs that to distinguish scene objects from each other, because Unity has no unique id for different game objects in the scene. Network Instance Id (a.k.a. NetId) Mirage uses uint for NetId. Every NetworkIdentity is assigned a NetId in NetworkIdentity.OnStartServer, or after spawning it. Mirage uses the id when passing messages between client and server to tell which object is the recipient of the message. Connection Id Every network connection has a connection id, which is assigned by the low level Transport layer. Connection id 0 is reserved for the local connection when the server is also a client (host)"
  },
  "Articles/Guides/index.html": {
    "href": "Articles/Guides/index.html",
    "title": "Networking Concepts Overview",
    "keywords": "Networking Concepts Overview High level scripting API Mirage’s networking has a “high-level” scripting API (which we’ll refer to as the HLAPI). Using this means you get access to commands which cover most of the common requirements for multiuser games without needing to worry about the “lower level” implementation details. The HLAPI allows you to: Control the networked state of the game using a “Network Manager”. Operate “client hosted” games, where the host is also a player client. Serialize data using a general-purpose serializer. Send and receive network messages. Send networked commands from clients to servers. Make remote procedure calls (RPCs) from servers to clients. Send networked events from servers to clients. Engine and Editor integration Mirage’s networking is integrated into the engine and the editor, allowing you to work with components and visual aids to build your multiplayer game. It provides: A NetworkIdentity component for networked objects. A NetworkBehaviour for networked scripts. Configurable automatic synchronization of object transforms. Automatic synchronization of script variables. Support for placing networked objects in Unity scenes. Network components"
  },
  "Articles/Guides/MirrorMigration.html": {
    "href": "Articles/Guides/MirrorMigration.html",
    "title": "Mirror Migration Guide",
    "keywords": "Mirror Migration Guide This is a simple guide describing how to convert your Mirror project to Mirage. Namespace First of all, Mirror namespace needs to be changed to Mirage . So in your code, replace all: using Mirror; with using Mirage; Components Many roles that NetworkManager fulfilled in Mirror were split into multiple simpler components in Mirage, such as NetworkClient , NetworkServer and NetworkSceneManager . Those classes are no longer static singletons, they are MonoBehaviours instead, so you need to add them to your scene and reference them. NetworkManager in Mirage only serves as a reference holder for server and client. Tip The easiest way to get started is to right click in the Hierarchy > Network > NetworkManager. This will create a GameObject with all the necessary components and references already set up. Accessing Mirage components from NetworkBehaviour Despite Mirage removing all static state, you can still access the important networking components from within NetworkBehaviour easily. This table shows how to access different components in comparison to Mirror: Mirror (static) Mirage (property of NetworkBehaviour ) NetworkServer Server NetworkClient Client NetworkTime NetworkTime doesn't exist ClientObjectManager doesn't exist ServerObjectManager Network Events Lifecycle Lifecycle management is no longer based on overrides. Instead, there are many UnityEvents that can be hooked into without direct coupling. They can also be used to hook callbacks via Unity Inspector. Tip This guide only shows the Mirror counterpart events, but Mirage has more events available, so be sure to check them out as they might be useful. Server and client events The table below shows the override method names from Mirror's NetworkManager and the corresponding events from Mirage. Mirror (override) Mirage (event) OnStartServer NetworkServer.Started OnServerConnect NetworkServer.Authenticated OnServerDisconnect NetworkServer.Disconnected OnStopServer NetworkServer.Stopped OnClientConnect NetworkClient.Authenticated OnClientDisconnect NetworkClient.Disconnected For example, this code from Mirror: using Mirror; class MyNetworkManager : NetworkManager { public override void OnStartServer() { // Server started } public override void OnServerConnect(NetworkConnection conn) { // Client connected and authenticated on server } public override void OnStopServer() { // Server stopped } public override void OnStartClient() { // Client started } public override void OnClientConnect(NetworkConnection conn) { // Client connected and authenticated } public override void OnClientDisconnect(NetworkConnection conn) { // Client disconnected } } should be changed to: using Mirage; class MyNetworkManager : NetworkManager { void Awake() { Server.Started.AddListener(OnStartServer); Server.Authenticated.AddListener(OnServerConnect); Server.Stopped.AddListener(OnStopServer); Client.Started.AddListener(OnClientStarted); Client.Authenticated.AddListener(OnClientConnect); Client.Disconnected.AddListener(OnClientDisconnected); } void OnStartServer() { // Server started } void OnServerConnect(INetworkPlayer conn) { // Client connected (and authenticated) on server } void OnStopServer() { // Server stopped } void OnClientStarted() { // Client started } void OnClientConnect(INetworkPlayer conn) { // Client connected } void OnClientDisconnected(ClientStoppedReason reason) { // Client disconnected } } NetworkBehaviour events Table below shows the Mirror's NetworkBehaviour override method names on the left and the Mirage events on the right. Mirror (override) Mirage (event) OnStartServer Identity.OnStartServer OnStopServer Identity.OnStopServer OnStartClient Identity.OnStartClient OnStopClient Identity.OnStopClient OnStartLocalPlayer Identity.OnStartLocalPlayer OnStartAuthority Identity.OnAuthorityChanged OnStopAuthority Identity.OnAuthorityChanged Let's take this Player class as an example. In Mirror, you would do: using Mirror; public class Player : NetworkBehaviour { public override void OnStartServer() { // Player started on server } public override void OnStartClient() { // Player started on client } } Which should be changed like so in Mirage: using Mirage; public class Player : NetworkBehaviour { void Awake() { Identity.OnStartServer.AddListener(OnStartServer); Identity.OnStartClient.AddListener(OnStartClient); } void OnStartServer() { // Player started on server } void OnStartClient() { // Player started on client } } Note Please note that due to timing all event callbacks should be registered in Awake method or via Unity inspector in order for them to be invoked consistently. Method Attributes The table below shows the new attribute names in Mirage. Mirror Mirage [Command] [ServerRpc] [TargetRpc] [ ClientRpc(target = Mirage.RpcTarget enum) [ServerCallback] [Server(error = false)] [ClientCallback] [Client(error = false)] doesn't exist [HasAuthority(error = false)] doesn't exist [LocalPlayer(error = false)] Renames These fields/properties have been renamed: Mirror Mirage ClientScene.localPlayer NetworkPlayer.Identity ClientScene.ready Client.Player.SceneIsReady NetworkIdentity.assetId NetworkIdentity.PrefabHash NetworkIdentity.netId NetworkIdentity.NetId NetworkIdentity.connectionToClient NetworkIdentity.Owner NetworkBehaviour.isServer NetworkBehaviour.IsServer NetworkBehaviour.connectionToClient NetworkBehaviour.Owner NetworkBehaviour.connectionToServer Removed, use Client.Player instead NetworkBehaviour.hasAuthority NetworkBehaviour.HasAuthority NetworkBehaviour.Identity NetworkBehaviour.Identity NetworkBehaviour.netId NetworkBehaviour.NetId NetworkBehaviour.isClientOnly NetworkBehaviour.IsClientOnly NetworkBehaviour.islocalPlayer NetworkBehaviour.IsLocalPlayer NetworkConnection.isReady NetworkPlayer.SceneIsReady NetworkConnection.identity NetworkPlayer.Identity NetworkServer.active NetworkServer.Active NetworkServer.localConnection NetworkServer.LocalPlayer NetworkClient.connection NetworkClient.Player NetworkTime.time NetworkTime.Time Object Management Registered spawnable prefabs were moved from NetworkManager to ClientObjectManager component. You can use the Inspector to register all NetworkIdentities via single click. Spawning and destroying Table below shows how to spawn objects in Mirage from NetworkBehaviour : Mirror Mirage NetworkServer.Spawn ServerObjectManager.Spawn NetworkServer.Destroy [ServerObjectManager.Destroy](xref:Mirage.ServerObjectManager.Destroy(UnityEngine.GameObject, System.Boolean))"
  },
  "Articles/Guides/Profiler.html": {
    "href": "Articles/Guides/Profiler.html",
    "title": "Mirage Network Profiler",
    "keywords": "Mirage Network Profiler The Mirage Profiler is part of the Mirage Pro suit. As of this writing it is accessible to our GitHub Sponsors . Installation Make sure you have the latest version of Mirage. Become a GitHub Sponsor if you haven't. Visit with the Mirage Networking Discord. In the information channel you will learn how to join the github_sponsors channel. In the github_sponsors channel, pinned messages will guide you on how to download the profiler. Install the unity package in your project. Usage In Unity menu, click on Open Window -> Analysis -> Mirage Network Profiler. The profiler view will appear You may dock the profiler anywhere you want Start your game in the editor Press \"Record\" in the profiler Begin your game as host, client or server At the top a chart will show messages coming in and out Click the chart to select a frame The profiler will display information about all the messages sent and received in that frame Currently the messages display the following fields: In/Out: Whether the message was received (in) or sent (out) Name: Short name of the message, if the message was a [Command] , [ClientRpc] , [TargetRpc] or [TargetEvent] , this will display the name of the method, otherwise it will display the name of the message class. Bytes: The size of the message in bytes Count: In the case of out messages, this will contain how many clients the message was sent to. Total Bytes: the size of the message multiplied by the amount of clients the message was sent to (Bytes * Count) Channel: The channel used to send the message. As of this writing, we cannot determine the channel for inbound messages, so it displays -1. This will be improved in future versions. Transports can use channels for many purposes such as reliable, unreliable, encrypted, compressed, etc. Optimizing bandwidth On most transports, the total bandwidth is dominated by the Count column. This is because each message is packaged in a TCP or UDP frame, which have large headers. If you are sending multiple [Command] in the same frame, consider consolidating them into a single [Command] call if it makes sense If you see a large Count number on a specific message, consider adding a NetworkProximityChecker to your object, so that it is only visible to nearby players instead of the entire world. This can dramatically reduce the Count (and total bytes) depending on your game. If you are sending a message every single frame, consider changing your logic so that you only send messages when things change, or use a timer. Consider using SyncToOwner feature so that only the owner gets a message when private information such as inventory changes. This can dramatically reduce the Count depending on your game. If you have a lot of [ClientRpc] calls that synchronize data, consider using [SyncVar] and synclists instead. They can reduce the amount of messages because they only send deltas when they change, plus they get batched together, so hundreds of variables can be synchronized with a single message."
  },
  "Articles/Guides/RemoteCalls/ClientRpc.html": {
    "href": "Articles/Guides/RemoteCalls/ClientRpc.html",
    "title": "ClientRpc Calls",
    "keywords": "ClientRpc Calls ClientRpc are sent from NetworkBehaviours on the server to Behaviours on the client. They can be sent from any NetworkBehaviour that has been spawned. To make a function into a ClientRpc add [ClientRpc] directly above the function. [ClientRpc] public void MyRpcFunction() { // code to invoke on client } ClientRpc functions can't be static and must return void . RpcTarget There are 3 target modes for ClientRpc: Observers (default) Owner Player RpcTarget.Observers This is the default target. This will send the RPC message to only the observers of an object according to its Network Visibility . If there is no Network Visibility on the object it will send to all players. RpcTarget.Owner This will send the RPC message to only the owner of the object. RpcTarget.Player This will send the RPC message to the NetworkPlayer that is passed into the call. [ClientRpc(target = RpcTarget.Player)] public void MyRpcFunction(NetworkPlayer target) { // code to invoke on client } Mirage will use the NetworkPlayer target to know where to sent it, but it will not send the target value. Because of this its value will always be null on the client. Exclude owner You may want to exclude the owner client when calling a ClientRpc. This is done with the excludeOwner option: [ClientRpc(excludeOwner = true)] . Channel RPC can be sent using either the Reliable or Unreliable channels. [ClientRpc(channel = Channel.Reliable)] Examples public class Player : NetworkBehaviour { int health; public void TakeDamage(int amount) { if (!isServer) return; health -= amount; Damage(amount); } [ClientRpc] void Damage(int amount) { Debug.Log(\"Took damage:\" + amount); } } When running a game as a host with a local client, ClientRpc calls will be invoked on the local client even though it is in the same process as the server. So the behaviours of local and remote clients are the same for ClientRpc calls. You can also specify which client gets the call with the target parameter. If you only want the client that owns the object to be called, use [ClientRpc(target = RpcTarget.Owner)] or you can specify which client gets the message by using [ClientRpc(target = RpcTarget.Player)] and passing the player as a parameter. For example: public class Player : NetworkBehaviour { int health; [Server] void Magic(GameObject target, int damage) { target.GetComponent<Player>().health -= damage; NetworkIdentity opponentIdentity = target.GetComponent<NetworkIdentity>(); DoMagic(opponentIdentity.Owner, damage); } [ClientRpc(target = RpcTarget.Player)] public void DoMagic(INetworkPlayer target, int damage) { // This will appear on the opponent's client, not the attacking player's Debug.Log($\"Magic Damage = {damage}\"); } [Server] void HealMe() { health += 10; Healed(10); } [ClientRpc(target = RpcTarget.Owner)] public void Healed(int amount) { // No NetworkPlayer parameter, so it goes to owner Debug.Log($\"Health increased by {amount}\"); } }"
  },
  "Articles/Guides/RemoteCalls/index.html": {
    "href": "Articles/Guides/RemoteCalls/index.html",
    "title": "Remote Actions",
    "keywords": "Remote Actions To invoke code across the network you can use RPC (remote procedure call) and messages. RPC stands for Remote Procedure Calls. They can be used inside NetworkBehaviours to tell either the client or server to do an action. For example, the client sending an RPC to the server to update the player's name. There are 3 types of RPC: Client Rpc | Called on server, Invoked on client Server Rpc | Called on client, Invoked on server, can have return values Network Messages | Calls on either server/client, requires a handler to be registered Mirage uses Network messages for sending everything, this includes Spawning, RPC, and SyncVars. Network message serialized into bytes then sent over the network. Network Message can be used to send data or invoke actions without a NetworkBehaviours. For example, sending character select information before the player's character is spawned. The diagram below shows the directions that remote actions take: Note \"Commands\" is the previous name for \"ServerRpc\" Arguments to Remote Actions Mirage serializes RPC arguments to send them over the network. You can use any supported Mirage type . There are limits to what can be arguments. GameObject, NetworkIdentity, and NetworkBehaviour can be sent because they have a Network ID. But, Mirage can't send other Unity Objects by itself because it will have no way to find them on the other side. It is also possible to create serialize functions for unsupported types. You can find out more information here ."
  },
  "Articles/Guides/RemoteCalls/NetworkMessages.html": {
    "href": "Articles/Guides/RemoteCalls/NetworkMessages.html",
    "title": "Network Messages",
    "keywords": "Network Messages <!-- todo --> For the most part we recommend the high level ServerRpc / ClientRpc calls and SyncVar , but you can also send low level network messages. This can be useful if you want clients to send messages that are not tied to game objects, such as logging, analytics or profiling information. Usage Define a new struct (rather than a class to prevent GC allocations) which will represent your message. Add any supported Mirage types as public fields of that struct. This will be the data you want to send. Register a handler for that message on NetworkServer and/or NetworkClient 's MessageHandler depending on where you want to listen for that message being received. Use the Send() method on the NetworkClient , NetworkServer or NetworkPlayer classes depending on which way you want to send the message. Example using UnityEngine; using Mirage; public class Scores : MonoBehaviour { // attach these in the inspector public NetworkServer Server; public NetworkClient Client; // using structs to prevent GC allocations public struct ScoreMessage { public int score; public Vector3 scorePos; public int lives; } void Awake() { Client.MessageHandler.RegisterHandler<ScoreMessage>(OnScore); // register Client to listen for the ScoreMessage } public void SendScore(int score, Vector3 scorePos, int lives) { ScoreMessage msg = new ScoreMessage() { score = score, scorePos = scorePos, lives = lives }; Server.SendToAll(msg); } void OnScore(INetworkPlayer player, ScoreMessage msg) { Debug.Log(\"ScoreMessage received on client with score \" + msg.score); } } Note that there is no serialization code for the ScoreMessage struct in this source code example. Mirage will generate a reader and writer for ScoreMessage when it sees that it is being sent."
  },
  "Articles/Guides/RemoteCalls/RpcExamples.html": {
    "href": "Articles/Guides/RemoteCalls/RpcExamples.html",
    "title": "Rpc Examples",
    "keywords": "Rpc Examples Examples of Rpc and generated code Example 1 Set players name from client and have it synced to other players public class Player : NetworkBehaviour { [SyncVar] public string PlayerName; [ServerRpc] public void RpcChangeName(string newName) { PlayerName = newName; } } Generated code Weaver moves the user code into a new function and then replace the body of the Rpc with an Internal send call RPCs are registered using the classes static constructor with methods that will read all the parameter and then invoke the user code method public class Player : NetworkBehaviour { [SyncVar] public string PlayerName; [ServerRpc] public void RpcChangeName(string newName) { if (this.IsServer) { UserCode_RpcChangeName_123456789(newName); } else { using (PooledNetworkWriter writer = NetworkWriterPool.GetWriter()) { writer.WriteString(newName); ServerRpcSender.Send(this, 123456789, writer, 0, true); } } } public void UserCode_RpcChangeName_123456789(string newName) { PlayerName = newName; } protected void Skeleton_RpcChangeName_123456789(NetworkReader reader, INetworkPlayer senderConnection, int replyId) { this.UserCode_RpcChangeName_123456789(reader.ReadString()); } public Player() { this.remoteCallCollection.Register(0, typeof(Player), \"Player.RpcChangeName\", RpcInvokeType.ServerRpc, new CmdDelegate(Skeleton_RpcChangeName), true); } protected override int GetRpcCount() { return 1; } }"
  },
  "Articles/Guides/RemoteCalls/ServerRpc.html": {
    "href": "Articles/Guides/RemoteCalls/ServerRpc.html",
    "title": "Server RPC Calls",
    "keywords": "Server RPC Calls Server RPC Calls are sent from character objects on the client to character objects on the server. For security, Server RPC Calls can only be sent from YOUR character object by default, so you cannot control the objects of other players. You can bypass the authority check using [ServerRpc(requireAuthority = false)] . To make a function into a Server RPC Calls, add the [ServerRpc] custom attribute to it. This function will now be run on the server when it is called on the client. Any parameters of allowed data type will be automatically passed to the server with the Server RPC Call. Server RPC Calls functions cannot be static. public class Player : NetworkBehaviour { void Update() { if (!isLocalPlayer) return; if (Input.GetKey(KeyCode.X)) DropCube(); } // assigned in inspector public GameObject cubePrefab; [ServerRpc] void DropCube() { if (cubePrefab != null) { Vector3 spawnPos = transform.position + transform.forward * 2; Quaternion spawnRot = transform.rotation; GameObject cube = Instantiate(cubePrefab, spawnPos, spawnRot); NetworkServer.Spawn(cube); } } } Be careful of sending ServerRpcs from the client every frame! This can cause a lot of network traffic. Returning values ServerRpcs can return values. It can take a long time for the server to reply, so they must return a UniTask which the client can await. To return a value, add a return value using UniTask<MyReturnType> where MyReturnType is any supported Mirage type . In the server you can make your method async, or you can use UniTask.FromResult(myresult); . For example: public class Shop: NetworkBehavior { [ServerRpc] public UniTask<int> GetPrice(string item) { switch (item) { case \"turnip\": return UniTask.FromResult(10); case \"apple\": return UniTask.FromResult(3); default: return UniTask.FromResult(int.MaxValue); } } [Client] public async UniTaskVoid DisplayTurnipPrice() { // call the RPC and wait for the response without blocking the main thread int price = await GetPrice(\"turnip\"); Debug.Log($\"Turnips price {price}\"); } } ServerRpc and Authority It is possible to invoke ServerRpcs on non-character objects if any of the following are true: The object was spawned with client authority The object has client authority set with NetworkIdentity.AssignClientAuthority the Server RPC Call has the requireAuthority option set false. You can include an optional INetworkPlayer sender = null parameter in the Server RPC Call method signature and Mirage will fill in the sending client for you. Do not try to set a value for this optional parameter...it will be ignored. Server RPC Calls sent from these object are run on the server instance of the object, not on the associated character object for the client. public enum DoorState : byte { Open, Closed } public class Door : NetworkBehaviour { [SyncVar] public DoorState doorState; [ServerRpc(requireAuthority = false)] public void CmdSetDoorState(DoorState newDoorState, INetworkPlayer sender = null) { if (sender.identity.GetComponent<Player>().hasDoorKey) doorState = newDoorState; } }"
  },
  "Articles/Guides/Resources.html": {
    "href": "Articles/Guides/Resources.html",
    "title": "Resources",
    "keywords": "Resources work in progress Video Tutorials Playlists Unity - Mirage Networking by First Gear Games Mirage Multiplayer by Dapper Dino Object Pooling Simple object pooling script Advanced object pooling scripts"
  },
  "Articles/Guides/SceneLoading/index.html": {
    "href": "Articles/Guides/SceneLoading/index.html",
    "title": "Loading scenes in Mirage",
    "keywords": "Loading scenes in Mirage Use NetworkSceneManager to help load scenes and sync them between server and client. To customize scene handling you can make a subclass and override the virtual methods. If you need more unique logic to load scenes you can have full control by following this guide ."
  },
  "Articles/Guides/SceneLoading/Manual.html": {
    "href": "Articles/Guides/SceneLoading/Manual.html",
    "title": "Manual scene loading",
    "keywords": "Manual scene loading If NetworkSceneManager doesn't work for your case you can control everything yourself. Using Messages These messages are built in and used by NetworkSceneManager. If you are creating your own scene logic then you can re-use these messages for your own purpose. SceneMessage Sent to client to load a scene SceneReadyMessage Sent to either client or server when they have finished loading Loading a scene Server Mark Player as not ready, using SceneIsReady Send SceneMessage to clients Client after receiving SceneMessage (optional) Mark local player as not ready Load the scene after loading finished Call ClientObjectManager.PrepareToSpawnSceneObjects (This will tell Mirage about any new scene objects) (optional) Mark local player as ready Send SceneReadyMessage to server Server after receiving SceneReadyMessage Mark the player as ready using: player.SceneIsReady = true Call ServerObjectManager.SpawnVisibleObjects or ServerObjectManager.AddCharacter (Mirage will send spawn message to client) SpawnVisibleObjects vs AddCharacter When calling SpawnVisibleObjects it will only spawn objects if the player has a character. This check can be avoided by using the ignoreHasCharacter argument. When AddCharacter is called it will send a spawn message for the new character to the client. After that it will call SpawnVisibleObjects to spawn any objects that are visible to the new character. If your game has a player character you'll want to use AddCharacter most of the time. But if your game does not have a player character or you want to spawn objects earlier then you should use SpawnVisibleObjects with ignoreHasCharacter set up true . You can also use SpawnVisibleObjects(player, true) to spawn scene objects before the player character by calling it before AddCharacter . Note Make sure to call ClientObjectManager.PrepareToSpawnSceneObjects client side before calling SpawnVisibleObjects or AddCharacter . If that function is not called the the client will not be able to find scene objects when spawn message are received. Host mode If using this setup in Host mode make sure you only load the Scene once, this can be done by checking if server is active before loading scene on client. The rest of the setup should stay the same. In host mode there will be 2 copies of the NetworkPlayer one for client side and one for server side. When using player.SceneIsReady you will need to make sure you are setting it on both copies of the player. The easiest way to do this is just treat the host client as a normal client and send message, but be aware of any functions you dont want called twice."
  },
  "Articles/Guides/SceneLoading/NetworkSceneManager.html": {
    "href": "Articles/Guides/SceneLoading/NetworkSceneManager.html",
    "title": "Using NetworkSceneManager",
    "keywords": "Using NetworkSceneManager NetworkSceneManager contains methods and logic to help keep the scene in sync between server and client. Warning This page is work in progress How to use Network scene manager takes care of most of the grunt work that is needed to load unload and network scenes between server and client. Below examples shows exactly how to use the network scene manager. Load Scene Normally This will load up a new scene on server and tell all current player's loaded on server to load the scene up. public class LoadScene : MonoBehaviour { public void Start() { NetworkSceneManager sceneManager = GetComponent<NetworkSceneManager>(); sceneManager.ServerLoadSceneNormal(\"path to scene asset file.\") } } Note If you require physic's scene's to load up on server you can override the default parameter like so. sceneManager.ServerLoadSceneNormal(\"path to scene asset file.\", new LoadSceneParameters { loadSceneMode = LoadSceneMode.Normal, localPhysicsMode = LocalPhysicsMode.Physics2D }); Load Scene Additively This will load a scene additively on server and tell specific clients to do the same. Example shows send to everyone. public class LoadSceneAdditively : MonoBehaviour { public void Start() { NetworkSceneManager sceneManager = GetComponent<NetworkSceneManager>(); sceneManager.ServerLoadSceneAdditively(\"path to scene asset file.\", sceneManager.Server.Players) } } Note If you want to send the additive scene to only specific player's we can do it like so. You must get the player on your own. sceneManager.ServerLoadSceneAdditively(\"path to scene asset file.\", Player) Note Also if you want to load the scene normally to specific player's versus additively like server you can override the parameter to do so also. Server will still load additively, reason is if you need fully normal loading you can use above method instead to do it. sceneManager.ServerLoadSceneAdditively(\"path to scene asset file.\", Player, true) Note Also if you want to load the scene in physic's mode you can override another parameter also to do so. You can also make clients load normally in example below we keep it false to load the client side additively too. sceneManager.ServerLoadSceneAdditively(\"path to scene asset file.\", Player, false, new LoadSceneParameters { loadSceneMode = LoadSceneMode.Additively, localPhysicsMode = LocalPhysicsMode.Physics2D ) This will unload a scene additively on server and tell specific clients to do the same. Example shows send to everyone. public class UnLoadSceneAdditively : MonoBehaviour { public void Start() { NetworkSceneManager sceneManager = GetComponent<NetworkSceneManager>(); sceneManager.ServerUnloadSceneAdditively(\"path to scene asset file.\", sceneManager.Server.Players) } } Note If you want to send the additive scene to only specific player's we can do it like so. You must get the player on your own. sceneManager.ServerLoadSceneAdditively(\"path to scene asset file.\", Player) Virtual Methods Some of the methods in NetworkSceneManager can be overridden to customize how it works Start OnDestroy ClientStartSceneMessage ClientFinishedLoadingSceneMessage ClientNotReadyMessage OnServerAuthenticated OnServerPlayerDisconnected Example - OnServerAuthenticated By default OnServerAuthenticated sends the active scene and all additive scenes to the client, It can be overridden to only send the active scene: public class MySceneManager : NetworkSceneManager { protected internal override void OnServerAuthenticated(INetworkPlayer player) { // just load server's active scene instead of all additive scenes as well player.Send(new SceneMessage { MainActivateScene = ActiveScenePath }); player.Send(new SceneReadyMessage()); } } Example - Start By default Start registers all our listener's for scene management handling. If you need to override it then do this and add your stuff. public class MySceneManager : NetworkSceneManager { protected internal override void Start() { // add your stuff before. base.Start(); // add your stuff after. } } Example - OnDestroy By default OnDestroy de-registers all our listener's for scene management handling. If you need to override it then do this and add your stuff. public class MySceneManager : NetworkSceneManager { protected internal override void OnDestroy() { // add your stuff before. base.OnDestroy(); // add your stuff after. } }"
  },
  "Articles/Guides/Serialization.html": {
    "href": "Articles/Guides/Serialization.html",
    "title": "Serialization",
    "keywords": "Serialization This page goes into depth about Serialization, for the basics see DataTypes . Mirage creates Serialize and Deserialize functions for types using Weaver. Weaver edits dll after unity compiles them using Mono.Cecil. This allows mirror to have a lot of complex features like SyncVar, ClientRpc and Message Serialization without the user needed to manually set everything up. Rules and tips There are some rules and limits for what Weaver can do. Some features add complexity and are hard to maintain so have not been implemented. These features are not impossible to implement and could be added if there is a high demand for them. You should be able to write Custom Read/Write functions for any type, and Weaver will use. This means if there is a unsupported type like int[][] creating a custom Read/Write function will allow you to sync int[][] in SyncVar/ClientRpc/etc If you have a type that has a field that is not able to be Serialize, you can mark that field with [System.NonSerialized] and weaver will ignore it Unsupported Types Some of these types are unsupported due to the complexity they would add, as mentioned above. NOTE: Types in this list can have custom writers. Jagged and Multidimensional array Types that Inherit from UnityEngine.Component UnityEngine.Object UnityEngine.ScriptableObject Generic Types, eg MyData<T> Custom Read/Write must declare T, eg MyData<int> Interfaces Types that references themselves Built-in Read Write Functions Mirage provides some built-in Read/Write Functions. They can be found in NetworkReaderExtensions and NetworkWriterExtensions . This is a Non-compete list of types that have built-in functions, check the classes above to see the full list. Most c# primitive types Common Unity structs Vector3 Quaternion Rect Ray Guid NetworkIdentity, GameObject, Transform NetworkIdentity, GameObject, Transform The netId of the Object is sent over the network, and the Object with the same netId is returned on the other side. If the netId is zero or an object is not found then null will be returned. Generated Read Write Functions Weaver will Generate Read Write functions for Classes or Structs Enums Arrays eg int[] ArraySegments eg ArraySegment<int> Lists eg List<int> Classes and Structs Weaver will Read/Write every public field in the type, unless the field is marked with [System.NonSerialized] . If there is an unsupported type in the class or struct Weaver will fail to make Read/Write functions for it. NOTE: Weaver does not check properties Enums Weaver will use the underlying Type of an enum to Read and Write them. By default this is int . For example Switch will use the byte Read/Write functions to be Serialized public enum Switch : byte { Left, Middle, Right, } Collections Weaver will Generate writes for the collections listed above. Weaver will use the elements Read/Write function. The element must have a Read/Write function so must be a supported type, or have a custom Read/Write function. For example: float[] is a supported type because Mirage has a built-in Read/Write function for float . MyData[] is a supported type as Weaver is able to generate a Read/Write function for MyData public struct MyData { public int someValue; public float anotherValue; } Adding Custom Read Write functions Read Write functions are static methods in the form of: public static void WriteMyType(this NetworkWriter writer, MyType value) { // write MyType data here } public static MyType ReadMyType(this NetworkReader reader) { // read MyType data here } It is best practice to make Read/Write functions extension methods so they can be called like writer.WriteMyType(value) . It is a good idea to call them ReadMyType and WriteMyType so it is obvious what type they are for. However the name of the function doesn't matter, weaver should be able to find it no matter what it is called. Properties Example Weaver wont write properties, but a custom writer can be used to send them over the network. This can be useful if you want to have private set for your properties public struct MyData { public int someValue { get; private set; } public float anotherValue { get; private set; } public MyData(int someValue, float anotherValue) { this.someValue = someValue; this.anotherValue = anotherValue; } } public static class CustomReadWriteFunctions { public static void WriteMyType(this NetworkWriter writer, MyData value) { writer.WriteInt32(value.someValue); writer.WriteSingle(value.anotherValue); } public static MyData ReadMyType(this NetworkReader reader) { return new MyData(reader.ReadInt32(), reader.ReadSingle()); } } Unsupported type Example Rigidbody is an unsupported type because it inherits from Component . But a custom writer can be added so that it is synced using a NetworkIdentity if one is attached. public struct MyCollision { public Vector3 force; public Rigidbody rigidbody; } public static class CustomReadWriteFunctions { public static void WriteMyCollision(this NetworkWriter writer, MyCollision value) { writer.WriteVector3(value.force); NetworkIdentity networkIdentity = value.rigidbody.GetComponent<NetworkIdentity>(); writer.WriteNetworkIdentity(networkIdentity); } public static MyCollision ReadMyCollision(this NetworkReader reader) { Vector3 force = reader.ReadVector3(); NetworkIdentity networkIdentity = reader.ReadNetworkIdentity(); Rigidbody rigidBody = networkIdentity != null ? networkIdentity.GetComponent<Rigidbody>() : null; return new MyCollision { force = force, rigidbody = rigidBody, }; } } Above are functions for MyCollision , but instead you could add functions for Rigidbody and let weaver would generate a writer for MyCollision . public static class CustomReadWriteFunctions { public static void WriteRigidbody(this NetworkWriter writer, Rigidbody rigidbody) { NetworkIdentity networkIdentity = rigidbody.GetComponent<NetworkIdentity>(); writer.WriteNetworkIdentity(networkIdentity); } public static Rigidbody ReadRigidbody(this NetworkReader reader) { NetworkIdentity networkIdentity = reader.ReadNetworkIdentity(); Rigidbody rigidBody = networkIdentity != null ? networkIdentity.GetComponent<Rigidbody>() : null; return rigidBody; } } Debugging You can use tools like dnSpy to view the complied code after Weaver has altered it. This can help to understand and debug what Mirage and Weaver does."
  },
  "Articles/Guides/Sync/index.html": {
    "href": "Articles/Guides/Sync/index.html",
    "title": "State Synchronization",
    "keywords": "State Synchronization State synchronization refers to the synchronization of values such as integers, floating point numbers, strings and boolean values belonging to scripts. State synchronization is done from the Server to remote clients. The local client does not have data serialized to it. It does not need it, because it shares the Scene with the server. However, SyncVar hooks are called on local clients. Data is not synchronized in the opposite direction - from remote clients to the server. To do this, you need to use Server RPC calls. SyncVars SyncVars are variables of scripts that inherit from NetworkBehaviour , which are synchronized from the server to clients. SyncLists SyncLists contain lists of values and synchronize data from servers to clients. SyncDictionary A SyncDictionary is an associative array containing an unordered list of key, value pairs. SyncHashSet An unordered set of values that do not repeat. SyncSortedSet A sorted set of values that do not repeat. Sync To Owner It is often the case when you don't want some player data visible to other players. In the inspector change the \"Network Sync Mode\" from \"Observers\" (default) to \"Owner\" to let Mirage know to synchronize the data only with the owning client. For example, suppose you are making an inventory system. Suppose player A,B and C are in the same area. There will be a total of 12 objects in the entire network: Client A has Player A (himself), Player B and Player C Client B has Player A , Player B (himself) and Player C Client C has Player A , Player B and Player C (himself) Server has Player A, Player B, Player C each one of them would have an Inventory component Suppose Player A picks up some loot. The server adds the loot to Player's A inventory, which would have a SyncLists of Items. By default, Mirage now has to synchronize player A's inventory everywhere, that means sending an update message to client A, client B and client C, because they all have a copy of Player A. This is wasteful, Client B and Client C do not need to know about Player's A inventory, they never see it on screen. It is also a security problem, someone could hack the client and display other people's inventory and use it to their advantage. If you set the \"Network Sync Mode\" in the Inventory component to \"Owner\", then Player A's inventory will only be synchronized with Client A. Now, suppose instead of 3 people you have 50 people in an area and one of them picks up loot. It means that instead of sending 50 messages to 50 different clients, you would only send 1. This can have a big impact in bandwith in your game. Other typical use cases include quests, player's hand in a card game, skills, experience, or any other data you don't need to share with other players. Advanced State Synchronization In most cases, the use of SyncVars is enough for your game scripts to serialize their state to clients. However in some cases you might require more complex serialization code. This page is only relevant for advanced developers who need customized synchronization solutions that go beyond Mirage’s normal SyncVar feature. Custom Serialization Functions To perform your own custom serialization, you can implement virtual functions on NetworkBehaviour to be used for SyncVar serialization. These functions are: public virtual bool OnSerialize(NetworkWriter writer, bool initialState); public virtual void OnDeserialize(NetworkReader reader, bool initialState); Use the initialState flag to differentiate between the first time a game object is serialized and when incremental updates can be sent. The first time a game object is sent to a client, it must include a full state snapshot, but subsequent updates can save on bandwidth by including only incremental changes. The OnSerialize function should return true to indicate that an update should be sent. If it returns true, the dirty bits for that script are set to zero. If it returns false, the dirty bits are not changed. This allows multiple changes to a script to be accumulated over time and sent when the system is ready, instead of every frame. The OnSerialize function is only called for initialState or when the NetworkBehaviour is dirty. A NetworkBehaviour will only be dirty if a SyncVar or SyncObject (e.g. SyncList ) has changed since the last OnSerialize call. After data has been sent the NetworkBehaviour will not be dirty again until the next syncInterval (set in the inspector). A NetworkBehaviour can also be marked as dirty by manually calling SetDirtyBit (this does not bypass the syncInterval limit). Although this works, it is usually better to let Mirage generate these methods and provide custom serializers for your specific field. Serialization Flow Game objects with the Network Identity component attached can have multiple scripts derived from NetworkBehaviour . The flow for serializing these game objects is: On the server: Each NetworkBehaviour has a dirty mask. This mask is available inside OnSerialize as syncVarDirtyBits Each SyncVar in a NetworkBehaviour script is assigned a bit in the dirty mask. Changing the value of SyncVars causes the bit for that SyncVar to be set in the dirty mask Alternatively, calling SetDirtyBit writes directly to the dirty mask NetworkIdentity game objects are checked on the server as part of it’s update loop If any NetworkBehaviour s on a NetworkIdentity are dirty, then an UpdateVars packet is created for that game object The UpdateVars packet is populated by calling OnSerialize on each NetworkBehaviour on the game object NetworkBehaviour s that are not dirty write a zero to the packet for their dirty bits NetworkBehaviour s that are dirty write their dirty mask, then the values for the SyncVars that have changed If OnSerialize returns true for a NetworkBehaviour , the dirty mask is reset for that NetworkBehaviour so it does not send again until its value changes. The UpdateVars packet is sent to ready clients that are observing the game object On the client: an UpdateVars packet is received for a game object The OnDeserialize function is called for each NetworkBehaviour script on the game object Each NetworkBehaviour script on the game object reads a dirty mask. If the dirty mask for a NetworkBehaviour is zero, the OnDeserialize function returns without reading any more If the dirty mask is non-zero value, then the OnDeserialize function reads the values for the SyncVars that correspond to the dirty bits that are set If there are SyncVar hook functions, those are invoked with the value read from the stream. So for this script: using Mirror; public class Data : NetworkBehaviour { [SyncVar(hook = nameof(OnInt1Changed))] public int int1 = 66; [SyncVar] public int int2 = 23487; [SyncVar] public string MyString = \"Example string\"; void OnInt1Changed(int oldValue, int newValue) { // do something here } } The following sample shows the code that is generated by Mirage for the SerializeSyncVars function which is called inside NetworkBehaviour .OnSerialize : public override bool SerializeSyncVars(NetworkWriter writer, bool initialState) { // Write any SyncVars in base class bool written = base.SerializeSyncVars(writer, forceAll); if (initialState) { // The first time a game object is sent to a client, send all the data (and no dirty bits) writer.WritePackedUInt32((uint)this.int1); writer.WritePackedUInt32((uint)this.int2); writer.Write(this.MyString); return true; } else { // Writes which SyncVars have changed writer.WritePackedUInt64(base.syncVarDirtyBits); if ((base.get_syncVarDirtyBits() & 1u) != 0u) { writer.WritePackedUInt32((uint)this.int1); written = true; } if ((base.get_syncVarDirtyBits() & 2u) != 0u) { writer.WritePackedUInt32((uint)this.int2); written = true; } if ((base.get_syncVarDirtyBits() & 4u) != 0u) { writer.Write(this.MyString); written = true; } return written; } } The following sample shows the code that is generated by Mirage for the DeserializeSyncVars function which is called inside NetworkBehaviour .OnDeserialize : public override void DeserializeSyncVars(NetworkReader reader, bool initialState) { // Read any SyncVars in base class base.DeserializeSyncVars(reader, initialState); if (initialState) { // The first time a game object is sent to a client, read all the data (and no dirty bits) int oldInt1 = this.int1; this.int1 = (int)reader.ReadPackedUInt32(); // if old and new values are not equal, call hook if (!base.SyncVarEqual<int>(num, ref this.int1)) { this.OnInt1Changed(num, this.int1); } this.int2 = (int)reader.ReadPackedUInt32(); this.MyString = reader.ReadString(); return; } int dirtySyncVars = (int)reader.ReadPackedUInt32(); // is 1st SyncVar dirty if ((dirtySyncVars & 1) != 0) { int oldInt1 = this.int1; this.int1 = (int)reader.ReadPackedUInt32(); // if old and new values are not equal, call hook if (!base.SyncVarEqual<int>(num, ref this.int1)) { this.OnInt1Changed(num, this.int1); } } // is 2nd SyncVar dirty if ((dirtySyncVars & 2) != 0) { this.int2 = (int)reader.ReadPackedUInt32(); } // is 3rd SyncVar dirty if ((dirtySyncVars & 4) != 0) { this.MyString = reader.ReadString(); } } If a NetworkBehaviour has a base class that also has serialization functions, the base class functions should also be called."
  },
  "Articles/Guides/Sync/SyncDictionary.html": {
    "href": "Articles/Guides/Sync/SyncDictionary.html",
    "title": "SyncDictionary",
    "keywords": "SyncDictionary A SyncDictionary<TKey, TValue> is an associative array containing an unordered list of key, value pairs. Keys and values can be any of Mirage supported types . SyncDictionary works much like SyncLists : when you make a change on the server, the change is propagated to all clients and the appropriate callback is called. Usage Add a field of type SyncDictionary<TKey, TValue> on any NetworkBehaviour where TKey and TValue can be any supported Mirage type and initialize it. Important You need to initialize the SyncDictionary immediately after definition in order for them to work. You can mark them as readonly to enforce proper usage. Basic example using UnityEngine; using Mirage; using Mirage.Collections; [System.Serializable] public struct Item { public string name; public int hitPoints; public int durability; } public class Player : NetworkBehaviour { public readonly SyncDictionary<stirng, Item> Equipment = new SyncDictionary<string, Item>(); void Awake() { Identity.OnStartServer.AddListener(OnStartServer); } void OnStartServer() { Equipment.Add(\"head\", new Item { name = \"Helmet\", hitPoints = 10, durability = 20 }); Equipment.Add(\"body\", new Item { name = \"Epic Armor\", hitPoints = 50, durability = 50 }); Equipment.Add(\"feet\", new Item { name = \"Sneakers\", hitPoints = 3, durability = 40 }); Equipment.Add(\"hands\", new Item { name = \"Sword\", hitPoints = 30, durability = 15 }); } } Callbacks You can detect when a SyncDictionary changes on the client and/or server. This is especially useful for refreshing your UI, character appearance etc. There are different callbacks for different operations, such as OnChange (any change to the dictionary), OnInsert (adding new element) etc. Please check the SyncDictionary API reference for the complete list of callbacks. Depending on where you want to invoke the callbacks, you can use these methods to register them: Awake for both client and server Identity.OnStartServer event for server-only Identity.OnStartClient event for cleint-only Note By the time you subscribe, the dictionary will already be initialized, so you will not get a call for the initial data, only updates. Example using Mirage; using Mirage.Collections; public class Player : NetworkBehaviour { public readonly SyncDictionary<stirng, Item> Equipment = new SyncDictionary<string, Item>(); public readonly SyncDictionary<stirng, Item> Hotbar = new SyncDictionary<string, Item>(); // this will hook the callback on both server and client void Awake() { Equipment.OnChange += UpdateEquipment; Identity.OnStartClient.AddListener(OnStartClient); } // hotbar changes will only be invoked on clients void OnStartClient() { Hotbar.OnChange += UpdateHotbar; } void UpdateEquipment() { // here you can refresh your UI for instance } void UpdateHotbar() { // here you can refresh your UI for instance } } By default, SyncDictionary uses a Dictionary to store its data. If you want to use a different dictionary implementation, add a constructor and pass the dictionary implementation to the parent constructor. For example: public SyncDictionary<string, Item> myDict = new SyncIDictionary<string, Item>(new MyDictionary<string, Item>());"
  },
  "Articles/Guides/Sync/SyncHashSet.html": {
    "href": "Articles/Guides/Sync/SyncHashSet.html",
    "title": "SyncHashSet",
    "keywords": "SyncHashSet SyncHashSet are sets similar to C# HashSet<T> that synchronize their contents from the server to the clients. A SyncHashSet can contain any supported Mirage type Usage Create a class that derives from SyncHashSet for your specific type. This is necessary because Mirage will add methods to that class with the weaver. Then add a SyncHashSet field to your NetworkBehaviour class. For example: [System.Serializable] public class SyncSkillSet : SyncHashSet<string> {} public class Player : NetworkBehaviour { [SerializeField] readonly SyncSkillSet skills = new SyncSkillSet(); int skillPoints = 10; [Command] public void CmdLearnSkill(string skillName) { if (skillPoints > 1) { skillPoints--; skills.Add(skillName); } } } You can also detect when a SyncHashSet changes. This is useful for refreshing your character in the client or determining when you need to update your database. Subscribe to the Callback event typically during Start , OnClientStart or OnServerStart for that. Note that by the time you subscribe, the set will already be initialized, so you will not get a call for the initial data, only updates. Note SyncSets must be initialized in the constructor, not in Startxxx(). You can make them readonly to ensure correct usage. [System.Serializable] public class SyncSetBuffs : SyncHashSet<string> {}; public class Player : NetworkBehaviour { [SerializeField] public readonly SyncSetBuffs buffs = new SyncSetBuffs(); // this will add the delegate on the client. // Use OnStartServer instead if you want it on the server public override void OnStartClient() { buffs.Callback += OnBuffsChanged; } void OnBuffsChanged(SyncSetBuffs.Operation op, string buff) { switch (op) { case SyncSetBuffs.Operation.OP_ADD: // we added a buff, draw an icon on the character break; case SyncSetBuffs.Operation.OP_CLEAR: // clear all buffs from the character break; case SyncSetBuffs.Operation.OP_REMOVE: // We removed a buff from the character break; } } }"
  },
  "Articles/Guides/Sync/SyncLists.html": {
    "href": "Articles/Guides/Sync/SyncLists.html",
    "title": "SyncLists",
    "keywords": "SyncLists SyncLists are array based lists similar to C# List<T> that synchronize their contents from the server to the clients. A SyncList<T> can contain any supported Mirage type . Usage Add a field of type SyncList<T> on any NetworkBehaviour where T can be any supported Mirage type and initialize it. Important You need to initialize the SyncList immediately after definition in order for them to work. You can mark them as readonly to enforce proper usage. Basic example using Mirage; using Mirage.Collections; [System.Serializable] public struct Item { public string name; public int amount; public Color32 color; } public class Player : NetworkBehaviour { readonly SyncList<Item> inventory = new SyncList<Item>(); public int coins = 100; [ServerRpc] public void Purchase(string itemName) { if (coins > 10) { coins -= 10; Item item = new Item { name = \"Sword\", amount = 3, color = new Color32(125, 125, 125, 255) }; // during next synchronization, all clients will see the item inventory.Add(item); } } } Callbacks You can detect when a SyncList changes on the client and/or server. This is especially useful for refreshing your UI, character appearance etc. There are different callbacks for different operations, such as OnChange (any change to the list), OnInsert (adding new element) etc. Please check the SyncList API reference for the complete list of callbacks. Depending on where you want to invoke the callbacks, you can use these methods to register them: Awake for both client and server Identity.OnStartServer event for server-only Identity.OnStartClient event for cleint-only Note By the time you subscribe, the list will already be initialized, so you will not get a call for the initial data, only updates. Example using Mirage; using Mirage.Collections; public class Player : NetworkBehaviour { readonly SyncList<Item> inventory = new SyncList<Item>(); readonly SyncList<Item> hotbar = new SyncList<Item>(); // this will hook the callback on both server and client void Awake() { inventory.OnChange += UpdateInventory; Identity.OnStartClient.AddListener(OnStartClient); } // hotbar changes will only be invoked on clients void OnStartClient() { hotbar.OnChange += UpdateHotbar; } void UpdateInventory() { // here you can refresh your UI for instance } void UpdateHotbar() { // here you can refresh your UI for instance } } By default, SyncList uses a List to store its data. If you want to use a different list implementation, add a constructor and pass the list implementation to the parent constructor. For example: public SyncList<Item> myList = new SyncList<Item>(new MyIList<Item>());"
  },
  "Articles/Guides/Sync/SyncSortedSet.html": {
    "href": "Articles/Guides/Sync/SyncSortedSet.html",
    "title": "SyncSortedSet",
    "keywords": "SyncSortedSet SyncSortedSet are sets similar to C# SortedSet<T> that synchronize their contents from the server to the clients. Unlike SyncHashSets, all elements in a SyncSortedSet are sorted when they are inserted. Please note this has some performance implications. A SyncSortedSet can contain any supported Mirage type Usage Create a class that derives from SyncSortedSet for your specific type. This is necessary because Mirage will add methods to that class with the weaver. Then add a SyncSortedSet field to your NetworkBehaviour class. For example: class Player : NetworkBehaviour { class SyncSkillSet : SyncSortedSet<string> {} readonly SyncSkillSet skills = new SyncSkillSet(); int skillPoints = 10; [Command] public void CmdLearnSkill(string skillName) { if (skillPoints > 1) { skillPoints--; skills.Add(skillName); } } } You can also detect when a SyncSortedSet changes. This is useful for refreshing your character in the client or determining when you need to update your database. Subscribe to the Callback event typically during Start , OnClientStart or OnServerStart for that. Note that by the time you subscribe, the set will already be initialized, so you will not get a call for the initial data, only updates. Note SyncSets must be initialized in the constructor, not in Startxxx(). You can make them readonly to ensure correct usage. class Player : NetworkBehaviour { class SyncSetBuffs : SyncSortedSet<string> {}; readonly SyncSetBuffs buffs = new SyncSetBuffs(); // this will add the delegate on the client. // Use OnStartServer instead if you want it on the server public override void OnStartClient() { buffs.Callback += OnBuffsChanged; } void OnBuffsChanged(SyncSetBuffs.Operation op, string buff) { switch (op) { case SyncSetBuffs.Operation.OP_ADD: // we added a buff, draw an icon on the character break; case SyncSetBuffs.Operation.OP_CLEAR: // clear all buffs from the character break; case SyncSetBuffs.Operation.OP_REMOVE: // We removed a buff from the character break; } } }"
  },
  "Articles/Guides/Sync/SyncVars.html": {
    "href": "Articles/Guides/Sync/SyncVars.html",
    "title": "SyncVars",
    "keywords": "SyncVars SyncVars are properties of classes that inherit from NetworkBehaviour , which are synchronized from the server to clients. When a game object is spawned, or a new player joins a game in progress, they are sent the latest state of all SyncVars on networked objects that are visible to them. Use the [SyncVar] custom attribute to specify which variables in your script you want to synchronize. Note The state of SyncVars is applied to game objects on clients before Identity.OnStartClient event is invoked, so the state of the object is always up-to-date in subscribed callbacks. SyncVars can use any type supported by Mirage . You can have up to 64 SyncVars on a single NetworkBehaviour script, including SyncLists and other sync types. The server automatically sends SyncVar updates when the value of a SyncVar changes, so you do not need to track when they change or send information about the changes yourself. Changing a value in the inspector will not trigger an update. Note SyncVars are not sent right away or in the order they are set. They will be sent as a group in the next sync update. Example Let's have a simple Player class with the following code: using Mirage; using UnityEngine; public class Player : NetworkBehaviour { [SyncVar] public int clickCount; void Update() { if (IsLocalPlayer && Input.GetMouseButtonDown(0)) { ServerRpc_IncreaseClicks(); } } [ServerRpc] public void ServerRpc_IncreaseClicks() { // This is executed on the server clickCount++; } } In this example, when Player A clicks the left mouse button, he sends a ServerRpc to the server where the clickCount SyncVar is incremented. All other visible players will be informed about Player A's new clickCount value. Class inheritance SyncVars work with class inheritance. Consider this example: class Pet : NetworkBehaviour { [SyncVar] string name; } class Cat : Pet { [SyncVar] public Color32 color; } You can attach the Cat component to your cat prefab, and it will synchronize both it's name and color . Warning Both Cat and Pet should be in the same assembly. If they are in separate assemblies, make sure not to change name from inside Cat directly, add a method to Pet instead. SyncVar hook The hook property of SyncVar can be used to specify a function to be called when the SyncVar changes value on the client and server. Trivia: The hook callback must have two parameters of the same type as the SyncVar property. One for the old value, one for the new value. The hook is always called after the SyncVar value is set. You don't need to set it yourself. The hook only fires for changed values, and changing a value in the inspector will not trigger an update. Hooks can be virtual methods and overriden in a derived class. Example Client Only Below is a simple example of assigning a random color to each player when they're spawned on the server. All clients will see all players in the correct colors, even if they join later. using UnityEngine; using Mirage; public class Player : NetworkBehaviour { [SyncVar(hook = nameof(UpdateColor))] Color playerColor = Color.black; Renderer renderer; // Unity makes a clone of the Material every time renderer.material is used. // Cache it here and Destroy it in OnDestroy to prevent a memory leak. Material cachedMaterial; void Awake() { renderer = GetComponent<Renderer>(); Identity.OnStartServer.AddListener(OnStartServer); } void OnStartServer() { playerColor = Random.ColorHSV(0f, 1f, 1f, 1f, 0.5f, 1f); } void UpdateColor(Color oldColor, Color newColor) { // this is executed on this player for each client if (cachedMaterial == null) { cachedMaterial = renderer.material; } cachedMaterial.color = newColor; } void OnDestroy() { Destroy(cachedMaterial); } } Example Client & Server Below is a simple example of assigning a random color to each player when they're spawned on the server. All clients will see all players in the correct colors, even if they join later. Server will also fire the event. using UnityEngine; using Mirage; public class Player : NetworkBehaviour { [SyncVar(hook = nameof(UpdateColor), invokeHookOnServer = true)] Color playerColor = Color.black; Renderer renderer; // Unity makes a clone of the Material every time renderer.material is used. // Cache it here and Destroy it in OnDestroy to prevent a memory leak. Material cachedMaterial; void Awake() { renderer = GetComponent<Renderer>(); Identity.OnStartServer.AddListener(OnStartServer); } void OnStartServer() { playerColor = Random.ColorHSV(0f, 1f, 1f, 1f, 0.5f, 1f); } void UpdateColor(Color oldColor, Color newColor) { // this is executed on this player for each client if (cachedMaterial == null) { cachedMaterial = renderer.material; } cachedMaterial.color = newColor; } void OnDestroy() { Destroy(cachedMaterial); } } SyncVars Initialize Only Just like regular Syncvars, when an game object is spawned, or a new player joins a game in progress, they are sent the latest state of all SyncVars on networked objects that are visible to them. With the InitialOnly flag set to true you will now be able to control the state of the syncvar manually rather than waiting for Mirage to update them. Note Make sure you manually update your observable clients with the new state. Syncvar Hooks become redundant, as you are setting the state of the Syncvar directly. Example using Mirage; using UnityEngine; public class Player : NetworkBehaviour { [SyncVar(initialOnly = true)] private int weaponId; private void Awake() { Identity.OnStartClient.AddListener(OnStartClient); } private void OnStartClient() { // update weapon using id from syncvar (sent to client via spawn message UpdateWeapon(weaponId); } private void Update() { if (Input.GetKeyDown(KeyCode.Q)) { // Client Request weapon change ServerRpc_SetSyncVarWeaponId(7); } } [ServerRpc] private void ServerRpc_SetSyncVarWeaponId(int weaponId) { // set weapon id on server so new players get it this.weaponId = weaponId; // tell current players about it ClientRpc_SetSyncVarWeaponId(weaponId); // update weapon on server UpdateWeapon(weaponId); } [ClientRpc] private void ClientRpc_SetSyncVarWeaponId(int weaponId) { // set id on client this.weaponId = weaponId; // update weapon on client UpdateWeapon(weaponId); } public void UpdateWeapon(int weaponId) { // do stuff to update weapon here // for example, its spawning model } }"
  },
  "Articles/Guides/Visibility.html": {
    "href": "Articles/Guides/Visibility.html",
    "title": "Network Visibility",
    "keywords": "Network Visibility Multiplayer games use the concept of network visibility to determine which players can see which game objects at any given time during game play. In a game that has a moving viewpoint and moving game objects, it’s common that players cannot see everything that is happening in the game at once. If a particular player, at a certain point in time during game play, cannot see most of the other players, non-player characters, or other moving or interactive things in your game, there is usually no need for the server to send information about those things to the player’s client. This can benefit your game in two ways: It reduces the amount of data sent across the network between players. This can help improve the responsiveness of your game, and reduce bandwidth use. The bigger and more complex your multiplayer game, the more important this issue is. It also helps prevent some cheating. Since a player client does not have information about things that can’t be seen, a hack on that player’s computer cannot reveal the information. The idea of “visibility” in the context of networking doesn’t necessarily relate to whether game objects are directly visible on-screen. Instead, it relates to whether data should or shouldn’t be sent about the game object in question to a particular client. Put simply, if a client can’t ‘see’ an game object, it does not need to be sent information about that game object across the network. Ideally you want to limit the amount of data you are sending across the network to only what is necessary, because sending large amounts of unnecessary data across the network can cause network performance problems. However, it can be also be resource intensive or complex to determine accurately whether a game object truly visible to a given player, so it’s often a good idea to use a more simple calculation for the purposes of determining whether a player should be sent networked data about it - i.e. whether it is ‘Network Visible’. The balance you want to achieve when considering this is between the cost of the complexity of the calculation for determining the visibility, and the cost of sending more information than necessary over the network. A very simple way to calculate this is a distance (proximity) check, and Mirage provides a built-in component for this purpose. Network Proximity Checker Component Mirage’s Network Proximity Checker component is simplest way to implement network visibility for players. It works in conjunction with the physics system to determine whether game objects are close enough (that is, “visible” for the purposes of sending network messages in your multiplayer game). Network Scene Checker Component Mirage's Network Scene Checker component can be used to isolate players and networked objects on the server in additive scene instances. Network Visibility on Remote Clients When a player on a remote client joins a networked game, only game objects that are network-visible to the player will be spawned on that remote client. This means that even if the player enters a large world with many networked game objects, the game can start quickly because it does not need to spawn every game object that exists in the world. Note that this applies to networked game objects in your Scene, but does not affect the loading of Assets. Unity still takes time to load the Assets for registered Prefabs and Scene game objects. When a player moves within the world, the set of network-visible game objects changes. The player’s client is told about these changes as they happen. The ObjectHide message is sent to clients when a game object becomes no longer network-visible. By default, Mirage destroys the game object when it receives this message. When a game object becomes visible, the client receives an ObjectSpawn message, as if Mirage has spawned the game object for the first time. By default, the game object is instantiated like any other spawned game object. Network Visibility on the Host The host shares the same Scene as the server, because it acts as both the server and the client to the player hosting the game. For this reason, it cannot destroy game objects that are not visible to the local player. Instead, there is the virtual method OnSetLocalVisibility in the NetworkVisibility class that is invoked. This method is invoked on all scripts that inherit from NetworkVisibility on game objects that change visibility state on the host. The default implementation of OnSetLocalVisibility disables or enables all renderer components on the game object. If you want to customize this implementation, you can override the method in your script, and provide a new behavior for how the host (and therefore the local client) should respond when a game object becomes network-visible or invisible (such as disabling HUD elements or renderers). Customizing Network Visibility Sometimes you might want to use other kinds of visibility check, such as grid-based rules, line-of-sight tests, navigation path tests, or any other type of test that suits your game. It may be helpful to understand how the Network Proximity Checker works. The Network Proximity Checker is implemented using the public visibility interface of Mirage’s HLAPI. Using this same interface, you can implement any kind of visibility rules you desire. Each NetworkIdentity keeps track of the set of players that it is visible to. The players that a NetworkIdentity game object is visible to are called the “observers” of the NetworkIdentity. The Network Proximity Checker calls the RebuildObservers method on the Network Identity component at a fixed interval (set using the “Vis Update Interval” value in the inspector), so that the set of network-visible game objects for each player is updated as they move around. In the NetworkVisibility class (which your custom observer scripts inherit from), there are some virtual functions for determining visibility. These are: OnCheckObserver This method is called on the server, on each networked game object when a new player enters the game. If it returns true, that player is added to the object’s observers. The Network Proximity Checker does a simple distance check in its implementation of this function, and uses Physics.OverlapSphereNonAlloc to find the players that are within the visibility distance for this object. OnRebuildObservers This method is called on the server when RebuildObservers is invoked. This method expects the set of observers to be populated with the players that can see the object. The NetworkServer then handles sending ObjectHide and ObjectSpawn messages based on the differences between the old and new visibility sets. OnSetHostVisibility This method is called on the server by the visibility system for objects on a host. Objects on a host (with a local client) cannot be disabled or destroyed when they are not visibile to the local client. So this function is called to allow custom code to hide these objects. A typical implementation will disable renderer components on the object. This is only called on local clients on a host. You can check whether any given networked game object is a player by checking if its NetworkIdentity has a valid Owner. For example: int hitCount = Physics.OverlapSphereNonAlloc(transform.position, visRange, hitsBuffer3D, castLayers); for (int i = 0; i < hitCount; i++) { Collider hit = hitsBuffer3D[i]; NetworkIdentity identity = hit.GetComponent<NetworkIdentity>(); if (identity != null && identity.Owner != null) observers.Add(identity.Owner); }"
  },
  "index.html": {
    "href": "index.html",
    "title": "Mirage Networking",
    "keywords": "Mirage Networking Mirage is an open source, easy to use and modular networking library for Unity. Key Features Modularity: Mirage is built on top of modular components and is easily extensible. Use only the features that you need. Shared codebase: Both server and client can share the same code in a single project which improves productivity and simplifies development. No static state: Run multiple servers/clients from a single Unity instance. Low bandwidth usage: Use our BitPacking features to greatly reduce bandwidth. State synchronization: Use SyncVars to easily synchronize your game state over the network. Server authoritative: Utilize the Server RPCs to do server-authoritative tasks. Message system: Send classes or structs as network messages for low-level operations. Simple socket API: Easy to implement new protocols or services. High performance UDP socket built in. Unity's Fast domain reload support Package Manager support: Use Unity Package Manager (UPM) to easily install Mirage and any of its modules. Great community: Visit our Discord server to discuss your ideas or problems. Getting started Check out our Getting Started guide. Requirements Mirage requires Unity 2019.3 or higher."
  }
}